{
  "version": 3,
  "sources": ["../../less/dist/less.js"],
  "sourcesContent": ["/**\n * Less - Leaner CSS v4.1.3\n * http://lesscss.org\n * \n * Copyright (c) 2009-2022, Alexis Sellier <self@cloudhead.net>\n * Licensed under the Apache-2.0 License.\n *\n * @license Apache-2.0\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.less = factory());\n}(this, (function () { 'use strict';\n\n    // Export a new default each time\r\n    function defaultOptions () {\r\n        return {\r\n            /* Inline Javascript - @plugin still allowed */\r\n            javascriptEnabled: false,\r\n            /* Outputs a makefile import dependency list to stdout. */\r\n            depends: false,\r\n            /* (DEPRECATED) Compress using less built-in compression.\r\n             * This does an okay job but does not utilise all the tricks of\r\n             * dedicated css compression. */\r\n            compress: false,\r\n            /* Runs the less parser and just reports errors without any output. */\r\n            lint: false,\r\n            /* Sets available include paths.\r\n             * If the file in an @import rule does not exist at that exact location,\r\n             * less will look for it at the location(s) passed to this option.\r\n             * You might use this for instance to specify a path to a library which\r\n             * you want to be referenced simply and relatively in the less files. */\r\n            paths: [],\r\n            /* color output in the terminal */\r\n            color: true,\r\n            /* The strictImports controls whether the compiler will allow an @import inside of either\r\n             * @media blocks or (a later addition) other selector blocks.\r\n             * See: https://github.com/less/less.js/issues/656 */\r\n            strictImports: false,\r\n            /* Allow Imports from Insecure HTTPS Hosts */\r\n            insecure: false,\r\n            /* Allows you to add a path to every generated import and url in your css.\r\n             * This does not affect less import statements that are processed, just ones\r\n             * that are left in the output css. */\r\n            rootpath: '',\r\n            /* By default URLs are kept as-is, so if you import a file in a sub-directory\r\n             * that references an image, exactly the same URL will be output in the css.\r\n             * This option allows you to re-write URL's in imported files so that the\r\n             * URL is always relative to the base imported file */\r\n            rewriteUrls: false,\r\n            /* How to process math\r\n             *   0 always           - eagerly try to solve all operations\r\n             *   1 parens-division  - require parens for division \"/\"\r\n             *   2 parens | strict  - require parens for all operations\r\n             *   3 strict-legacy    - legacy strict behavior (super-strict)\r\n             */\r\n            math: 1,\r\n            /* Without this option, less attempts to guess at the output unit when it does maths. */\r\n            strictUnits: false,\r\n            /* Effectively the declaration is put at the top of your base Less file,\r\n             * meaning it can be used but it also can be overridden if this variable\r\n             * is defined in the file. */\r\n            globalVars: null,\r\n            /* As opposed to the global variable option, this puts the declaration at the\r\n             * end of your base file, meaning it will override anything defined in your Less file. */\r\n            modifyVars: null,\r\n            /* This option allows you to specify a argument to go on to every URL.  */\r\n            urlArgs: ''\r\n        };\r\n    }\n\n    function extractId(href) {\r\n        return href.replace(/^[a-z-]+:\\/+?[^\\/]+/, '') // Remove protocol & domain\r\n            .replace(/[\\?\\&]livereload=\\w+/, '') // Remove LiveReload cachebuster\r\n            .replace(/^\\//, '') // Remove root /\r\n            .replace(/\\.[a-zA-Z]+$/, '') // Remove simple extension\r\n            .replace(/[^\\.\\w-]+/g, '-') // Replace illegal characters\r\n            .replace(/\\./g, ':'); // Replace dots with colons(for valid id)\r\n    }\r\n    function addDataAttr(options, tag) {\r\n        if (!tag) {\r\n            return;\r\n        } // in case of tag is null or undefined\r\n        for (var opt in tag.dataset) {\r\n            if (tag.dataset.hasOwnProperty(opt)) {\r\n                if (opt === 'env' || opt === 'dumpLineNumbers' || opt === 'rootpath' || opt === 'errorReporting') {\r\n                    options[opt] = tag.dataset[opt];\r\n                }\r\n                else {\r\n                    try {\r\n                        options[opt] = JSON.parse(tag.dataset[opt]);\r\n                    }\r\n                    catch (_) { }\r\n                }\r\n            }\r\n        }\r\n    }\n\n    var browser = {\r\n        createCSS: function (document, styles, sheet) {\r\n            // Strip the query-string\r\n            var href = sheet.href || '';\r\n            // If there is no title set, use the filename, minus the extension\r\n            var id = \"less:\" + (sheet.title || extractId(href));\r\n            // If this has already been inserted into the DOM, we may need to replace it\r\n            var oldStyleNode = document.getElementById(id);\r\n            var keepOldStyleNode = false;\r\n            // Create a new stylesheet node for insertion or (if necessary) replacement\r\n            var styleNode = document.createElement('style');\r\n            styleNode.setAttribute('type', 'text/css');\r\n            if (sheet.media) {\r\n                styleNode.setAttribute('media', sheet.media);\r\n            }\r\n            styleNode.id = id;\r\n            if (!styleNode.styleSheet) {\r\n                styleNode.appendChild(document.createTextNode(styles));\r\n                // If new contents match contents of oldStyleNode, don't replace oldStyleNode\r\n                keepOldStyleNode = (oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 &&\r\n                    oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue);\r\n            }\r\n            var head = document.getElementsByTagName('head')[0];\r\n            // If there is no oldStyleNode, just append; otherwise, only append if we need\r\n            // to replace oldStyleNode with an updated stylesheet\r\n            if (oldStyleNode === null || keepOldStyleNode === false) {\r\n                var nextEl = sheet && sheet.nextSibling || null;\r\n                if (nextEl) {\r\n                    nextEl.parentNode.insertBefore(styleNode, nextEl);\r\n                }\r\n                else {\r\n                    head.appendChild(styleNode);\r\n                }\r\n            }\r\n            if (oldStyleNode && keepOldStyleNode === false) {\r\n                oldStyleNode.parentNode.removeChild(oldStyleNode);\r\n            }\r\n            // For IE.\r\n            // This needs to happen *after* the style element is added to the DOM, otherwise IE 7 and 8 may crash.\r\n            // See http://social.msdn.microsoft.com/Forums/en-US/7e081b65-878a-4c22-8e68-c10d39c2ed32/internet-explorer-crashes-appending-style-element-to-head\r\n            if (styleNode.styleSheet) {\r\n                try {\r\n                    styleNode.styleSheet.cssText = styles;\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Couldn\\'t reassign styleSheet.cssText.');\r\n                }\r\n            }\r\n        },\r\n        currentScript: function (window) {\r\n            var document = window.document;\r\n            return document.currentScript || (function () {\r\n                var scripts = document.getElementsByTagName('script');\r\n                return scripts[scripts.length - 1];\r\n            })();\r\n        }\r\n    };\n\n    var addDefaultOptions = (function (window, options) {\r\n        // use options from the current script tag data attribues\r\n        addDataAttr(options, browser.currentScript(window));\r\n        if (options.isFileProtocol === undefined) {\r\n            options.isFileProtocol = /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);\r\n        }\r\n        // Load styles asynchronously (default: false)\r\n        //\r\n        // This is set to `false` by default, so that the body\r\n        // doesn't start loading before the stylesheets are parsed.\r\n        // Setting this to `true` can result in flickering.\r\n        //\r\n        options.async = options.async || false;\r\n        options.fileAsync = options.fileAsync || false;\r\n        // Interval between watch polls\r\n        options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);\r\n        options.env = options.env || (window.location.hostname == '127.0.0.1' ||\r\n            window.location.hostname == '0.0.0.0' ||\r\n            window.location.hostname == 'localhost' ||\r\n            (window.location.port &&\r\n                window.location.port.length > 0) ||\r\n            options.isFileProtocol ? 'development'\r\n            : 'production');\r\n        var dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);\r\n        if (dumpLineNumbers) {\r\n            options.dumpLineNumbers = dumpLineNumbers[1];\r\n        }\r\n        if (options.useFileCache === undefined) {\r\n            options.useFileCache = true;\r\n        }\r\n        if (options.onReady === undefined) {\r\n            options.onReady = true;\r\n        }\r\n        if (options.relativeUrls) {\r\n            options.rewriteUrls = 'all';\r\n        }\r\n    });\n\n    var logger$1 = {\r\n        error: function (msg) {\r\n            this._fireEvent('error', msg);\r\n        },\r\n        warn: function (msg) {\r\n            this._fireEvent('warn', msg);\r\n        },\r\n        info: function (msg) {\r\n            this._fireEvent('info', msg);\r\n        },\r\n        debug: function (msg) {\r\n            this._fireEvent('debug', msg);\r\n        },\r\n        addListener: function (listener) {\r\n            this._listeners.push(listener);\r\n        },\r\n        removeListener: function (listener) {\r\n            for (var i = 0; i < this._listeners.length; i++) {\r\n                if (this._listeners[i] === listener) {\r\n                    this._listeners.splice(i, 1);\r\n                    return;\r\n                }\r\n            }\r\n        },\r\n        _fireEvent: function (type, msg) {\r\n            for (var i = 0; i < this._listeners.length; i++) {\r\n                var logFunction = this._listeners[i][type];\r\n                if (logFunction) {\r\n                    logFunction(msg);\r\n                }\r\n            }\r\n        },\r\n        _listeners: []\r\n    };\n\n    /**\r\n     * @todo Document why this abstraction exists, and the relationship between\r\n     *       environment, file managers, and plugin manager\r\n     */\r\n    var Environment = /** @class */ (function () {\r\n        function Environment(externalEnvironment, fileManagers) {\r\n            this.fileManagers = fileManagers || [];\r\n            externalEnvironment = externalEnvironment || {};\r\n            var optionalFunctions = ['encodeBase64', 'mimeLookup', 'charsetLookup', 'getSourceMapGenerator'];\r\n            var requiredFunctions = [];\r\n            var functions = requiredFunctions.concat(optionalFunctions);\r\n            for (var i = 0; i < functions.length; i++) {\r\n                var propName = functions[i];\r\n                var environmentFunc = externalEnvironment[propName];\r\n                if (environmentFunc) {\r\n                    this[propName] = environmentFunc.bind(externalEnvironment);\r\n                }\r\n                else if (i < requiredFunctions.length) {\r\n                    this.warn(\"missing required function in environment - \" + propName);\r\n                }\r\n            }\r\n        }\r\n        Environment.prototype.getFileManager = function (filename, currentDirectory, options, environment, isSync) {\r\n            if (!filename) {\r\n                logger$1.warn('getFileManager called with no filename.. Please report this issue. continuing.');\r\n            }\r\n            if (currentDirectory == null) {\r\n                logger$1.warn('getFileManager called with null directory.. Please report this issue. continuing.');\r\n            }\r\n            var fileManagers = this.fileManagers;\r\n            if (options.pluginManager) {\r\n                fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\r\n            }\r\n            for (var i = fileManagers.length - 1; i >= 0; i--) {\r\n                var fileManager = fileManagers[i];\r\n                if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {\r\n                    return fileManager;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        Environment.prototype.addFileManager = function (fileManager) {\r\n            this.fileManagers.push(fileManager);\r\n        };\r\n        Environment.prototype.clearFileManagers = function () {\r\n            this.fileManagers = [];\r\n        };\r\n        return Environment;\r\n    }());\n\n    var colors = {\r\n        'aliceblue': '#f0f8ff',\r\n        'antiquewhite': '#faebd7',\r\n        'aqua': '#00ffff',\r\n        'aquamarine': '#7fffd4',\r\n        'azure': '#f0ffff',\r\n        'beige': '#f5f5dc',\r\n        'bisque': '#ffe4c4',\r\n        'black': '#000000',\r\n        'blanchedalmond': '#ffebcd',\r\n        'blue': '#0000ff',\r\n        'blueviolet': '#8a2be2',\r\n        'brown': '#a52a2a',\r\n        'burlywood': '#deb887',\r\n        'cadetblue': '#5f9ea0',\r\n        'chartreuse': '#7fff00',\r\n        'chocolate': '#d2691e',\r\n        'coral': '#ff7f50',\r\n        'cornflowerblue': '#6495ed',\r\n        'cornsilk': '#fff8dc',\r\n        'crimson': '#dc143c',\r\n        'cyan': '#00ffff',\r\n        'darkblue': '#00008b',\r\n        'darkcyan': '#008b8b',\r\n        'darkgoldenrod': '#b8860b',\r\n        'darkgray': '#a9a9a9',\r\n        'darkgrey': '#a9a9a9',\r\n        'darkgreen': '#006400',\r\n        'darkkhaki': '#bdb76b',\r\n        'darkmagenta': '#8b008b',\r\n        'darkolivegreen': '#556b2f',\r\n        'darkorange': '#ff8c00',\r\n        'darkorchid': '#9932cc',\r\n        'darkred': '#8b0000',\r\n        'darksalmon': '#e9967a',\r\n        'darkseagreen': '#8fbc8f',\r\n        'darkslateblue': '#483d8b',\r\n        'darkslategray': '#2f4f4f',\r\n        'darkslategrey': '#2f4f4f',\r\n        'darkturquoise': '#00ced1',\r\n        'darkviolet': '#9400d3',\r\n        'deeppink': '#ff1493',\r\n        'deepskyblue': '#00bfff',\r\n        'dimgray': '#696969',\r\n        'dimgrey': '#696969',\r\n        'dodgerblue': '#1e90ff',\r\n        'firebrick': '#b22222',\r\n        'floralwhite': '#fffaf0',\r\n        'forestgreen': '#228b22',\r\n        'fuchsia': '#ff00ff',\r\n        'gainsboro': '#dcdcdc',\r\n        'ghostwhite': '#f8f8ff',\r\n        'gold': '#ffd700',\r\n        'goldenrod': '#daa520',\r\n        'gray': '#808080',\r\n        'grey': '#808080',\r\n        'green': '#008000',\r\n        'greenyellow': '#adff2f',\r\n        'honeydew': '#f0fff0',\r\n        'hotpink': '#ff69b4',\r\n        'indianred': '#cd5c5c',\r\n        'indigo': '#4b0082',\r\n        'ivory': '#fffff0',\r\n        'khaki': '#f0e68c',\r\n        'lavender': '#e6e6fa',\r\n        'lavenderblush': '#fff0f5',\r\n        'lawngreen': '#7cfc00',\r\n        'lemonchiffon': '#fffacd',\r\n        'lightblue': '#add8e6',\r\n        'lightcoral': '#f08080',\r\n        'lightcyan': '#e0ffff',\r\n        'lightgoldenrodyellow': '#fafad2',\r\n        'lightgray': '#d3d3d3',\r\n        'lightgrey': '#d3d3d3',\r\n        'lightgreen': '#90ee90',\r\n        'lightpink': '#ffb6c1',\r\n        'lightsalmon': '#ffa07a',\r\n        'lightseagreen': '#20b2aa',\r\n        'lightskyblue': '#87cefa',\r\n        'lightslategray': '#778899',\r\n        'lightslategrey': '#778899',\r\n        'lightsteelblue': '#b0c4de',\r\n        'lightyellow': '#ffffe0',\r\n        'lime': '#00ff00',\r\n        'limegreen': '#32cd32',\r\n        'linen': '#faf0e6',\r\n        'magenta': '#ff00ff',\r\n        'maroon': '#800000',\r\n        'mediumaquamarine': '#66cdaa',\r\n        'mediumblue': '#0000cd',\r\n        'mediumorchid': '#ba55d3',\r\n        'mediumpurple': '#9370d8',\r\n        'mediumseagreen': '#3cb371',\r\n        'mediumslateblue': '#7b68ee',\r\n        'mediumspringgreen': '#00fa9a',\r\n        'mediumturquoise': '#48d1cc',\r\n        'mediumvioletred': '#c71585',\r\n        'midnightblue': '#191970',\r\n        'mintcream': '#f5fffa',\r\n        'mistyrose': '#ffe4e1',\r\n        'moccasin': '#ffe4b5',\r\n        'navajowhite': '#ffdead',\r\n        'navy': '#000080',\r\n        'oldlace': '#fdf5e6',\r\n        'olive': '#808000',\r\n        'olivedrab': '#6b8e23',\r\n        'orange': '#ffa500',\r\n        'orangered': '#ff4500',\r\n        'orchid': '#da70d6',\r\n        'palegoldenrod': '#eee8aa',\r\n        'palegreen': '#98fb98',\r\n        'paleturquoise': '#afeeee',\r\n        'palevioletred': '#d87093',\r\n        'papayawhip': '#ffefd5',\r\n        'peachpuff': '#ffdab9',\r\n        'peru': '#cd853f',\r\n        'pink': '#ffc0cb',\r\n        'plum': '#dda0dd',\r\n        'powderblue': '#b0e0e6',\r\n        'purple': '#800080',\r\n        'rebeccapurple': '#663399',\r\n        'red': '#ff0000',\r\n        'rosybrown': '#bc8f8f',\r\n        'royalblue': '#4169e1',\r\n        'saddlebrown': '#8b4513',\r\n        'salmon': '#fa8072',\r\n        'sandybrown': '#f4a460',\r\n        'seagreen': '#2e8b57',\r\n        'seashell': '#fff5ee',\r\n        'sienna': '#a0522d',\r\n        'silver': '#c0c0c0',\r\n        'skyblue': '#87ceeb',\r\n        'slateblue': '#6a5acd',\r\n        'slategray': '#708090',\r\n        'slategrey': '#708090',\r\n        'snow': '#fffafa',\r\n        'springgreen': '#00ff7f',\r\n        'steelblue': '#4682b4',\r\n        'tan': '#d2b48c',\r\n        'teal': '#008080',\r\n        'thistle': '#d8bfd8',\r\n        'tomato': '#ff6347',\r\n        'turquoise': '#40e0d0',\r\n        'violet': '#ee82ee',\r\n        'wheat': '#f5deb3',\r\n        'white': '#ffffff',\r\n        'whitesmoke': '#f5f5f5',\r\n        'yellow': '#ffff00',\r\n        'yellowgreen': '#9acd32'\r\n    };\n\n    var unitConversions = {\r\n        length: {\r\n            'm': 1,\r\n            'cm': 0.01,\r\n            'mm': 0.001,\r\n            'in': 0.0254,\r\n            'px': 0.0254 / 96,\r\n            'pt': 0.0254 / 72,\r\n            'pc': 0.0254 / 72 * 12\r\n        },\r\n        duration: {\r\n            's': 1,\r\n            'ms': 0.001\r\n        },\r\n        angle: {\r\n            'rad': 1 / (2 * Math.PI),\r\n            'deg': 1 / 360,\r\n            'grad': 1 / 400,\r\n            'turn': 1\r\n        }\r\n    };\n\n    var data = { colors: colors, unitConversions: unitConversions };\n\n    /**\r\n     * The reason why Node is a class and other nodes simply do not extend\r\n     * from Node (since we're transpiling) is due to this issue:\r\n     *\r\n     * https://github.com/less/less.js/issues/3434\r\n     */\r\n    var Node = /** @class */ (function () {\r\n        function Node() {\r\n            this.parent = null;\r\n            this.visibilityBlocks = undefined;\r\n            this.nodeVisible = undefined;\r\n            this.rootNode = null;\r\n            this.parsed = null;\r\n        }\r\n        Object.defineProperty(Node.prototype, \"currentFileInfo\", {\r\n            get: function () {\r\n                return this.fileInfo();\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Node.prototype, \"index\", {\r\n            get: function () {\r\n                return this.getIndex();\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Node.prototype.setParent = function (nodes, parent) {\r\n            function set(node) {\r\n                if (node && node instanceof Node) {\r\n                    node.parent = parent;\r\n                }\r\n            }\r\n            if (Array.isArray(nodes)) {\r\n                nodes.forEach(set);\r\n            }\r\n            else {\r\n                set(nodes);\r\n            }\r\n        };\r\n        Node.prototype.getIndex = function () {\r\n            return this._index || (this.parent && this.parent.getIndex()) || 0;\r\n        };\r\n        Node.prototype.fileInfo = function () {\r\n            return this._fileInfo || (this.parent && this.parent.fileInfo()) || {};\r\n        };\r\n        Node.prototype.isRulesetLike = function () { return false; };\r\n        Node.prototype.toCSS = function (context) {\r\n            var strs = [];\r\n            this.genCSS(context, {\r\n                add: function (chunk, fileInfo, index) {\r\n                    strs.push(chunk);\r\n                },\r\n                isEmpty: function () {\r\n                    return strs.length === 0;\r\n                }\r\n            });\r\n            return strs.join('');\r\n        };\r\n        Node.prototype.genCSS = function (context, output) {\r\n            output.add(this.value);\r\n        };\r\n        Node.prototype.accept = function (visitor) {\r\n            this.value = visitor.visit(this.value);\r\n        };\r\n        Node.prototype.eval = function () { return this; };\r\n        Node.prototype._operate = function (context, op, a, b) {\r\n            switch (op) {\r\n                case '+': return a + b;\r\n                case '-': return a - b;\r\n                case '*': return a * b;\r\n                case '/': return a / b;\r\n            }\r\n        };\r\n        Node.prototype.fround = function (context, value) {\r\n            var precision = context && context.numPrecision;\r\n            // add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999...) are properly rounded:\r\n            return (precision) ? Number((value + 2e-16).toFixed(precision)) : value;\r\n        };\r\n        Node.compare = function (a, b) {\r\n            /* returns:\r\n             -1: a < b\r\n             0: a = b\r\n             1: a > b\r\n             and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\r\n            if ((a.compare) &&\r\n                // for \"symmetric results\" force toCSS-based comparison\r\n                // of Quoted or Anonymous if either value is one of those\r\n                !(b.type === 'Quoted' || b.type === 'Anonymous')) {\r\n                return a.compare(b);\r\n            }\r\n            else if (b.compare) {\r\n                return -b.compare(a);\r\n            }\r\n            else if (a.type !== b.type) {\r\n                return undefined;\r\n            }\r\n            a = a.value;\r\n            b = b.value;\r\n            if (!Array.isArray(a)) {\r\n                return a === b ? 0 : undefined;\r\n            }\r\n            if (a.length !== b.length) {\r\n                return undefined;\r\n            }\r\n            for (var i = 0; i < a.length; i++) {\r\n                if (Node.compare(a[i], b[i]) !== 0) {\r\n                    return undefined;\r\n                }\r\n            }\r\n            return 0;\r\n        };\r\n        Node.numericCompare = function (a, b) {\r\n            return a < b ? -1\r\n                : a === b ? 0\r\n                    : a > b ? 1 : undefined;\r\n        };\r\n        // Returns true if this node represents root of ast imported by reference\r\n        Node.prototype.blocksVisibility = function () {\r\n            if (this.visibilityBlocks == null) {\r\n                this.visibilityBlocks = 0;\r\n            }\r\n            return this.visibilityBlocks !== 0;\r\n        };\r\n        Node.prototype.addVisibilityBlock = function () {\r\n            if (this.visibilityBlocks == null) {\r\n                this.visibilityBlocks = 0;\r\n            }\r\n            this.visibilityBlocks = this.visibilityBlocks + 1;\r\n        };\r\n        Node.prototype.removeVisibilityBlock = function () {\r\n            if (this.visibilityBlocks == null) {\r\n                this.visibilityBlocks = 0;\r\n            }\r\n            this.visibilityBlocks = this.visibilityBlocks - 1;\r\n        };\r\n        // Turns on node visibility - if called node will be shown in output regardless\r\n        // of whether it comes from import by reference or not\r\n        Node.prototype.ensureVisibility = function () {\r\n            this.nodeVisible = true;\r\n        };\r\n        // Turns off node visibility - if called node will NOT be shown in output regardless\r\n        // of whether it comes from import by reference or not\r\n        Node.prototype.ensureInvisibility = function () {\r\n            this.nodeVisible = false;\r\n        };\r\n        // return values:\r\n        // false - the node must not be visible\r\n        // true - the node must be visible\r\n        // undefined or null - the node has the same visibility as its parent\r\n        Node.prototype.isVisible = function () {\r\n            return this.nodeVisible;\r\n        };\r\n        Node.prototype.visibilityInfo = function () {\r\n            return {\r\n                visibilityBlocks: this.visibilityBlocks,\r\n                nodeVisible: this.nodeVisible\r\n            };\r\n        };\r\n        Node.prototype.copyVisibilityInfo = function (info) {\r\n            if (!info) {\r\n                return;\r\n            }\r\n            this.visibilityBlocks = info.visibilityBlocks;\r\n            this.nodeVisible = info.nodeVisible;\r\n        };\r\n        return Node;\r\n    }());\n\n    //\r\n    // RGB Colors - #ff0014, #eee\r\n    //\r\n    var Color = function (rgb, a, originalForm) {\r\n        var self = this;\r\n        //\r\n        // The end goal here, is to parse the arguments\r\n        // into an integer triplet, such as `128, 255, 0`\r\n        //\r\n        // This facilitates operations and conversions.\r\n        //\r\n        if (Array.isArray(rgb)) {\r\n            this.rgb = rgb;\r\n        }\r\n        else if (rgb.length >= 6) {\r\n            this.rgb = [];\r\n            rgb.match(/.{2}/g).map(function (c, i) {\r\n                if (i < 3) {\r\n                    self.rgb.push(parseInt(c, 16));\r\n                }\r\n                else {\r\n                    self.alpha = (parseInt(c, 16)) / 255;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.rgb = [];\r\n            rgb.split('').map(function (c, i) {\r\n                if (i < 3) {\r\n                    self.rgb.push(parseInt(c + c, 16));\r\n                }\r\n                else {\r\n                    self.alpha = (parseInt(c + c, 16)) / 255;\r\n                }\r\n            });\r\n        }\r\n        this.alpha = this.alpha || (typeof a === 'number' ? a : 1);\r\n        if (typeof originalForm !== 'undefined') {\r\n            this.value = originalForm;\r\n        }\r\n    };\r\n    Color.prototype = Object.assign(new Node(), {\r\n        type: 'Color',\r\n        luma: function () {\r\n            var r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255;\r\n            r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);\r\n            g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);\r\n            b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);\r\n            return 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add(this.toCSS(context));\r\n        },\r\n        toCSS: function (context, doNotCompress) {\r\n            var compress = context && context.compress && !doNotCompress;\r\n            var color;\r\n            var alpha;\r\n            var colorFunction;\r\n            var args = [];\r\n            // `value` is set if this color was originally\r\n            // converted from a named color string so we need\r\n            // to respect this and try to output named color too.\r\n            alpha = this.fround(context, this.alpha);\r\n            if (this.value) {\r\n                if (this.value.indexOf('rgb') === 0) {\r\n                    if (alpha < 1) {\r\n                        colorFunction = 'rgba';\r\n                    }\r\n                }\r\n                else if (this.value.indexOf('hsl') === 0) {\r\n                    if (alpha < 1) {\r\n                        colorFunction = 'hsla';\r\n                    }\r\n                    else {\r\n                        colorFunction = 'hsl';\r\n                    }\r\n                }\r\n                else {\r\n                    return this.value;\r\n                }\r\n            }\r\n            else {\r\n                if (alpha < 1) {\r\n                    colorFunction = 'rgba';\r\n                }\r\n            }\r\n            switch (colorFunction) {\r\n                case 'rgba':\r\n                    args = this.rgb.map(function (c) {\r\n                        return clamp$1(Math.round(c), 255);\r\n                    }).concat(clamp$1(alpha, 1));\r\n                    break;\r\n                case 'hsla':\r\n                    args.push(clamp$1(alpha, 1));\r\n                case 'hsl':\r\n                    color = this.toHSL();\r\n                    args = [\r\n                        this.fround(context, color.h),\r\n                        this.fround(context, color.s * 100) + \"%\",\r\n                        this.fround(context, color.l * 100) + \"%\"\r\n                    ].concat(args);\r\n            }\r\n            if (colorFunction) {\r\n                // Values are capped between `0` and `255`, rounded and zero-padded.\r\n                return colorFunction + \"(\" + args.join(\",\" + (compress ? '' : ' ')) + \")\";\r\n            }\r\n            color = this.toRGB();\r\n            if (compress) {\r\n                var splitcolor = color.split('');\r\n                // Convert color to short format\r\n                if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\r\n                    color = \"#\" + splitcolor[1] + splitcolor[3] + splitcolor[5];\r\n                }\r\n            }\r\n            return color;\r\n        },\r\n        //\r\n        // Operations have to be done per-channel, if not,\r\n        // channels will spill onto each other. Once we have\r\n        // our result, in the form of an integer triplet,\r\n        // we create a new Color node to hold the result.\r\n        //\r\n        operate: function (context, op, other) {\r\n            var rgb = new Array(3);\r\n            var alpha = this.alpha * (1 - other.alpha) + other.alpha;\r\n            for (var c = 0; c < 3; c++) {\r\n                rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\r\n            }\r\n            return new Color(rgb, alpha);\r\n        },\r\n        toRGB: function () {\r\n            return toHex(this.rgb);\r\n        },\r\n        toHSL: function () {\r\n            var r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255, a = this.alpha;\r\n            var max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n            var h;\r\n            var s;\r\n            var l = (max + min) / 2;\r\n            var d = max - min;\r\n            if (max === min) {\r\n                h = s = 0;\r\n            }\r\n            else {\r\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n                switch (max) {\r\n                    case r:\r\n                        h = (g - b) / d + (g < b ? 6 : 0);\r\n                        break;\r\n                    case g:\r\n                        h = (b - r) / d + 2;\r\n                        break;\r\n                    case b:\r\n                        h = (r - g) / d + 4;\r\n                        break;\r\n                }\r\n                h /= 6;\r\n            }\r\n            return { h: h * 360, s: s, l: l, a: a };\r\n        },\r\n        // Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\r\n        toHSV: function () {\r\n            var r = this.rgb[0] / 255, g = this.rgb[1] / 255, b = this.rgb[2] / 255, a = this.alpha;\r\n            var max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n            var h;\r\n            var s;\r\n            var v = max;\r\n            var d = max - min;\r\n            if (max === 0) {\r\n                s = 0;\r\n            }\r\n            else {\r\n                s = d / max;\r\n            }\r\n            if (max === min) {\r\n                h = 0;\r\n            }\r\n            else {\r\n                switch (max) {\r\n                    case r:\r\n                        h = (g - b) / d + (g < b ? 6 : 0);\r\n                        break;\r\n                    case g:\r\n                        h = (b - r) / d + 2;\r\n                        break;\r\n                    case b:\r\n                        h = (r - g) / d + 4;\r\n                        break;\r\n                }\r\n                h /= 6;\r\n            }\r\n            return { h: h * 360, s: s, v: v, a: a };\r\n        },\r\n        toARGB: function () {\r\n            return toHex([this.alpha * 255].concat(this.rgb));\r\n        },\r\n        compare: function (x) {\r\n            return (x.rgb &&\r\n                x.rgb[0] === this.rgb[0] &&\r\n                x.rgb[1] === this.rgb[1] &&\r\n                x.rgb[2] === this.rgb[2] &&\r\n                x.alpha === this.alpha) ? 0 : undefined;\r\n        }\r\n    });\r\n    Color.fromKeyword = function (keyword) {\r\n        var c;\r\n        var key = keyword.toLowerCase();\r\n        if (colors.hasOwnProperty(key)) {\r\n            c = new Color(colors[key].slice(1));\r\n        }\r\n        else if (key === 'transparent') {\r\n            c = new Color([0, 0, 0], 0);\r\n        }\r\n        if (c) {\r\n            c.value = keyword;\r\n            return c;\r\n        }\r\n    };\r\n    function clamp$1(v, max) {\r\n        return Math.min(Math.max(v, 0), max);\r\n    }\r\n    function toHex(v) {\r\n        return \"#\" + v.map(function (c) {\r\n            c = clamp$1(Math.round(c), 255);\r\n            return (c < 16 ? '0' : '') + c.toString(16);\r\n        }).join('');\r\n    }\n\n    var Paren = function (node) {\r\n        this.value = node;\r\n    };\r\n    Paren.prototype = Object.assign(new Node(), {\r\n        type: 'Paren',\r\n        genCSS: function (context, output) {\r\n            output.add('(');\r\n            this.value.genCSS(context, output);\r\n            output.add(')');\r\n        },\r\n        eval: function (context) {\r\n            return new Paren(this.value.eval(context));\r\n        }\r\n    });\n\n    var _noSpaceCombinators = {\r\n        '': true,\r\n        ' ': true,\r\n        '|': true\r\n    };\r\n    var Combinator = function (value) {\r\n        if (value === ' ') {\r\n            this.value = ' ';\r\n            this.emptyOrWhitespace = true;\r\n        }\r\n        else {\r\n            this.value = value ? value.trim() : '';\r\n            this.emptyOrWhitespace = this.value === '';\r\n        }\r\n    };\r\n    Combinator.prototype = Object.assign(new Node(), {\r\n        type: 'Combinator',\r\n        genCSS: function (context, output) {\r\n            var spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';\r\n            output.add(spaceOrEmpty + this.value + spaceOrEmpty);\r\n        }\r\n    });\n\n    var Element = function (combinator, value, isVariable, index, currentFileInfo, visibilityInfo) {\r\n        this.combinator = combinator instanceof Combinator ?\r\n            combinator : new Combinator(combinator);\r\n        if (typeof value === 'string') {\r\n            this.value = value.trim();\r\n        }\r\n        else if (value) {\r\n            this.value = value;\r\n        }\r\n        else {\r\n            this.value = '';\r\n        }\r\n        this.isVariable = isVariable;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.setParent(this.combinator, this);\r\n    };\r\n    Element.prototype = Object.assign(new Node(), {\r\n        type: 'Element',\r\n        accept: function (visitor) {\r\n            var value = this.value;\r\n            this.combinator = visitor.visit(this.combinator);\r\n            if (typeof value === 'object') {\r\n                this.value = visitor.visit(value);\r\n            }\r\n        },\r\n        eval: function (context) {\r\n            return new Element(this.combinator, this.value.eval ? this.value.eval(context) : this.value, this.isVariable, this.getIndex(), this.fileInfo(), this.visibilityInfo());\r\n        },\r\n        clone: function () {\r\n            return new Element(this.combinator, this.value, this.isVariable, this.getIndex(), this.fileInfo(), this.visibilityInfo());\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add(this.toCSS(context), this.fileInfo(), this.getIndex());\r\n        },\r\n        toCSS: function (context) {\r\n            context = context || {};\r\n            var value = this.value;\r\n            var firstSelector = context.firstSelector;\r\n            if (value instanceof Paren) {\r\n                // selector in parens should not be affected by outer selector\r\n                // flags (breaks only interpolated selectors - see #1973)\r\n                context.firstSelector = true;\r\n            }\r\n            value = value.toCSS ? value.toCSS(context) : value;\r\n            context.firstSelector = firstSelector;\r\n            if (value === '' && this.combinator.value.charAt(0) === '&') {\r\n                return '';\r\n            }\r\n            else {\r\n                return this.combinator.toCSS(context) + value;\r\n            }\r\n        }\r\n    });\n\n    var Math$1 = {\r\n        ALWAYS: 0,\r\n        PARENS_DIVISION: 1,\r\n        PARENS: 2\r\n        // removed - STRICT_LEGACY: 3\r\n    };\r\n    var RewriteUrls = {\r\n        OFF: 0,\r\n        LOCAL: 1,\r\n        ALL: 2\r\n    };\n\n    /**\r\n     * Returns the object type of the given payload\r\n     *\r\n     * @param {*} payload\r\n     * @returns {string}\r\n     */\r\n    function getType(payload) {\r\n        return Object.prototype.toString.call(payload).slice(8, -1);\r\n    }\r\n    /**\r\n     * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n     *\r\n     * @param {*} payload\r\n     * @returns {payload is Record<string, any>}\r\n     */\r\n    function isPlainObject(payload) {\r\n        if (getType(payload) !== 'Object')\r\n            return false;\r\n        return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\r\n    }\r\n    /**\r\n     * Returns whether the payload is an array\r\n     *\r\n     * @param {any} payload\r\n     * @returns {payload is any[]}\r\n     */\r\n    function isArray(payload) {\r\n        return getType(payload) === 'Array';\r\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    }\n\n    function assignProp(carry, key, newVal, originalObject, includeNonenumerable) {\r\n        var propType = {}.propertyIsEnumerable.call(originalObject, key)\r\n            ? 'enumerable'\r\n            : 'nonenumerable';\r\n        if (propType === 'enumerable')\r\n            carry[key] = newVal;\r\n        if (includeNonenumerable && propType === 'nonenumerable') {\r\n            Object.defineProperty(carry, key, {\r\n                value: newVal,\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Copy (clone) an object and all its props recursively to get rid of any prop referenced of the original object. Arrays are also cloned, however objects inside arrays are still linked.\r\n     *\r\n     * @export\r\n     * @template T\r\n     * @param {T} target Target can be anything\r\n     * @param {Options} [options={}] Options can be `props` or `nonenumerable`\r\n     * @returns {T} the target with replaced values\r\n     * @export\r\n     */\r\n    function copy(target, options) {\r\n        if (options === void 0) { options = {}; }\r\n        if (isArray(target))\r\n            return target.map(function (i) { return copy(i, options); });\r\n        if (!isPlainObject(target))\r\n            return target;\r\n        var props = Object.getOwnPropertyNames(target);\r\n        var symbols = Object.getOwnPropertySymbols(target);\r\n        return __spreadArrays(props, symbols).reduce(function (carry, key) {\r\n            if (isArray(options.props) && !options.props.includes(key)) {\r\n                return carry;\r\n            }\r\n            var val = target[key];\r\n            var newVal = copy(val, options);\r\n            assignProp(carry, key, newVal, target, options.nonenumerable);\r\n            return carry;\r\n        }, {});\r\n    }\n\n    /* jshint proto: true */\r\n    function getLocation(index, inputStream) {\r\n        var n = index + 1;\r\n        var line = null;\r\n        var column = -1;\r\n        while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\r\n            column++;\r\n        }\r\n        if (typeof index === 'number') {\r\n            line = (inputStream.slice(0, index).match(/\\n/g) || '').length;\r\n        }\r\n        return {\r\n            line: line,\r\n            column: column\r\n        };\r\n    }\r\n    function copyArray(arr) {\r\n        var i;\r\n        var length = arr.length;\r\n        var copy = new Array(length);\r\n        for (i = 0; i < length; i++) {\r\n            copy[i] = arr[i];\r\n        }\r\n        return copy;\r\n    }\r\n    function clone(obj) {\r\n        var cloned = {};\r\n        for (var prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                cloned[prop] = obj[prop];\r\n            }\r\n        }\r\n        return cloned;\r\n    }\r\n    function defaults(obj1, obj2) {\r\n        var newObj = obj2 || {};\r\n        if (!obj2._defaults) {\r\n            newObj = {};\r\n            var defaults_1 = copy(obj1);\r\n            newObj._defaults = defaults_1;\r\n            var cloned = obj2 ? copy(obj2) : {};\r\n            Object.assign(newObj, defaults_1, cloned);\r\n        }\r\n        return newObj;\r\n    }\r\n    function copyOptions(obj1, obj2) {\r\n        if (obj2 && obj2._defaults) {\r\n            return obj2;\r\n        }\r\n        var opts = defaults(obj1, obj2);\r\n        if (opts.strictMath) {\r\n            opts.math = Math$1.PARENS;\r\n        }\r\n        // Back compat with changed relativeUrls option\r\n        if (opts.relativeUrls) {\r\n            opts.rewriteUrls = RewriteUrls.ALL;\r\n        }\r\n        if (typeof opts.math === 'string') {\r\n            switch (opts.math.toLowerCase()) {\r\n                case 'always':\r\n                    opts.math = Math$1.ALWAYS;\r\n                    break;\r\n                case 'parens-division':\r\n                    opts.math = Math$1.PARENS_DIVISION;\r\n                    break;\r\n                case 'strict':\r\n                case 'parens':\r\n                    opts.math = Math$1.PARENS;\r\n                    break;\r\n                default:\r\n                    opts.math = Math$1.PARENS;\r\n            }\r\n        }\r\n        if (typeof opts.rewriteUrls === 'string') {\r\n            switch (opts.rewriteUrls.toLowerCase()) {\r\n                case 'off':\r\n                    opts.rewriteUrls = RewriteUrls.OFF;\r\n                    break;\r\n                case 'local':\r\n                    opts.rewriteUrls = RewriteUrls.LOCAL;\r\n                    break;\r\n                case 'all':\r\n                    opts.rewriteUrls = RewriteUrls.ALL;\r\n                    break;\r\n            }\r\n        }\r\n        return opts;\r\n    }\r\n    function merge(obj1, obj2) {\r\n        for (var prop in obj2) {\r\n            if (obj2.hasOwnProperty(prop)) {\r\n                obj1[prop] = obj2[prop];\r\n            }\r\n        }\r\n        return obj1;\r\n    }\r\n    function flattenArray(arr, result) {\r\n        if (result === void 0) { result = []; }\r\n        for (var i = 0, length_1 = arr.length; i < length_1; i++) {\r\n            var value = arr[i];\r\n            if (Array.isArray(value)) {\r\n                flattenArray(value, result);\r\n            }\r\n            else {\r\n                if (value !== undefined) {\r\n                    result.push(value);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\n\n    var utils = /*#__PURE__*/Object.freeze({\n        __proto__: null,\n        getLocation: getLocation,\n        copyArray: copyArray,\n        clone: clone,\n        defaults: defaults,\n        copyOptions: copyOptions,\n        merge: merge,\n        flattenArray: flattenArray\n    });\n\n    var anonymousFunc = /(<anonymous>|Function):(\\d+):(\\d+)/;\r\n    /**\r\n     * This is a centralized class of any error that could be thrown internally (mostly by the parser).\r\n     * Besides standard .message it keeps some additional data like a path to the file where the error\r\n     * occurred along with line and column numbers.\r\n     *\r\n     * @class\r\n     * @extends Error\r\n     * @type {module.LessError}\r\n     *\r\n     * @prop {string} type\r\n     * @prop {string} filename\r\n     * @prop {number} index\r\n     * @prop {number} line\r\n     * @prop {number} column\r\n     * @prop {number} callLine\r\n     * @prop {number} callExtract\r\n     * @prop {string[]} extract\r\n     *\r\n     * @param {Object} e              - An error object to wrap around or just a descriptive object\r\n     * @param {Object} fileContentMap - An object with file contents in 'contents' property (like importManager) @todo - move to fileManager?\r\n     * @param {string} [currentFilename]\r\n     */\r\n    var LessError = function (e, fileContentMap, currentFilename) {\r\n        Error.call(this);\r\n        var filename = e.filename || currentFilename;\r\n        this.message = e.message;\r\n        this.stack = e.stack;\r\n        if (fileContentMap && filename) {\r\n            var input = fileContentMap.contents[filename];\r\n            var loc = getLocation(e.index, input);\r\n            var line = loc.line;\r\n            var col = loc.column;\r\n            var callLine = e.call && getLocation(e.call, input).line;\r\n            var lines = input ? input.split('\\n') : '';\r\n            this.type = e.type || 'Syntax';\r\n            this.filename = filename;\r\n            this.index = e.index;\r\n            this.line = typeof line === 'number' ? line + 1 : null;\r\n            this.column = col;\r\n            if (!this.line && this.stack) {\r\n                var found = this.stack.match(anonymousFunc);\r\n                /**\r\n                 * We have to figure out how this environment stringifies anonymous functions\r\n                 * so we can correctly map plugin errors.\r\n                 *\r\n                 * Note, in Node 8, the output of anonymous funcs varied based on parameters\r\n                 * being present or not, so we inject dummy params.\r\n                 */\r\n                var func = new Function('a', 'throw new Error()');\r\n                var lineAdjust = 0;\r\n                try {\r\n                    func();\r\n                }\r\n                catch (e) {\r\n                    var match = e.stack.match(anonymousFunc);\r\n                    var line = parseInt(match[2]);\r\n                    lineAdjust = 1 - line;\r\n                }\r\n                if (found) {\r\n                    if (found[2]) {\r\n                        this.line = parseInt(found[2]) + lineAdjust;\r\n                    }\r\n                    if (found[3]) {\r\n                        this.column = parseInt(found[3]);\r\n                    }\r\n                }\r\n            }\r\n            this.callLine = callLine + 1;\r\n            this.callExtract = lines[callLine];\r\n            this.extract = [\r\n                lines[this.line - 2],\r\n                lines[this.line - 1],\r\n                lines[this.line]\r\n            ];\r\n        }\r\n    };\r\n    if (typeof Object.create === 'undefined') {\r\n        var F = function () { };\r\n        F.prototype = Error.prototype;\r\n        LessError.prototype = new F();\r\n    }\r\n    else {\r\n        LessError.prototype = Object.create(Error.prototype);\r\n    }\r\n    LessError.prototype.constructor = LessError;\r\n    /**\r\n     * An overridden version of the default Object.prototype.toString\r\n     * which uses additional information to create a helpful message.\r\n     *\r\n     * @param {Object} options\r\n     * @returns {string}\r\n     */\r\n    LessError.prototype.toString = function (options) {\r\n        options = options || {};\r\n        var message = '';\r\n        var extract = this.extract || [];\r\n        var error = [];\r\n        var stylize = function (str) { return str; };\r\n        if (options.stylize) {\r\n            var type = typeof options.stylize;\r\n            if (type !== 'function') {\r\n                throw Error(\"options.stylize should be a function, got a \" + type + \"!\");\r\n            }\r\n            stylize = options.stylize;\r\n        }\r\n        if (this.line !== null) {\r\n            if (typeof extract[0] === 'string') {\r\n                error.push(stylize(this.line - 1 + \" \" + extract[0], 'grey'));\r\n            }\r\n            if (typeof extract[1] === 'string') {\r\n                var errorTxt = this.line + \" \";\r\n                if (extract[1]) {\r\n                    errorTxt += extract[1].slice(0, this.column) +\r\n                        stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') +\r\n                            extract[1].slice(this.column + 1), 'red'), 'inverse');\r\n                }\r\n                error.push(errorTxt);\r\n            }\r\n            if (typeof extract[2] === 'string') {\r\n                error.push(stylize(this.line + 1 + \" \" + extract[2], 'grey'));\r\n            }\r\n            error = error.join('\\n') + stylize('', 'reset') + \"\\n\";\r\n        }\r\n        message += stylize(this.type + \"Error: \" + this.message, 'red');\r\n        if (this.filename) {\r\n            message += stylize(' in ', 'red') + this.filename;\r\n        }\r\n        if (this.line) {\r\n            message += stylize(\" on line \" + this.line + \", column \" + (this.column + 1) + \":\", 'grey');\r\n        }\r\n        message += \"\\n\" + error;\r\n        if (this.callLine) {\r\n            message += stylize('from ', 'red') + (this.filename || '') + \"/n\";\r\n            message += stylize(this.callLine, 'grey') + \" \" + this.callExtract + \"/n\";\r\n        }\r\n        return message;\r\n    };\n\n    var Selector = function (elements, extendList, condition, index, currentFileInfo, visibilityInfo) {\r\n        this.extendList = extendList;\r\n        this.condition = condition;\r\n        this.evaldCondition = !condition;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.elements = this.getElements(elements);\r\n        this.mixinElements_ = undefined;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.setParent(this.elements, this);\r\n    };\r\n    Selector.prototype = Object.assign(new Node(), {\r\n        type: 'Selector',\r\n        accept: function (visitor) {\r\n            if (this.elements) {\r\n                this.elements = visitor.visitArray(this.elements);\r\n            }\r\n            if (this.extendList) {\r\n                this.extendList = visitor.visitArray(this.extendList);\r\n            }\r\n            if (this.condition) {\r\n                this.condition = visitor.visit(this.condition);\r\n            }\r\n        },\r\n        createDerived: function (elements, extendList, evaldCondition) {\r\n            elements = this.getElements(elements);\r\n            var newSelector = new Selector(elements, extendList || this.extendList, null, this.getIndex(), this.fileInfo(), this.visibilityInfo());\r\n            newSelector.evaldCondition = (evaldCondition != null) ? evaldCondition : this.evaldCondition;\r\n            newSelector.mediaEmpty = this.mediaEmpty;\r\n            return newSelector;\r\n        },\r\n        getElements: function (els) {\r\n            if (!els) {\r\n                return [new Element('', '&', false, this._index, this._fileInfo)];\r\n            }\r\n            if (typeof els === 'string') {\r\n                this.parse.parseNode(els, ['selector'], this._index, this._fileInfo, function (err, result) {\r\n                    if (err) {\r\n                        throw new LessError({\r\n                            index: err.index,\r\n                            message: err.message\r\n                        }, this.parse.imports, this._fileInfo.filename);\r\n                    }\r\n                    els = result[0].elements;\r\n                });\r\n            }\r\n            return els;\r\n        },\r\n        createEmptySelectors: function () {\r\n            var el = new Element('', '&', false, this._index, this._fileInfo), sels = [new Selector([el], null, null, this._index, this._fileInfo)];\r\n            sels[0].mediaEmpty = true;\r\n            return sels;\r\n        },\r\n        match: function (other) {\r\n            var elements = this.elements;\r\n            var len = elements.length;\r\n            var olen;\r\n            var i;\r\n            other = other.mixinElements();\r\n            olen = other.length;\r\n            if (olen === 0 || len < olen) {\r\n                return 0;\r\n            }\r\n            else {\r\n                for (i = 0; i < olen; i++) {\r\n                    if (elements[i].value !== other[i]) {\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n            return olen; // return number of matched elements\r\n        },\r\n        mixinElements: function () {\r\n            if (this.mixinElements_) {\r\n                return this.mixinElements_;\r\n            }\r\n            var elements = this.elements.map(function (v) {\r\n                return v.combinator.value + (v.value.value || v.value);\r\n            }).join('').match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g);\r\n            if (elements) {\r\n                if (elements[0] === '&') {\r\n                    elements.shift();\r\n                }\r\n            }\r\n            else {\r\n                elements = [];\r\n            }\r\n            return (this.mixinElements_ = elements);\r\n        },\r\n        isJustParentSelector: function () {\r\n            return !this.mediaEmpty &&\r\n                this.elements.length === 1 &&\r\n                this.elements[0].value === '&' &&\r\n                (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');\r\n        },\r\n        eval: function (context) {\r\n            var evaldCondition = this.condition && this.condition.eval(context);\r\n            var elements = this.elements;\r\n            var extendList = this.extendList;\r\n            elements = elements && elements.map(function (e) { return e.eval(context); });\r\n            extendList = extendList && extendList.map(function (extend) { return extend.eval(context); });\r\n            return this.createDerived(elements, extendList, evaldCondition);\r\n        },\r\n        genCSS: function (context, output) {\r\n            var i, element;\r\n            if ((!context || !context.firstSelector) && this.elements[0].combinator.value === '') {\r\n                output.add(' ', this.fileInfo(), this.getIndex());\r\n            }\r\n            for (i = 0; i < this.elements.length; i++) {\r\n                element = this.elements[i];\r\n                element.genCSS(context, output);\r\n            }\r\n        },\r\n        getIsOutput: function () {\r\n            return this.evaldCondition;\r\n        }\r\n    });\n\n    var Value = function (value) {\r\n        if (!value) {\r\n            throw new Error('Value requires an array argument');\r\n        }\r\n        if (!Array.isArray(value)) {\r\n            this.value = [value];\r\n        }\r\n        else {\r\n            this.value = value;\r\n        }\r\n    };\r\n    Value.prototype = Object.assign(new Node(), {\r\n        type: 'Value',\r\n        accept: function (visitor) {\r\n            if (this.value) {\r\n                this.value = visitor.visitArray(this.value);\r\n            }\r\n        },\r\n        eval: function (context) {\r\n            if (this.value.length === 1) {\r\n                return this.value[0].eval(context);\r\n            }\r\n            else {\r\n                return new Value(this.value.map(function (v) {\r\n                    return v.eval(context);\r\n                }));\r\n            }\r\n        },\r\n        genCSS: function (context, output) {\r\n            var i;\r\n            for (i = 0; i < this.value.length; i++) {\r\n                this.value[i].genCSS(context, output);\r\n                if (i + 1 < this.value.length) {\r\n                    output.add((context && context.compress) ? ',' : ', ');\r\n                }\r\n            }\r\n        }\r\n    });\n\n    var Keyword = function (value) {\r\n        this.value = value;\r\n    };\r\n    Keyword.prototype = Object.assign(new Node(), {\r\n        type: 'Keyword',\r\n        genCSS: function (context, output) {\r\n            if (this.value === '%') {\r\n                throw { type: 'Syntax', message: 'Invalid % without number' };\r\n            }\r\n            output.add(this.value);\r\n        }\r\n    });\r\n    Keyword.True = new Keyword('true');\r\n    Keyword.False = new Keyword('false');\n\n    var Anonymous = function (value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\r\n        this.value = value;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.mapLines = mapLines;\r\n        this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;\r\n        this.allowRoot = true;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n    };\r\n    Anonymous.prototype = Object.assign(new Node(), {\r\n        type: 'Anonymous',\r\n        eval: function () {\r\n            return new Anonymous(this.value, this._index, this._fileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\r\n        },\r\n        compare: function (other) {\r\n            return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\r\n        },\r\n        isRulesetLike: function () {\r\n            return this.rulesetLike;\r\n        },\r\n        genCSS: function (context, output) {\r\n            this.nodeVisible = Boolean(this.value);\r\n            if (this.nodeVisible) {\r\n                output.add(this.value, this._fileInfo, this._index, this.mapLines);\r\n            }\r\n        }\r\n    });\n\n    var MATH$1 = Math$1;\r\n    function evalName(context, name) {\r\n        var value = '';\r\n        var i;\r\n        var n = name.length;\r\n        var output = { add: function (s) { value += s; } };\r\n        for (i = 0; i < n; i++) {\r\n            name[i].eval(context).genCSS(context, output);\r\n        }\r\n        return value;\r\n    }\r\n    var Declaration = function (name, value, important, merge, index, currentFileInfo, inline, variable) {\r\n        this.name = name;\r\n        this.value = (value instanceof Node) ? value : new Value([value ? new Anonymous(value) : null]);\r\n        this.important = important ? \" \" + important.trim() : '';\r\n        this.merge = merge;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.inline = inline || false;\r\n        this.variable = (variable !== undefined) ? variable\r\n            : (name.charAt && (name.charAt(0) === '@'));\r\n        this.allowRoot = true;\r\n        this.setParent(this.value, this);\r\n    };\r\n    Declaration.prototype = Object.assign(new Node(), {\r\n        type: 'Declaration',\r\n        genCSS: function (context, output) {\r\n            output.add(this.name + (context.compress ? ':' : ': '), this.fileInfo(), this.getIndex());\r\n            try {\r\n                this.value.genCSS(context, output);\r\n            }\r\n            catch (e) {\r\n                e.index = this._index;\r\n                e.filename = this._fileInfo.filename;\r\n                throw e;\r\n            }\r\n            output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? '' : ';'), this._fileInfo, this._index);\r\n        },\r\n        eval: function (context) {\r\n            var mathBypass = false, prevMath, name = this.name, evaldValue, variable = this.variable;\r\n            if (typeof name !== 'string') {\r\n                // expand 'primitive' name directly to get\r\n                // things faster (~10% for benchmark.less):\r\n                name = (name.length === 1) && (name[0] instanceof Keyword) ?\r\n                    name[0].value : evalName(context, name);\r\n                variable = false; // never treat expanded interpolation as new variable name\r\n            }\r\n            // @todo remove when parens-division is default\r\n            if (name === 'font' && context.math === MATH$1.ALWAYS) {\r\n                mathBypass = true;\r\n                prevMath = context.math;\r\n                context.math = MATH$1.PARENS_DIVISION;\r\n            }\r\n            try {\r\n                context.importantScope.push({});\r\n                evaldValue = this.value.eval(context);\r\n                if (!this.variable && evaldValue.type === 'DetachedRuleset') {\r\n                    throw { message: 'Rulesets cannot be evaluated on a property.',\r\n                        index: this.getIndex(), filename: this.fileInfo().filename };\r\n                }\r\n                var important = this.important;\r\n                var importantResult = context.importantScope.pop();\r\n                if (!important && importantResult.important) {\r\n                    important = importantResult.important;\r\n                }\r\n                return new Declaration(name, evaldValue, important, this.merge, this.getIndex(), this.fileInfo(), this.inline, variable);\r\n            }\r\n            catch (e) {\r\n                if (typeof e.index !== 'number') {\r\n                    e.index = this.getIndex();\r\n                    e.filename = this.fileInfo().filename;\r\n                }\r\n                throw e;\r\n            }\r\n            finally {\r\n                if (mathBypass) {\r\n                    context.math = prevMath;\r\n                }\r\n            }\r\n        },\r\n        makeImportant: function () {\r\n            return new Declaration(this.name, this.value, '!important', this.merge, this.getIndex(), this.fileInfo(), this.inline);\r\n        }\r\n    });\n\n    function asComment(ctx) {\r\n        return \"/* line \" + ctx.debugInfo.lineNumber + \", \" + ctx.debugInfo.fileName + \" */\\n\";\r\n    }\r\n    function asMediaQuery(ctx) {\r\n        var filenameWithProtocol = ctx.debugInfo.fileName;\r\n        if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\r\n            filenameWithProtocol = \"file://\" + filenameWithProtocol;\r\n        }\r\n        return \"@media -sass-debug-info{filename{font-family:\" + filenameWithProtocol.replace(/([.:\\/\\\\])/g, function (a) {\r\n            if (a == '\\\\') {\r\n                a = '\\/';\r\n            }\r\n            return \"\\\\\" + a;\r\n        }) + \"}line{font-family:\\\\00003\" + ctx.debugInfo.lineNumber + \"}}\\n\";\r\n    }\r\n    function debugInfo(context, ctx, lineSeparator) {\r\n        var result = '';\r\n        if (context.dumpLineNumbers && !context.compress) {\r\n            switch (context.dumpLineNumbers) {\r\n                case 'comments':\r\n                    result = asComment(ctx);\r\n                    break;\r\n                case 'mediaquery':\r\n                    result = asMediaQuery(ctx);\r\n                    break;\r\n                case 'all':\r\n                    result = asComment(ctx) + (lineSeparator || '') + asMediaQuery(ctx);\r\n                    break;\r\n            }\r\n        }\r\n        return result;\r\n    }\n\n    var Comment = function (value, isLineComment, index, currentFileInfo) {\r\n        this.value = value;\r\n        this.isLineComment = isLineComment;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.allowRoot = true;\r\n    };\r\n    Comment.prototype = Object.assign(new Node(), {\r\n        type: 'Comment',\r\n        genCSS: function (context, output) {\r\n            if (this.debugInfo) {\r\n                output.add(debugInfo(context, this), this.fileInfo(), this.getIndex());\r\n            }\r\n            output.add(this.value);\r\n        },\r\n        isSilent: function (context) {\r\n            var isCompressed = context.compress && this.value[2] !== '!';\r\n            return this.isLineComment || isCompressed;\r\n        }\r\n    });\n\n    var contexts = {};\r\n    var copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\r\n        if (!original) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < propertiesToCopy.length; i++) {\r\n            if (original.hasOwnProperty(propertiesToCopy[i])) {\r\n                destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];\r\n            }\r\n        }\r\n    };\r\n    /*\r\n     parse is used whilst parsing\r\n     */\r\n    var parseCopyProperties = [\r\n        // options\r\n        'paths',\r\n        'rewriteUrls',\r\n        'rootpath',\r\n        'strictImports',\r\n        'insecure',\r\n        'dumpLineNumbers',\r\n        'compress',\r\n        'syncImport',\r\n        'chunkInput',\r\n        'mime',\r\n        'useFileCache',\r\n        // context\r\n        'processImports',\r\n        // Used by the import manager to stop multiple import visitors being created.\r\n        'pluginManager' // Used as the plugin manager for the session\r\n    ];\r\n    contexts.Parse = function (options) {\r\n        copyFromOriginal(options, this, parseCopyProperties);\r\n        if (typeof this.paths === 'string') {\r\n            this.paths = [this.paths];\r\n        }\r\n    };\r\n    var evalCopyProperties = [\r\n        'paths',\r\n        'compress',\r\n        'math',\r\n        'strictUnits',\r\n        'sourceMap',\r\n        'importMultiple',\r\n        'urlArgs',\r\n        'javascriptEnabled',\r\n        'pluginManager',\r\n        'importantScope',\r\n        'rewriteUrls' // option - whether to adjust URL's to be relative\r\n    ];\r\n    contexts.Eval = function (options, frames) {\r\n        copyFromOriginal(options, this, evalCopyProperties);\r\n        if (typeof this.paths === 'string') {\r\n            this.paths = [this.paths];\r\n        }\r\n        this.frames = frames || [];\r\n        this.importantScope = this.importantScope || [];\r\n    };\r\n    contexts.Eval.prototype.enterCalc = function () {\r\n        if (!this.calcStack) {\r\n            this.calcStack = [];\r\n        }\r\n        this.calcStack.push(true);\r\n        this.inCalc = true;\r\n    };\r\n    contexts.Eval.prototype.exitCalc = function () {\r\n        this.calcStack.pop();\r\n        if (!this.calcStack.length) {\r\n            this.inCalc = false;\r\n        }\r\n    };\r\n    contexts.Eval.prototype.inParenthesis = function () {\r\n        if (!this.parensStack) {\r\n            this.parensStack = [];\r\n        }\r\n        this.parensStack.push(true);\r\n    };\r\n    contexts.Eval.prototype.outOfParenthesis = function () {\r\n        this.parensStack.pop();\r\n    };\r\n    contexts.Eval.prototype.inCalc = false;\r\n    contexts.Eval.prototype.mathOn = true;\r\n    contexts.Eval.prototype.isMathOn = function (op) {\r\n        if (!this.mathOn) {\r\n            return false;\r\n        }\r\n        if (op === '/' && this.math !== Math$1.ALWAYS && (!this.parensStack || !this.parensStack.length)) {\r\n            return false;\r\n        }\r\n        if (this.math > Math$1.PARENS_DIVISION) {\r\n            return this.parensStack && this.parensStack.length;\r\n        }\r\n        return true;\r\n    };\r\n    contexts.Eval.prototype.pathRequiresRewrite = function (path) {\r\n        var isRelative = this.rewriteUrls === RewriteUrls.LOCAL ? isPathLocalRelative : isPathRelative;\r\n        return isRelative(path);\r\n    };\r\n    contexts.Eval.prototype.rewritePath = function (path, rootpath) {\r\n        var newPath;\r\n        rootpath = rootpath || '';\r\n        newPath = this.normalizePath(rootpath + path);\r\n        // If a path was explicit relative and the rootpath was not an absolute path\r\n        // we must ensure that the new path is also explicit relative.\r\n        if (isPathLocalRelative(path) &&\r\n            isPathRelative(rootpath) &&\r\n            isPathLocalRelative(newPath) === false) {\r\n            newPath = \"./\" + newPath;\r\n        }\r\n        return newPath;\r\n    };\r\n    contexts.Eval.prototype.normalizePath = function (path) {\r\n        var segments = path.split('/').reverse();\r\n        var segment;\r\n        path = [];\r\n        while (segments.length !== 0) {\r\n            segment = segments.pop();\r\n            switch (segment) {\r\n                case '.':\r\n                    break;\r\n                case '..':\r\n                    if ((path.length === 0) || (path[path.length - 1] === '..')) {\r\n                        path.push(segment);\r\n                    }\r\n                    else {\r\n                        path.pop();\r\n                    }\r\n                    break;\r\n                default:\r\n                    path.push(segment);\r\n                    break;\r\n            }\r\n        }\r\n        return path.join('/');\r\n    };\r\n    function isPathRelative(path) {\r\n        return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\r\n    }\r\n    function isPathLocalRelative(path) {\r\n        return path.charAt(0) === '.';\r\n    }\r\n    // todo - do the same for the toCSS ?\n\n    function makeRegistry(base) {\r\n        return {\r\n            _data: {},\r\n            add: function (name, func) {\r\n                // precautionary case conversion, as later querying of\r\n                // the registry by function-caller uses lower case as well.\r\n                name = name.toLowerCase();\r\n                if (this._data.hasOwnProperty(name)) ;\r\n                this._data[name] = func;\r\n            },\r\n            addMultiple: function (functions) {\r\n                var _this = this;\r\n                Object.keys(functions).forEach(function (name) {\r\n                    _this.add(name, functions[name]);\r\n                });\r\n            },\r\n            get: function (name) {\r\n                return this._data[name] || (base && base.get(name));\r\n            },\r\n            getLocalFunctions: function () {\r\n                return this._data;\r\n            },\r\n            inherit: function () {\r\n                return makeRegistry(this);\r\n            },\r\n            create: function (base) {\r\n                return makeRegistry(base);\r\n            }\r\n        };\r\n    }\r\n    var functionRegistry = makeRegistry(null);\n\n    var defaultFunc = {\r\n        eval: function () {\r\n            var v = this.value_;\r\n            var e = this.error_;\r\n            if (e) {\r\n                throw e;\r\n            }\r\n            if (v != null) {\r\n                return v ? Keyword.True : Keyword.False;\r\n            }\r\n        },\r\n        value: function (v) {\r\n            this.value_ = v;\r\n        },\r\n        error: function (e) {\r\n            this.error_ = e;\r\n        },\r\n        reset: function () {\r\n            this.value_ = this.error_ = null;\r\n        }\r\n    };\n\n    var Ruleset = function (selectors, rules, strictImports, visibilityInfo) {\r\n        this.selectors = selectors;\r\n        this.rules = rules;\r\n        this._lookups = {};\r\n        this._variables = null;\r\n        this._properties = null;\r\n        this.strictImports = strictImports;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.allowRoot = true;\r\n        this.setParent(this.selectors, this);\r\n        this.setParent(this.rules, this);\r\n    };\r\n    Ruleset.prototype = Object.assign(new Node(), {\r\n        type: 'Ruleset',\r\n        isRuleset: true,\r\n        isRulesetLike: function () { return true; },\r\n        accept: function (visitor) {\r\n            if (this.paths) {\r\n                this.paths = visitor.visitArray(this.paths, true);\r\n            }\r\n            else if (this.selectors) {\r\n                this.selectors = visitor.visitArray(this.selectors);\r\n            }\r\n            if (this.rules && this.rules.length) {\r\n                this.rules = visitor.visitArray(this.rules);\r\n            }\r\n        },\r\n        eval: function (context) {\r\n            var selectors;\r\n            var selCnt;\r\n            var selector;\r\n            var i;\r\n            var hasVariable;\r\n            var hasOnePassingSelector = false;\r\n            if (this.selectors && (selCnt = this.selectors.length)) {\r\n                selectors = new Array(selCnt);\r\n                defaultFunc.error({\r\n                    type: 'Syntax',\r\n                    message: 'it is currently only allowed in parametric mixin guards,'\r\n                });\r\n                for (i = 0; i < selCnt; i++) {\r\n                    selector = this.selectors[i].eval(context);\r\n                    for (var j = 0; j < selector.elements.length; j++) {\r\n                        if (selector.elements[j].isVariable) {\r\n                            hasVariable = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    selectors[i] = selector;\r\n                    if (selector.evaldCondition) {\r\n                        hasOnePassingSelector = true;\r\n                    }\r\n                }\r\n                if (hasVariable) {\r\n                    var toParseSelectors = new Array(selCnt);\r\n                    for (i = 0; i < selCnt; i++) {\r\n                        selector = selectors[i];\r\n                        toParseSelectors[i] = selector.toCSS(context);\r\n                    }\r\n                    this.parse.parseNode(toParseSelectors.join(','), [\"selectors\"], selectors[0].getIndex(), selectors[0].fileInfo(), function (err, result) {\r\n                        if (result) {\r\n                            selectors = flattenArray(result);\r\n                        }\r\n                    });\r\n                }\r\n                defaultFunc.reset();\r\n            }\r\n            else {\r\n                hasOnePassingSelector = true;\r\n            }\r\n            var rules = this.rules ? copyArray(this.rules) : null;\r\n            var ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo());\r\n            var rule;\r\n            var subRule;\r\n            ruleset.originalRuleset = this;\r\n            ruleset.root = this.root;\r\n            ruleset.firstRoot = this.firstRoot;\r\n            ruleset.allowImports = this.allowImports;\r\n            if (this.debugInfo) {\r\n                ruleset.debugInfo = this.debugInfo;\r\n            }\r\n            if (!hasOnePassingSelector) {\r\n                rules.length = 0;\r\n            }\r\n            // inherit a function registry from the frames stack when possible;\r\n            // otherwise from the global registry\r\n            ruleset.functionRegistry = (function (frames) {\r\n                var i = 0;\r\n                var n = frames.length;\r\n                var found;\r\n                for (; i !== n; ++i) {\r\n                    found = frames[i].functionRegistry;\r\n                    if (found) {\r\n                        return found;\r\n                    }\r\n                }\r\n                return functionRegistry;\r\n            }(context.frames)).inherit();\r\n            // push the current ruleset to the frames stack\r\n            var ctxFrames = context.frames;\r\n            ctxFrames.unshift(ruleset);\r\n            // currrent selectors\r\n            var ctxSelectors = context.selectors;\r\n            if (!ctxSelectors) {\r\n                context.selectors = ctxSelectors = [];\r\n            }\r\n            ctxSelectors.unshift(this.selectors);\r\n            // Evaluate imports\r\n            if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\r\n                ruleset.evalImports(context);\r\n            }\r\n            // Store the frames around mixin definitions,\r\n            // so they can be evaluated like closures when the time comes.\r\n            var rsRules = ruleset.rules;\r\n            for (i = 0; (rule = rsRules[i]); i++) {\r\n                if (rule.evalFirst) {\r\n                    rsRules[i] = rule.eval(context);\r\n                }\r\n            }\r\n            var mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;\r\n            // Evaluate mixin calls.\r\n            for (i = 0; (rule = rsRules[i]); i++) {\r\n                if (rule.type === 'MixinCall') {\r\n                    /* jshint loopfunc:true */\r\n                    rules = rule.eval(context).filter(function (r) {\r\n                        if ((r instanceof Declaration) && r.variable) {\r\n                            // do not pollute the scope if the variable is\r\n                            // already there. consider returning false here\r\n                            // but we need a way to \"return\" variable from mixins\r\n                            return !(ruleset.variable(r.name));\r\n                        }\r\n                        return true;\r\n                    });\r\n                    rsRules.splice.apply(rsRules, [i, 1].concat(rules));\r\n                    i += rules.length - 1;\r\n                    ruleset.resetCache();\r\n                }\r\n                else if (rule.type === 'VariableCall') {\r\n                    /* jshint loopfunc:true */\r\n                    rules = rule.eval(context).rules.filter(function (r) {\r\n                        if ((r instanceof Declaration) && r.variable) {\r\n                            // do not pollute the scope at all\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    rsRules.splice.apply(rsRules, [i, 1].concat(rules));\r\n                    i += rules.length - 1;\r\n                    ruleset.resetCache();\r\n                }\r\n            }\r\n            // Evaluate everything else\r\n            for (i = 0; (rule = rsRules[i]); i++) {\r\n                if (!rule.evalFirst) {\r\n                    rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\r\n                }\r\n            }\r\n            // Evaluate everything else\r\n            for (i = 0; (rule = rsRules[i]); i++) {\r\n                // for rulesets, check if it is a css guard and can be removed\r\n                if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\r\n                    // check if it can be folded in (e.g. & where)\r\n                    if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\r\n                        rsRules.splice(i--, 1);\r\n                        for (var j = 0; (subRule = rule.rules[j]); j++) {\r\n                            if (subRule instanceof Node) {\r\n                                subRule.copyVisibilityInfo(rule.visibilityInfo());\r\n                                if (!(subRule instanceof Declaration) || !subRule.variable) {\r\n                                    rsRules.splice(++i, 0, subRule);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Pop the stack\r\n            ctxFrames.shift();\r\n            ctxSelectors.shift();\r\n            if (context.mediaBlocks) {\r\n                for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\r\n                    context.mediaBlocks[i].bubbleSelectors(selectors);\r\n                }\r\n            }\r\n            return ruleset;\r\n        },\r\n        evalImports: function (context) {\r\n            var rules = this.rules;\r\n            var i;\r\n            var importRules;\r\n            if (!rules) {\r\n                return;\r\n            }\r\n            for (i = 0; i < rules.length; i++) {\r\n                if (rules[i].type === 'Import') {\r\n                    importRules = rules[i].eval(context);\r\n                    if (importRules && (importRules.length || importRules.length === 0)) {\r\n                        rules.splice.apply(rules, [i, 1].concat(importRules));\r\n                        i += importRules.length - 1;\r\n                    }\r\n                    else {\r\n                        rules.splice(i, 1, importRules);\r\n                    }\r\n                    this.resetCache();\r\n                }\r\n            }\r\n        },\r\n        makeImportant: function () {\r\n            var result = new Ruleset(this.selectors, this.rules.map(function (r) {\r\n                if (r.makeImportant) {\r\n                    return r.makeImportant();\r\n                }\r\n                else {\r\n                    return r;\r\n                }\r\n            }), this.strictImports, this.visibilityInfo());\r\n            return result;\r\n        },\r\n        matchArgs: function (args) {\r\n            return !args || args.length === 0;\r\n        },\r\n        // lets you call a css selector with a guard\r\n        matchCondition: function (args, context) {\r\n            var lastSelector = this.selectors[this.selectors.length - 1];\r\n            if (!lastSelector.evaldCondition) {\r\n                return false;\r\n            }\r\n            if (lastSelector.condition &&\r\n                !lastSelector.condition.eval(new contexts.Eval(context, context.frames))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        resetCache: function () {\r\n            this._rulesets = null;\r\n            this._variables = null;\r\n            this._properties = null;\r\n            this._lookups = {};\r\n        },\r\n        variables: function () {\r\n            if (!this._variables) {\r\n                this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {\r\n                    if (r instanceof Declaration && r.variable === true) {\r\n                        hash[r.name] = r;\r\n                    }\r\n                    // when evaluating variables in an import statement, imports have not been eval'd\r\n                    // so we need to go inside import statements.\r\n                    // guard against root being a string (in the case of inlined less)\r\n                    if (r.type === 'Import' && r.root && r.root.variables) {\r\n                        var vars = r.root.variables();\r\n                        for (var name_1 in vars) {\r\n                            if (vars.hasOwnProperty(name_1)) {\r\n                                hash[name_1] = r.root.variable(name_1);\r\n                            }\r\n                        }\r\n                    }\r\n                    return hash;\r\n                }, {});\r\n            }\r\n            return this._variables;\r\n        },\r\n        properties: function () {\r\n            if (!this._properties) {\r\n                this._properties = !this.rules ? {} : this.rules.reduce(function (hash, r) {\r\n                    if (r instanceof Declaration && r.variable !== true) {\r\n                        var name_2 = (r.name.length === 1) && (r.name[0] instanceof Keyword) ?\r\n                            r.name[0].value : r.name;\r\n                        // Properties don't overwrite as they can merge\r\n                        if (!hash[\"$\" + name_2]) {\r\n                            hash[\"$\" + name_2] = [r];\r\n                        }\r\n                        else {\r\n                            hash[\"$\" + name_2].push(r);\r\n                        }\r\n                    }\r\n                    return hash;\r\n                }, {});\r\n            }\r\n            return this._properties;\r\n        },\r\n        variable: function (name) {\r\n            var decl = this.variables()[name];\r\n            if (decl) {\r\n                return this.parseValue(decl);\r\n            }\r\n        },\r\n        property: function (name) {\r\n            var decl = this.properties()[name];\r\n            if (decl) {\r\n                return this.parseValue(decl);\r\n            }\r\n        },\r\n        lastDeclaration: function () {\r\n            for (var i = this.rules.length; i > 0; i--) {\r\n                var decl = this.rules[i - 1];\r\n                if (decl instanceof Declaration) {\r\n                    return this.parseValue(decl);\r\n                }\r\n            }\r\n        },\r\n        parseValue: function (toParse) {\r\n            var self = this;\r\n            function transformDeclaration(decl) {\r\n                if (decl.value instanceof Anonymous && !decl.parsed) {\r\n                    if (typeof decl.value.value === 'string') {\r\n                        this.parse.parseNode(decl.value.value, ['value', 'important'], decl.value.getIndex(), decl.fileInfo(), function (err, result) {\r\n                            if (err) {\r\n                                decl.parsed = true;\r\n                            }\r\n                            if (result) {\r\n                                decl.value = result[0];\r\n                                decl.important = result[1] || '';\r\n                                decl.parsed = true;\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        decl.parsed = true;\r\n                    }\r\n                    return decl;\r\n                }\r\n                else {\r\n                    return decl;\r\n                }\r\n            }\r\n            if (!Array.isArray(toParse)) {\r\n                return transformDeclaration.call(self, toParse);\r\n            }\r\n            else {\r\n                var nodes_1 = [];\r\n                toParse.forEach(function (n) {\r\n                    nodes_1.push(transformDeclaration.call(self, n));\r\n                });\r\n                return nodes_1;\r\n            }\r\n        },\r\n        rulesets: function () {\r\n            if (!this.rules) {\r\n                return [];\r\n            }\r\n            var filtRules = [];\r\n            var rules = this.rules;\r\n            var i;\r\n            var rule;\r\n            for (i = 0; (rule = rules[i]); i++) {\r\n                if (rule.isRuleset) {\r\n                    filtRules.push(rule);\r\n                }\r\n            }\r\n            return filtRules;\r\n        },\r\n        prependRule: function (rule) {\r\n            var rules = this.rules;\r\n            if (rules) {\r\n                rules.unshift(rule);\r\n            }\r\n            else {\r\n                this.rules = [rule];\r\n            }\r\n            this.setParent(rule, this);\r\n        },\r\n        find: function (selector, self, filter) {\r\n            self = self || this;\r\n            var rules = [];\r\n            var match;\r\n            var foundMixins;\r\n            var key = selector.toCSS();\r\n            if (key in this._lookups) {\r\n                return this._lookups[key];\r\n            }\r\n            this.rulesets().forEach(function (rule) {\r\n                if (rule !== self) {\r\n                    for (var j = 0; j < rule.selectors.length; j++) {\r\n                        match = selector.match(rule.selectors[j]);\r\n                        if (match) {\r\n                            if (selector.elements.length > match) {\r\n                                if (!filter || filter(rule)) {\r\n                                    foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\r\n                                    for (var i = 0; i < foundMixins.length; ++i) {\r\n                                        foundMixins[i].path.push(rule);\r\n                                    }\r\n                                    Array.prototype.push.apply(rules, foundMixins);\r\n                                }\r\n                            }\r\n                            else {\r\n                                rules.push({ rule: rule, path: [] });\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            this._lookups[key] = rules;\r\n            return rules;\r\n        },\r\n        genCSS: function (context, output) {\r\n            var i;\r\n            var j;\r\n            var charsetRuleNodes = [];\r\n            var ruleNodes = [];\r\n            var // Line number debugging\r\n            debugInfo$1;\r\n            var rule;\r\n            var path;\r\n            context.tabLevel = (context.tabLevel || 0);\r\n            if (!this.root) {\r\n                context.tabLevel++;\r\n            }\r\n            var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  ');\r\n            var tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  ');\r\n            var sep;\r\n            var charsetNodeIndex = 0;\r\n            var importNodeIndex = 0;\r\n            for (i = 0; (rule = this.rules[i]); i++) {\r\n                if (rule instanceof Comment) {\r\n                    if (importNodeIndex === i) {\r\n                        importNodeIndex++;\r\n                    }\r\n                    ruleNodes.push(rule);\r\n                }\r\n                else if (rule.isCharset && rule.isCharset()) {\r\n                    ruleNodes.splice(charsetNodeIndex, 0, rule);\r\n                    charsetNodeIndex++;\r\n                    importNodeIndex++;\r\n                }\r\n                else if (rule.type === 'Import') {\r\n                    ruleNodes.splice(importNodeIndex, 0, rule);\r\n                    importNodeIndex++;\r\n                }\r\n                else {\r\n                    ruleNodes.push(rule);\r\n                }\r\n            }\r\n            ruleNodes = charsetRuleNodes.concat(ruleNodes);\r\n            // If this is the root node, we don't render\r\n            // a selector, or {}.\r\n            if (!this.root) {\r\n                debugInfo$1 = debugInfo(context, this, tabSetStr);\r\n                if (debugInfo$1) {\r\n                    output.add(debugInfo$1);\r\n                    output.add(tabSetStr);\r\n                }\r\n                var paths = this.paths;\r\n                var pathCnt = paths.length;\r\n                var pathSubCnt = void 0;\r\n                sep = context.compress ? ',' : (\",\\n\" + tabSetStr);\r\n                for (i = 0; i < pathCnt; i++) {\r\n                    path = paths[i];\r\n                    if (!(pathSubCnt = path.length)) {\r\n                        continue;\r\n                    }\r\n                    if (i > 0) {\r\n                        output.add(sep);\r\n                    }\r\n                    context.firstSelector = true;\r\n                    path[0].genCSS(context, output);\r\n                    context.firstSelector = false;\r\n                    for (j = 1; j < pathSubCnt; j++) {\r\n                        path[j].genCSS(context, output);\r\n                    }\r\n                }\r\n                output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\r\n            }\r\n            // Compile rules and rulesets\r\n            for (i = 0; (rule = ruleNodes[i]); i++) {\r\n                if (i + 1 === ruleNodes.length) {\r\n                    context.lastRule = true;\r\n                }\r\n                var currentLastRule = context.lastRule;\r\n                if (rule.isRulesetLike(rule)) {\r\n                    context.lastRule = false;\r\n                }\r\n                if (rule.genCSS) {\r\n                    rule.genCSS(context, output);\r\n                }\r\n                else if (rule.value) {\r\n                    output.add(rule.value.toString());\r\n                }\r\n                context.lastRule = currentLastRule;\r\n                if (!context.lastRule && rule.isVisible()) {\r\n                    output.add(context.compress ? '' : (\"\\n\" + tabRuleStr));\r\n                }\r\n                else {\r\n                    context.lastRule = false;\r\n                }\r\n            }\r\n            if (!this.root) {\r\n                output.add((context.compress ? '}' : \"\\n\" + tabSetStr + \"}\"));\r\n                context.tabLevel--;\r\n            }\r\n            if (!output.isEmpty() && !context.compress && this.firstRoot) {\r\n                output.add('\\n');\r\n            }\r\n        },\r\n        joinSelectors: function (paths, context, selectors) {\r\n            for (var s = 0; s < selectors.length; s++) {\r\n                this.joinSelector(paths, context, selectors[s]);\r\n            }\r\n        },\r\n        joinSelector: function (paths, context, selector) {\r\n            function createParenthesis(elementsToPak, originalElement) {\r\n                var replacementParen, j;\r\n                if (elementsToPak.length === 0) {\r\n                    replacementParen = new Paren(elementsToPak[0]);\r\n                }\r\n                else {\r\n                    var insideParent = new Array(elementsToPak.length);\r\n                    for (j = 0; j < elementsToPak.length; j++) {\r\n                        insideParent[j] = new Element(null, elementsToPak[j], originalElement.isVariable, originalElement._index, originalElement._fileInfo);\r\n                    }\r\n                    replacementParen = new Paren(new Selector(insideParent));\r\n                }\r\n                return replacementParen;\r\n            }\r\n            function createSelector(containedElement, originalElement) {\r\n                var element, selector;\r\n                element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\r\n                selector = new Selector([element]);\r\n                return selector;\r\n            }\r\n            // joins selector path from `beginningPath` with selector path in `addPath`\r\n            // `replacedElement` contains element that is being replaced by `addPath`\r\n            // returns concatenated path\r\n            function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\r\n                var newSelectorPath, lastSelector, newJoinedSelector;\r\n                // our new selector path\r\n                newSelectorPath = [];\r\n                // construct the joined selector - if & is the first thing this will be empty,\r\n                // if not newJoinedSelector will be the last set of elements in the selector\r\n                if (beginningPath.length > 0) {\r\n                    newSelectorPath = copyArray(beginningPath);\r\n                    lastSelector = newSelectorPath.pop();\r\n                    newJoinedSelector = originalSelector.createDerived(copyArray(lastSelector.elements));\r\n                }\r\n                else {\r\n                    newJoinedSelector = originalSelector.createDerived([]);\r\n                }\r\n                if (addPath.length > 0) {\r\n                    // /deep/ is a CSS4 selector - (removed, so should deprecate)\r\n                    // that is valid without anything in front of it\r\n                    // so if the & does not have a combinator that is \"\" or \" \" then\r\n                    // and there is a combinator on the parent, then grab that.\r\n                    // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\r\n                    var combinator = replacedElement.combinator;\r\n                    var parentEl = addPath[0].elements[0];\r\n                    if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\r\n                        combinator = parentEl.combinator;\r\n                    }\r\n                    // join the elements so far with the first part of the parent\r\n                    newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.isVariable, replacedElement._index, replacedElement._fileInfo));\r\n                    newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\r\n                }\r\n                // now add the joined selector - but only if it is not empty\r\n                if (newJoinedSelector.elements.length !== 0) {\r\n                    newSelectorPath.push(newJoinedSelector);\r\n                }\r\n                // put together the parent selectors after the join (e.g. the rest of the parent)\r\n                if (addPath.length > 1) {\r\n                    var restOfPath = addPath.slice(1);\r\n                    restOfPath = restOfPath.map(function (selector) {\r\n                        return selector.createDerived(selector.elements, []);\r\n                    });\r\n                    newSelectorPath = newSelectorPath.concat(restOfPath);\r\n                }\r\n                return newSelectorPath;\r\n            }\r\n            // joins selector path from `beginningPath` with every selector path in `addPaths` array\r\n            // `replacedElement` contains element that is being replaced by `addPath`\r\n            // returns array with all concatenated paths\r\n            function addAllReplacementsIntoPath(beginningPath, addPaths, replacedElement, originalSelector, result) {\r\n                var j;\r\n                for (j = 0; j < beginningPath.length; j++) {\r\n                    var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\r\n                    result.push(newSelectorPath);\r\n                }\r\n                return result;\r\n            }\r\n            function mergeElementsOnToSelectors(elements, selectors) {\r\n                var i, sel;\r\n                if (elements.length === 0) {\r\n                    return;\r\n                }\r\n                if (selectors.length === 0) {\r\n                    selectors.push([new Selector(elements)]);\r\n                    return;\r\n                }\r\n                for (i = 0; (sel = selectors[i]); i++) {\r\n                    // if the previous thing in sel is a parent this needs to join on to it\r\n                    if (sel.length > 0) {\r\n                        sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\r\n                    }\r\n                    else {\r\n                        sel.push(new Selector(elements));\r\n                    }\r\n                }\r\n            }\r\n            // replace all parent selectors inside `inSelector` by content of `context` array\r\n            // resulting selectors are returned inside `paths` array\r\n            // returns true if `inSelector` contained at least one parent selector\r\n            function replaceParentSelector(paths, context, inSelector) {\r\n                // The paths are [[Selector]]\r\n                // The first list is a list of comma separated selectors\r\n                // The inner list is a list of inheritance separated selectors\r\n                // e.g.\r\n                // .a, .b {\r\n                //   .c {\r\n                //   }\r\n                // }\r\n                // == [[.a] [.c]] [[.b] [.c]]\r\n                //\r\n                var i, j, k, currentElements, newSelectors, selectorsMultiplied, sel, el, hadParentSelector = false, length, lastSelector;\r\n                function findNestedSelector(element) {\r\n                    var maybeSelector;\r\n                    if (!(element.value instanceof Paren)) {\r\n                        return null;\r\n                    }\r\n                    maybeSelector = element.value.value;\r\n                    if (!(maybeSelector instanceof Selector)) {\r\n                        return null;\r\n                    }\r\n                    return maybeSelector;\r\n                }\r\n                // the elements from the current selector so far\r\n                currentElements = [];\r\n                // the current list of new selectors to add to the path.\r\n                // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\r\n                // by the parents\r\n                newSelectors = [\r\n                    []\r\n                ];\r\n                for (i = 0; (el = inSelector.elements[i]); i++) {\r\n                    // non parent reference elements just get added\r\n                    if (el.value !== '&') {\r\n                        var nestedSelector = findNestedSelector(el);\r\n                        if (nestedSelector != null) {\r\n                            // merge the current list of non parent selector elements\r\n                            // on to the current list of selectors to add\r\n                            mergeElementsOnToSelectors(currentElements, newSelectors);\r\n                            var nestedPaths = [];\r\n                            var replaced = void 0;\r\n                            var replacedNewSelectors = [];\r\n                            replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\r\n                            hadParentSelector = hadParentSelector || replaced;\r\n                            // the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\r\n                            for (k = 0; k < nestedPaths.length; k++) {\r\n                                var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\r\n                                addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\r\n                            }\r\n                            newSelectors = replacedNewSelectors;\r\n                            currentElements = [];\r\n                        }\r\n                        else {\r\n                            currentElements.push(el);\r\n                        }\r\n                    }\r\n                    else {\r\n                        hadParentSelector = true;\r\n                        // the new list of selectors to add\r\n                        selectorsMultiplied = [];\r\n                        // merge the current list of non parent selector elements\r\n                        // on to the current list of selectors to add\r\n                        mergeElementsOnToSelectors(currentElements, newSelectors);\r\n                        // loop through our current selectors\r\n                        for (j = 0; j < newSelectors.length; j++) {\r\n                            sel = newSelectors[j];\r\n                            // if we don't have any parent paths, the & might be in a mixin so that it can be used\r\n                            // whether there are parents or not\r\n                            if (context.length === 0) {\r\n                                // the combinator used on el should now be applied to the next element instead so that\r\n                                // it is not lost\r\n                                if (sel.length > 0) {\r\n                                    sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\r\n                                }\r\n                                selectorsMultiplied.push(sel);\r\n                            }\r\n                            else {\r\n                                // and the parent selectors\r\n                                for (k = 0; k < context.length; k++) {\r\n                                    // We need to put the current selectors\r\n                                    // then join the last selector's elements on to the parents selectors\r\n                                    var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\r\n                                    // add that to our new set of selectors\r\n                                    selectorsMultiplied.push(newSelectorPath);\r\n                                }\r\n                            }\r\n                        }\r\n                        // our new selectors has been multiplied, so reset the state\r\n                        newSelectors = selectorsMultiplied;\r\n                        currentElements = [];\r\n                    }\r\n                }\r\n                // if we have any elements left over (e.g. .a& .b == .b)\r\n                // add them on to all the current selectors\r\n                mergeElementsOnToSelectors(currentElements, newSelectors);\r\n                for (i = 0; i < newSelectors.length; i++) {\r\n                    length = newSelectors[i].length;\r\n                    if (length > 0) {\r\n                        paths.push(newSelectors[i]);\r\n                        lastSelector = newSelectors[i][length - 1];\r\n                        newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\r\n                    }\r\n                }\r\n                return hadParentSelector;\r\n            }\r\n            function deriveSelector(visibilityInfo, deriveFrom) {\r\n                var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\r\n                newSelector.copyVisibilityInfo(visibilityInfo);\r\n                return newSelector;\r\n            }\r\n            // joinSelector code follows\r\n            var i, newPaths, hadParentSelector;\r\n            newPaths = [];\r\n            hadParentSelector = replaceParentSelector(newPaths, context, selector);\r\n            if (!hadParentSelector) {\r\n                if (context.length > 0) {\r\n                    newPaths = [];\r\n                    for (i = 0; i < context.length; i++) {\r\n                        var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\r\n                        concatenated.push(selector);\r\n                        newPaths.push(concatenated);\r\n                    }\r\n                }\r\n                else {\r\n                    newPaths = [[selector]];\r\n                }\r\n            }\r\n            for (i = 0; i < newPaths.length; i++) {\r\n                paths.push(newPaths[i]);\r\n            }\r\n        }\r\n    });\n\n    var AtRule = function (name, value, rules, index, currentFileInfo, debugInfo, isRooted, visibilityInfo) {\r\n        var i;\r\n        this.name = name;\r\n        this.value = (value instanceof Node) ? value : (value ? new Anonymous(value) : value);\r\n        if (rules) {\r\n            if (Array.isArray(rules)) {\r\n                this.rules = rules;\r\n            }\r\n            else {\r\n                this.rules = [rules];\r\n                this.rules[0].selectors = (new Selector([], null, null, index, currentFileInfo)).createEmptySelectors();\r\n            }\r\n            for (i = 0; i < this.rules.length; i++) {\r\n                this.rules[i].allowImports = true;\r\n            }\r\n            this.setParent(this.rules, this);\r\n        }\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.debugInfo = debugInfo;\r\n        this.isRooted = isRooted || false;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.allowRoot = true;\r\n    };\r\n    AtRule.prototype = Object.assign(new Node(), {\r\n        type: 'AtRule',\r\n        accept: function (visitor) {\r\n            var value = this.value, rules = this.rules;\r\n            if (rules) {\r\n                this.rules = visitor.visitArray(rules);\r\n            }\r\n            if (value) {\r\n                this.value = visitor.visit(value);\r\n            }\r\n        },\r\n        isRulesetLike: function () {\r\n            return this.rules || !this.isCharset();\r\n        },\r\n        isCharset: function () {\r\n            return '@charset' === this.name;\r\n        },\r\n        genCSS: function (context, output) {\r\n            var value = this.value, rules = this.rules;\r\n            output.add(this.name, this.fileInfo(), this.getIndex());\r\n            if (value) {\r\n                output.add(' ');\r\n                value.genCSS(context, output);\r\n            }\r\n            if (rules) {\r\n                this.outputRuleset(context, output, rules);\r\n            }\r\n            else {\r\n                output.add(';');\r\n            }\r\n        },\r\n        eval: function (context) {\r\n            var mediaPathBackup, mediaBlocksBackup, value = this.value, rules = this.rules;\r\n            // media stored inside other atrule should not bubble over it\r\n            // backpup media bubbling information\r\n            mediaPathBackup = context.mediaPath;\r\n            mediaBlocksBackup = context.mediaBlocks;\r\n            // deleted media bubbling information\r\n            context.mediaPath = [];\r\n            context.mediaBlocks = [];\r\n            if (value) {\r\n                value = value.eval(context);\r\n            }\r\n            if (rules) {\r\n                // assuming that there is only one rule at this point - that is how parser constructs the rule\r\n                rules = [rules[0].eval(context)];\r\n                rules[0].root = true;\r\n            }\r\n            // restore media bubbling information\r\n            context.mediaPath = mediaPathBackup;\r\n            context.mediaBlocks = mediaBlocksBackup;\r\n            return new AtRule(this.name, value, rules, this.getIndex(), this.fileInfo(), this.debugInfo, this.isRooted, this.visibilityInfo());\r\n        },\r\n        variable: function (name) {\r\n            if (this.rules) {\r\n                // assuming that there is only one rule at this point - that is how parser constructs the rule\r\n                return Ruleset.prototype.variable.call(this.rules[0], name);\r\n            }\r\n        },\r\n        find: function () {\r\n            if (this.rules) {\r\n                // assuming that there is only one rule at this point - that is how parser constructs the rule\r\n                return Ruleset.prototype.find.apply(this.rules[0], arguments);\r\n            }\r\n        },\r\n        rulesets: function () {\r\n            if (this.rules) {\r\n                // assuming that there is only one rule at this point - that is how parser constructs the rule\r\n                return Ruleset.prototype.rulesets.apply(this.rules[0]);\r\n            }\r\n        },\r\n        outputRuleset: function (context, output, rules) {\r\n            var ruleCnt = rules.length;\r\n            var i;\r\n            context.tabLevel = (context.tabLevel | 0) + 1;\r\n            // Compressed\r\n            if (context.compress) {\r\n                output.add('{');\r\n                for (i = 0; i < ruleCnt; i++) {\r\n                    rules[i].genCSS(context, output);\r\n                }\r\n                output.add('}');\r\n                context.tabLevel--;\r\n                return;\r\n            }\r\n            // Non-compressed\r\n            var tabSetStr = \"\\n\" + Array(context.tabLevel).join('  '), tabRuleStr = tabSetStr + \"  \";\r\n            if (!ruleCnt) {\r\n                output.add(\" {\" + tabSetStr + \"}\");\r\n            }\r\n            else {\r\n                output.add(\" {\" + tabRuleStr);\r\n                rules[0].genCSS(context, output);\r\n                for (i = 1; i < ruleCnt; i++) {\r\n                    output.add(tabRuleStr);\r\n                    rules[i].genCSS(context, output);\r\n                }\r\n                output.add(tabSetStr + \"}\");\r\n            }\r\n            context.tabLevel--;\r\n        }\r\n    });\n\n    var DetachedRuleset = function (ruleset, frames) {\r\n        this.ruleset = ruleset;\r\n        this.frames = frames;\r\n        this.setParent(this.ruleset, this);\r\n    };\r\n    DetachedRuleset.prototype = Object.assign(new Node(), {\r\n        type: 'DetachedRuleset',\r\n        evalFirst: true,\r\n        accept: function (visitor) {\r\n            this.ruleset = visitor.visit(this.ruleset);\r\n        },\r\n        eval: function (context) {\r\n            var frames = this.frames || copyArray(context.frames);\r\n            return new DetachedRuleset(this.ruleset, frames);\r\n        },\r\n        callEval: function (context) {\r\n            return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);\r\n        }\r\n    });\n\n    var Unit = function (numerator, denominator, backupUnit) {\r\n        this.numerator = numerator ? copyArray(numerator).sort() : [];\r\n        this.denominator = denominator ? copyArray(denominator).sort() : [];\r\n        if (backupUnit) {\r\n            this.backupUnit = backupUnit;\r\n        }\r\n        else if (numerator && numerator.length) {\r\n            this.backupUnit = numerator[0];\r\n        }\r\n    };\r\n    Unit.prototype = Object.assign(new Node(), {\r\n        type: 'Unit',\r\n        clone: function () {\r\n            return new Unit(copyArray(this.numerator), copyArray(this.denominator), this.backupUnit);\r\n        },\r\n        genCSS: function (context, output) {\r\n            // Dimension checks the unit is singular and throws an error if in strict math mode.\r\n            var strictUnits = context && context.strictUnits;\r\n            if (this.numerator.length === 1) {\r\n                output.add(this.numerator[0]); // the ideal situation\r\n            }\r\n            else if (!strictUnits && this.backupUnit) {\r\n                output.add(this.backupUnit);\r\n            }\r\n            else if (!strictUnits && this.denominator.length) {\r\n                output.add(this.denominator[0]);\r\n            }\r\n        },\r\n        toString: function () {\r\n            var i, returnStr = this.numerator.join('*');\r\n            for (i = 0; i < this.denominator.length; i++) {\r\n                returnStr += \"/\" + this.denominator[i];\r\n            }\r\n            return returnStr;\r\n        },\r\n        compare: function (other) {\r\n            return this.is(other.toString()) ? 0 : undefined;\r\n        },\r\n        is: function (unitString) {\r\n            return this.toString().toUpperCase() === unitString.toUpperCase();\r\n        },\r\n        isLength: function () {\r\n            return RegExp('^(px|em|ex|ch|rem|in|cm|mm|pc|pt|ex|vw|vh|vmin|vmax)$', 'gi').test(this.toCSS());\r\n        },\r\n        isEmpty: function () {\r\n            return this.numerator.length === 0 && this.denominator.length === 0;\r\n        },\r\n        isSingular: function () {\r\n            return this.numerator.length <= 1 && this.denominator.length === 0;\r\n        },\r\n        map: function (callback) {\r\n            var i;\r\n            for (i = 0; i < this.numerator.length; i++) {\r\n                this.numerator[i] = callback(this.numerator[i], false);\r\n            }\r\n            for (i = 0; i < this.denominator.length; i++) {\r\n                this.denominator[i] = callback(this.denominator[i], true);\r\n            }\r\n        },\r\n        usedUnits: function () {\r\n            var group;\r\n            var result = {};\r\n            var mapUnit;\r\n            var groupName;\r\n            mapUnit = function (atomicUnit) {\r\n                /* jshint loopfunc:true */\r\n                if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\r\n                    result[groupName] = atomicUnit;\r\n                }\r\n                return atomicUnit;\r\n            };\r\n            for (groupName in unitConversions) {\r\n                if (unitConversions.hasOwnProperty(groupName)) {\r\n                    group = unitConversions[groupName];\r\n                    this.map(mapUnit);\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        cancel: function () {\r\n            var counter = {};\r\n            var atomicUnit;\r\n            var i;\r\n            for (i = 0; i < this.numerator.length; i++) {\r\n                atomicUnit = this.numerator[i];\r\n                counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\r\n            }\r\n            for (i = 0; i < this.denominator.length; i++) {\r\n                atomicUnit = this.denominator[i];\r\n                counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\r\n            }\r\n            this.numerator = [];\r\n            this.denominator = [];\r\n            for (atomicUnit in counter) {\r\n                if (counter.hasOwnProperty(atomicUnit)) {\r\n                    var count = counter[atomicUnit];\r\n                    if (count > 0) {\r\n                        for (i = 0; i < count; i++) {\r\n                            this.numerator.push(atomicUnit);\r\n                        }\r\n                    }\r\n                    else if (count < 0) {\r\n                        for (i = 0; i < -count; i++) {\r\n                            this.denominator.push(atomicUnit);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.numerator.sort();\r\n            this.denominator.sort();\r\n        }\r\n    });\n\n    //\r\n    // A number with a unit\r\n    //\r\n    var Dimension = function (value, unit) {\r\n        this.value = parseFloat(value);\r\n        if (isNaN(this.value)) {\r\n            throw new Error('Dimension is not a number.');\r\n        }\r\n        this.unit = (unit && unit instanceof Unit) ? unit :\r\n            new Unit(unit ? [unit] : undefined);\r\n        this.setParent(this.unit, this);\r\n    };\r\n    Dimension.prototype = Object.assign(new Node(), {\r\n        type: 'Dimension',\r\n        accept: function (visitor) {\r\n            this.unit = visitor.visit(this.unit);\r\n        },\r\n        eval: function (context) {\r\n            return this;\r\n        },\r\n        toColor: function () {\r\n            return new Color([this.value, this.value, this.value]);\r\n        },\r\n        genCSS: function (context, output) {\r\n            if ((context && context.strictUnits) && !this.unit.isSingular()) {\r\n                throw new Error(\"Multiple units in dimension. Correct the units or use the unit function. Bad unit: \" + this.unit.toString());\r\n            }\r\n            var value = this.fround(context, this.value);\r\n            var strValue = String(value);\r\n            if (value !== 0 && value < 0.000001 && value > -0.000001) {\r\n                // would be output 1e-6 etc.\r\n                strValue = value.toFixed(20).replace(/0+$/, '');\r\n            }\r\n            if (context && context.compress) {\r\n                // Zero values doesn't need a unit\r\n                if (value === 0 && this.unit.isLength()) {\r\n                    output.add(strValue);\r\n                    return;\r\n                }\r\n                // Float values doesn't need a leading zero\r\n                if (value > 0 && value < 1) {\r\n                    strValue = (strValue).substr(1);\r\n                }\r\n            }\r\n            output.add(strValue);\r\n            this.unit.genCSS(context, output);\r\n        },\r\n        // In an operation between two Dimensions,\r\n        // we default to the first Dimension's unit,\r\n        // so `1px + 2` will yield `3px`.\r\n        operate: function (context, op, other) {\r\n            /* jshint noempty:false */\r\n            var value = this._operate(context, op, this.value, other.value);\r\n            var unit = this.unit.clone();\r\n            if (op === '+' || op === '-') {\r\n                if (unit.numerator.length === 0 && unit.denominator.length === 0) {\r\n                    unit = other.unit.clone();\r\n                    if (this.unit.backupUnit) {\r\n                        unit.backupUnit = this.unit.backupUnit;\r\n                    }\r\n                }\r\n                else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) ;\r\n                else {\r\n                    other = other.convertTo(this.unit.usedUnits());\r\n                    if (context.strictUnits && other.unit.toString() !== unit.toString()) {\r\n                        throw new Error(\"Incompatible units. Change the units or use the unit function. \"\r\n                            + (\"Bad units: '\" + unit.toString() + \"' and '\" + other.unit.toString() + \"'.\"));\r\n                    }\r\n                    value = this._operate(context, op, this.value, other.value);\r\n                }\r\n            }\r\n            else if (op === '*') {\r\n                unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\r\n                unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\r\n                unit.cancel();\r\n            }\r\n            else if (op === '/') {\r\n                unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\r\n                unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\r\n                unit.cancel();\r\n            }\r\n            return new Dimension(value, unit);\r\n        },\r\n        compare: function (other) {\r\n            var a, b;\r\n            if (!(other instanceof Dimension)) {\r\n                return undefined;\r\n            }\r\n            if (this.unit.isEmpty() || other.unit.isEmpty()) {\r\n                a = this;\r\n                b = other;\r\n            }\r\n            else {\r\n                a = this.unify();\r\n                b = other.unify();\r\n                if (a.unit.compare(b.unit) !== 0) {\r\n                    return undefined;\r\n                }\r\n            }\r\n            return Node.numericCompare(a.value, b.value);\r\n        },\r\n        unify: function () {\r\n            return this.convertTo({ length: 'px', duration: 's', angle: 'rad' });\r\n        },\r\n        convertTo: function (conversions) {\r\n            var value = this.value;\r\n            var unit = this.unit.clone();\r\n            var i;\r\n            var groupName;\r\n            var group;\r\n            var targetUnit;\r\n            var derivedConversions = {};\r\n            var applyUnit;\r\n            if (typeof conversions === 'string') {\r\n                for (i in unitConversions) {\r\n                    if (unitConversions[i].hasOwnProperty(conversions)) {\r\n                        derivedConversions = {};\r\n                        derivedConversions[i] = conversions;\r\n                    }\r\n                }\r\n                conversions = derivedConversions;\r\n            }\r\n            applyUnit = function (atomicUnit, denominator) {\r\n                /* jshint loopfunc:true */\r\n                if (group.hasOwnProperty(atomicUnit)) {\r\n                    if (denominator) {\r\n                        value = value / (group[atomicUnit] / group[targetUnit]);\r\n                    }\r\n                    else {\r\n                        value = value * (group[atomicUnit] / group[targetUnit]);\r\n                    }\r\n                    return targetUnit;\r\n                }\r\n                return atomicUnit;\r\n            };\r\n            for (groupName in conversions) {\r\n                if (conversions.hasOwnProperty(groupName)) {\r\n                    targetUnit = conversions[groupName];\r\n                    group = unitConversions[groupName];\r\n                    unit.map(applyUnit);\r\n                }\r\n            }\r\n            unit.cancel();\r\n            return new Dimension(value, unit);\r\n        }\r\n    });\n\n    var MATH = Math$1;\r\n    var Operation = function (op, operands, isSpaced) {\r\n        this.op = op.trim();\r\n        this.operands = operands;\r\n        this.isSpaced = isSpaced;\r\n    };\r\n    Operation.prototype = Object.assign(new Node(), {\r\n        type: 'Operation',\r\n        accept: function (visitor) {\r\n            this.operands = visitor.visitArray(this.operands);\r\n        },\r\n        eval: function (context) {\r\n            var a = this.operands[0].eval(context), b = this.operands[1].eval(context), op;\r\n            if (context.isMathOn(this.op)) {\r\n                op = this.op === './' ? '/' : this.op;\r\n                if (a instanceof Dimension && b instanceof Color) {\r\n                    a = a.toColor();\r\n                }\r\n                if (b instanceof Dimension && a instanceof Color) {\r\n                    b = b.toColor();\r\n                }\r\n                if (!a.operate || !b.operate) {\r\n                    if ((a instanceof Operation || b instanceof Operation)\r\n                        && a.op === '/' && context.math === MATH.PARENS_DIVISION) {\r\n                        return new Operation(this.op, [a, b], this.isSpaced);\r\n                    }\r\n                    throw { type: 'Operation',\r\n                        message: 'Operation on an invalid type' };\r\n                }\r\n                return a.operate(context, op, b);\r\n            }\r\n            else {\r\n                return new Operation(this.op, [a, b], this.isSpaced);\r\n            }\r\n        },\r\n        genCSS: function (context, output) {\r\n            this.operands[0].genCSS(context, output);\r\n            if (this.isSpaced) {\r\n                output.add(' ');\r\n            }\r\n            output.add(this.op);\r\n            if (this.isSpaced) {\r\n                output.add(' ');\r\n            }\r\n            this.operands[1].genCSS(context, output);\r\n        }\r\n    });\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n\r\n    function __spreadArray(to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || from);\r\n    }\n\n    var Expression = function (value, noSpacing) {\r\n        this.value = value;\r\n        this.noSpacing = noSpacing;\r\n        if (!value) {\r\n            throw new Error('Expression requires an array parameter');\r\n        }\r\n    };\r\n    Expression.prototype = Object.assign(new Node(), {\r\n        type: 'Expression',\r\n        accept: function (visitor) {\r\n            this.value = visitor.visitArray(this.value);\r\n        },\r\n        eval: function (context) {\r\n            var returnValue;\r\n            var mathOn = context.isMathOn();\r\n            var inParenthesis = this.parens;\r\n            var doubleParen = false;\r\n            if (inParenthesis) {\r\n                context.inParenthesis();\r\n            }\r\n            if (this.value.length > 1) {\r\n                returnValue = new Expression(this.value.map(function (e) {\r\n                    if (!e.eval) {\r\n                        return e;\r\n                    }\r\n                    return e.eval(context);\r\n                }), this.noSpacing);\r\n            }\r\n            else if (this.value.length === 1) {\r\n                if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\r\n                    doubleParen = true;\r\n                }\r\n                returnValue = this.value[0].eval(context);\r\n            }\r\n            else {\r\n                returnValue = this;\r\n            }\r\n            if (inParenthesis) {\r\n                context.outOfParenthesis();\r\n            }\r\n            if (this.parens && this.parensInOp && !mathOn && !doubleParen\r\n                && (!(returnValue instanceof Dimension))) {\r\n                returnValue = new Paren(returnValue);\r\n            }\r\n            return returnValue;\r\n        },\r\n        genCSS: function (context, output) {\r\n            for (var i = 0; i < this.value.length; i++) {\r\n                this.value[i].genCSS(context, output);\r\n                if (!this.noSpacing && i + 1 < this.value.length) {\r\n                    output.add(' ');\r\n                }\r\n            }\r\n        },\r\n        throwAwayComments: function () {\r\n            this.value = this.value.filter(function (v) {\r\n                return !(v instanceof Comment);\r\n            });\r\n        }\r\n    });\n\n    var functionCaller = /** @class */ (function () {\r\n        function functionCaller(name, context, index, currentFileInfo) {\r\n            this.name = name.toLowerCase();\r\n            this.index = index;\r\n            this.context = context;\r\n            this.currentFileInfo = currentFileInfo;\r\n            this.func = context.frames[0].functionRegistry.get(this.name);\r\n        }\r\n        functionCaller.prototype.isValid = function () {\r\n            return Boolean(this.func);\r\n        };\r\n        functionCaller.prototype.call = function (args) {\r\n            var _this = this;\r\n            if (!(Array.isArray(args))) {\r\n                args = [args];\r\n            }\r\n            var evalArgs = this.func.evalArgs;\r\n            if (evalArgs !== false) {\r\n                args = args.map(function (a) { return a.eval(_this.context); });\r\n            }\r\n            var commentFilter = function (item) { return !(item.type === 'Comment'); };\r\n            // This code is terrible and should be replaced as per this issue...\r\n            // https://github.com/less/less.js/issues/2477\r\n            args = args\r\n                .filter(commentFilter)\r\n                .map(function (item) {\r\n                if (item.type === 'Expression') {\r\n                    var subNodes = item.value.filter(commentFilter);\r\n                    if (subNodes.length === 1) {\r\n                        // https://github.com/less/less.js/issues/3616\r\n                        if (item.parens && subNodes[0].op === '/') {\r\n                            return item;\r\n                        }\r\n                        return subNodes[0];\r\n                    }\r\n                    else {\r\n                        return new Expression(subNodes);\r\n                    }\r\n                }\r\n                return item;\r\n            });\r\n            if (evalArgs === false) {\r\n                return this.func.apply(this, __spreadArray([this.context], args));\r\n            }\r\n            return this.func.apply(this, args);\r\n        };\r\n        return functionCaller;\r\n    }());\n\n    //\r\n    // A function call node.\r\n    //\r\n    var Call = function (name, args, index, currentFileInfo) {\r\n        this.name = name;\r\n        this.args = args;\r\n        this.calc = name === 'calc';\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n    };\r\n    Call.prototype = Object.assign(new Node(), {\r\n        type: 'Call',\r\n        accept: function (visitor) {\r\n            if (this.args) {\r\n                this.args = visitor.visitArray(this.args);\r\n            }\r\n        },\r\n        //\r\n        // When evaluating a function call,\r\n        // we either find the function in the functionRegistry,\r\n        // in which case we call it, passing the  evaluated arguments,\r\n        // if this returns null or we cannot find the function, we\r\n        // simply print it out as it appeared originally [2].\r\n        //\r\n        // The reason why we evaluate the arguments, is in the case where\r\n        // we try to pass a variable to a function, like: `saturate(@color)`.\r\n        // The function should receive the value, not the variable.\r\n        //\r\n        eval: function (context) {\r\n            var _this = this;\r\n            /**\r\n             * Turn off math for calc(), and switch back on for evaluating nested functions\r\n             */\r\n            var currentMathContext = context.mathOn;\r\n            context.mathOn = !this.calc;\r\n            if (this.calc || context.inCalc) {\r\n                context.enterCalc();\r\n            }\r\n            var exitCalc = function () {\r\n                if (_this.calc || context.inCalc) {\r\n                    context.exitCalc();\r\n                }\r\n                context.mathOn = currentMathContext;\r\n            };\r\n            var result;\r\n            var funcCaller = new functionCaller(this.name, context, this.getIndex(), this.fileInfo());\r\n            if (funcCaller.isValid()) {\r\n                try {\r\n                    result = funcCaller.call(this.args);\r\n                    exitCalc();\r\n                }\r\n                catch (e) {\r\n                    if (e.hasOwnProperty('line') && e.hasOwnProperty('column')) {\r\n                        throw e;\r\n                    }\r\n                    throw {\r\n                        type: e.type || 'Runtime',\r\n                        message: \"Error evaluating function `\" + this.name + \"`\" + (e.message ? \": \" + e.message : ''),\r\n                        index: this.getIndex(),\r\n                        filename: this.fileInfo().filename,\r\n                        line: e.lineNumber,\r\n                        column: e.columnNumber\r\n                    };\r\n                }\r\n            }\r\n            if (result !== null && result !== undefined) {\r\n                // Results that that are not nodes are cast as Anonymous nodes\r\n                // Falsy values or booleans are returned as empty nodes\r\n                if (!(result instanceof Node)) {\r\n                    if (!result || result === true) {\r\n                        result = new Anonymous(null);\r\n                    }\r\n                    else {\r\n                        result = new Anonymous(result.toString());\r\n                    }\r\n                }\r\n                result._index = this._index;\r\n                result._fileInfo = this._fileInfo;\r\n                return result;\r\n            }\r\n            var args = this.args.map(function (a) { return a.eval(context); });\r\n            exitCalc();\r\n            return new Call(this.name, args, this.getIndex(), this.fileInfo());\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add(this.name + \"(\", this.fileInfo(), this.getIndex());\r\n            for (var i = 0; i < this.args.length; i++) {\r\n                this.args[i].genCSS(context, output);\r\n                if (i + 1 < this.args.length) {\r\n                    output.add(', ');\r\n                }\r\n            }\r\n            output.add(')');\r\n        }\r\n    });\n\n    var Variable = function (name, index, currentFileInfo) {\r\n        this.name = name;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n    };\r\n    Variable.prototype = Object.assign(new Node(), {\r\n        type: 'Variable',\r\n        eval: function (context) {\r\n            var variable, name = this.name;\r\n            if (name.indexOf('@@') === 0) {\r\n                name = \"@\" + new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value;\r\n            }\r\n            if (this.evaluating) {\r\n                throw { type: 'Name',\r\n                    message: \"Recursive variable definition for \" + name,\r\n                    filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n            this.evaluating = true;\r\n            variable = this.find(context.frames, function (frame) {\r\n                var v = frame.variable(name);\r\n                if (v) {\r\n                    if (v.important) {\r\n                        var importantScope = context.importantScope[context.importantScope.length - 1];\r\n                        importantScope.important = v.important;\r\n                    }\r\n                    // If in calc, wrap vars in a function call to cascade evaluate args first\r\n                    if (context.inCalc) {\r\n                        return (new Call('_SELF', [v.value])).eval(context);\r\n                    }\r\n                    else {\r\n                        return v.value.eval(context);\r\n                    }\r\n                }\r\n            });\r\n            if (variable) {\r\n                this.evaluating = false;\r\n                return variable;\r\n            }\r\n            else {\r\n                throw { type: 'Name',\r\n                    message: \"variable \" + name + \" is undefined\",\r\n                    filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n        },\r\n        find: function (obj, fun) {\r\n            for (var i = 0, r = void 0; i < obj.length; i++) {\r\n                r = fun.call(obj, obj[i]);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    });\n\n    var Property = function (name, index, currentFileInfo) {\r\n        this.name = name;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n    };\r\n    Property.prototype = Object.assign(new Node(), {\r\n        type: 'Property',\r\n        eval: function (context) {\r\n            var property;\r\n            var name = this.name;\r\n            // TODO: shorten this reference\r\n            var mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\r\n            if (this.evaluating) {\r\n                throw { type: 'Name',\r\n                    message: \"Recursive property reference for \" + name,\r\n                    filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n            this.evaluating = true;\r\n            property = this.find(context.frames, function (frame) {\r\n                var v;\r\n                var vArr = frame.property(name);\r\n                if (vArr) {\r\n                    for (var i = 0; i < vArr.length; i++) {\r\n                        v = vArr[i];\r\n                        vArr[i] = new Declaration(v.name, v.value, v.important, v.merge, v.index, v.currentFileInfo, v.inline, v.variable);\r\n                    }\r\n                    mergeRules(vArr);\r\n                    v = vArr[vArr.length - 1];\r\n                    if (v.important) {\r\n                        var importantScope = context.importantScope[context.importantScope.length - 1];\r\n                        importantScope.important = v.important;\r\n                    }\r\n                    v = v.value.eval(context);\r\n                    return v;\r\n                }\r\n            });\r\n            if (property) {\r\n                this.evaluating = false;\r\n                return property;\r\n            }\r\n            else {\r\n                throw { type: 'Name',\r\n                    message: \"Property '\" + name + \"' is undefined\",\r\n                    filename: this.currentFileInfo.filename,\r\n                    index: this.index };\r\n            }\r\n        },\r\n        find: function (obj, fun) {\r\n            for (var i = 0, r = void 0; i < obj.length; i++) {\r\n                r = fun.call(obj, obj[i]);\r\n                if (r) {\r\n                    return r;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    });\n\n    var Attribute = function (key, op, value, cif) {\r\n        this.key = key;\r\n        this.op = op;\r\n        this.value = value;\r\n        this.cif = cif;\r\n    };\r\n    Attribute.prototype = Object.assign(new Node(), {\r\n        type: 'Attribute',\r\n        eval: function (context) {\r\n            return new Attribute(this.key.eval ? this.key.eval(context) : this.key, this.op, (this.value && this.value.eval) ? this.value.eval(context) : this.value, this.cif);\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add(this.toCSS(context));\r\n        },\r\n        toCSS: function (context) {\r\n            var value = this.key.toCSS ? this.key.toCSS(context) : this.key;\r\n            if (this.op) {\r\n                value += this.op;\r\n                value += (this.value.toCSS ? this.value.toCSS(context) : this.value);\r\n            }\r\n            if (this.cif) {\r\n                value = value + \" \" + this.cif;\r\n            }\r\n            return \"[\" + value + \"]\";\r\n        }\r\n    });\n\n    var Quoted = function (str, content, escaped, index, currentFileInfo) {\r\n        this.escaped = (escaped == null) ? true : escaped;\r\n        this.value = content || '';\r\n        this.quote = str.charAt(0);\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.variableRegex = /@\\{([\\w-]+)\\}/g;\r\n        this.propRegex = /\\$\\{([\\w-]+)\\}/g;\r\n        this.allowRoot = escaped;\r\n    };\r\n    Quoted.prototype = Object.assign(new Node(), {\r\n        type: 'Quoted',\r\n        genCSS: function (context, output) {\r\n            if (!this.escaped) {\r\n                output.add(this.quote, this.fileInfo(), this.getIndex());\r\n            }\r\n            output.add(this.value);\r\n            if (!this.escaped) {\r\n                output.add(this.quote);\r\n            }\r\n        },\r\n        containsVariables: function () {\r\n            return this.value.match(this.variableRegex);\r\n        },\r\n        eval: function (context) {\r\n            var that = this;\r\n            var value = this.value;\r\n            var variableReplacement = function (_, name) {\r\n                var v = new Variable(\"@\" + name, that.getIndex(), that.fileInfo()).eval(context, true);\r\n                return (v instanceof Quoted) ? v.value : v.toCSS();\r\n            };\r\n            var propertyReplacement = function (_, name) {\r\n                var v = new Property(\"$\" + name, that.getIndex(), that.fileInfo()).eval(context, true);\r\n                return (v instanceof Quoted) ? v.value : v.toCSS();\r\n            };\r\n            function iterativeReplace(value, regexp, replacementFnc) {\r\n                var evaluatedValue = value;\r\n                do {\r\n                    value = evaluatedValue.toString();\r\n                    evaluatedValue = value.replace(regexp, replacementFnc);\r\n                } while (value !== evaluatedValue);\r\n                return evaluatedValue;\r\n            }\r\n            value = iterativeReplace(value, this.variableRegex, variableReplacement);\r\n            value = iterativeReplace(value, this.propRegex, propertyReplacement);\r\n            return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\r\n        },\r\n        compare: function (other) {\r\n            // when comparing quoted strings allow the quote to differ\r\n            if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\r\n                return Node.numericCompare(this.value, other.value);\r\n            }\r\n            else {\r\n                return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\r\n            }\r\n        }\r\n    });\n\n    function escapePath(path) {\r\n        return path.replace(/[\\(\\)'\"\\s]/g, function (match) { return \"\\\\\" + match; });\r\n    }\r\n    var URL = function (val, index, currentFileInfo, isEvald) {\r\n        this.value = val;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.isEvald = isEvald;\r\n    };\r\n    URL.prototype = Object.assign(new Node(), {\r\n        type: 'Url',\r\n        accept: function (visitor) {\r\n            this.value = visitor.visit(this.value);\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add('url(');\r\n            this.value.genCSS(context, output);\r\n            output.add(')');\r\n        },\r\n        eval: function (context) {\r\n            var val = this.value.eval(context);\r\n            var rootpath;\r\n            if (!this.isEvald) {\r\n                // Add the rootpath if the URL requires a rewrite\r\n                rootpath = this.fileInfo() && this.fileInfo().rootpath;\r\n                if (typeof rootpath === 'string' &&\r\n                    typeof val.value === 'string' &&\r\n                    context.pathRequiresRewrite(val.value)) {\r\n                    if (!val.quote) {\r\n                        rootpath = escapePath(rootpath);\r\n                    }\r\n                    val.value = context.rewritePath(val.value, rootpath);\r\n                }\r\n                else {\r\n                    val.value = context.normalizePath(val.value);\r\n                }\r\n                // Add url args if enabled\r\n                if (context.urlArgs) {\r\n                    if (!val.value.match(/^\\s*data:/)) {\r\n                        var delimiter = val.value.indexOf('?') === -1 ? '?' : '&';\r\n                        var urlArgs = delimiter + context.urlArgs;\r\n                        if (val.value.indexOf('#') !== -1) {\r\n                            val.value = val.value.replace('#', urlArgs + \"#\");\r\n                        }\r\n                        else {\r\n                            val.value += urlArgs;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return new URL(val, this.getIndex(), this.fileInfo(), true);\r\n        }\r\n    });\n\n    var Media = function (value, features, index, currentFileInfo, visibilityInfo) {\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        var selectors = (new Selector([], null, null, this._index, this._fileInfo)).createEmptySelectors();\r\n        this.features = new Value(features);\r\n        this.rules = [new Ruleset(selectors, value)];\r\n        this.rules[0].allowImports = true;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.allowRoot = true;\r\n        this.setParent(selectors, this);\r\n        this.setParent(this.features, this);\r\n        this.setParent(this.rules, this);\r\n    };\r\n    Media.prototype = Object.assign(new AtRule(), {\r\n        type: 'Media',\r\n        isRulesetLike: function () {\r\n            return true;\r\n        },\r\n        accept: function (visitor) {\r\n            if (this.features) {\r\n                this.features = visitor.visit(this.features);\r\n            }\r\n            if (this.rules) {\r\n                this.rules = visitor.visitArray(this.rules);\r\n            }\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add('@media ', this._fileInfo, this._index);\r\n            this.features.genCSS(context, output);\r\n            this.outputRuleset(context, output, this.rules);\r\n        },\r\n        eval: function (context) {\r\n            if (!context.mediaBlocks) {\r\n                context.mediaBlocks = [];\r\n                context.mediaPath = [];\r\n            }\r\n            var media = new Media(null, [], this._index, this._fileInfo, this.visibilityInfo());\r\n            if (this.debugInfo) {\r\n                this.rules[0].debugInfo = this.debugInfo;\r\n                media.debugInfo = this.debugInfo;\r\n            }\r\n            media.features = this.features.eval(context);\r\n            context.mediaPath.push(media);\r\n            context.mediaBlocks.push(media);\r\n            this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\r\n            context.frames.unshift(this.rules[0]);\r\n            media.rules = [this.rules[0].eval(context)];\r\n            context.frames.shift();\r\n            context.mediaPath.pop();\r\n            return context.mediaPath.length === 0 ? media.evalTop(context) :\r\n                media.evalNested(context);\r\n        },\r\n        evalTop: function (context) {\r\n            var result = this;\r\n            // Render all dependent Media blocks.\r\n            if (context.mediaBlocks.length > 1) {\r\n                var selectors = (new Selector([], null, null, this.getIndex(), this.fileInfo())).createEmptySelectors();\r\n                result = new Ruleset(selectors, context.mediaBlocks);\r\n                result.multiMedia = true;\r\n                result.copyVisibilityInfo(this.visibilityInfo());\r\n                this.setParent(result, this);\r\n            }\r\n            delete context.mediaBlocks;\r\n            delete context.mediaPath;\r\n            return result;\r\n        },\r\n        evalNested: function (context) {\r\n            var i;\r\n            var value;\r\n            var path = context.mediaPath.concat([this]);\r\n            // Extract the media-query conditions separated with `,` (OR).\r\n            for (i = 0; i < path.length; i++) {\r\n                value = path[i].features instanceof Value ?\r\n                    path[i].features.value : path[i].features;\r\n                path[i] = Array.isArray(value) ? value : [value];\r\n            }\r\n            // Trace all permutations to generate the resulting media-query.\r\n            //\r\n            // (a, b and c) with nested (d, e) ->\r\n            //    a and d\r\n            //    a and e\r\n            //    b and c and d\r\n            //    b and c and e\r\n            this.features = new Value(this.permute(path).map(function (path) {\r\n                path = path.map(function (fragment) { return fragment.toCSS ? fragment : new Anonymous(fragment); });\r\n                for (i = path.length - 1; i > 0; i--) {\r\n                    path.splice(i, 0, new Anonymous('and'));\r\n                }\r\n                return new Expression(path);\r\n            }));\r\n            this.setParent(this.features, this);\r\n            // Fake a tree-node that doesn't output anything.\r\n            return new Ruleset([], []);\r\n        },\r\n        permute: function (arr) {\r\n            if (arr.length === 0) {\r\n                return [];\r\n            }\r\n            else if (arr.length === 1) {\r\n                return arr[0];\r\n            }\r\n            else {\r\n                var result = [];\r\n                var rest = this.permute(arr.slice(1));\r\n                for (var i = 0; i < rest.length; i++) {\r\n                    for (var j = 0; j < arr[0].length; j++) {\r\n                        result.push([arr[0][j]].concat(rest[i]));\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n        },\r\n        bubbleSelectors: function (selectors) {\r\n            if (!selectors) {\r\n                return;\r\n            }\r\n            this.rules = [new Ruleset(copyArray(selectors), [this.rules[0]])];\r\n            this.setParent(this.rules, this);\r\n        }\r\n    });\n\n    //\r\n    // CSS @import node\r\n    //\r\n    // The general strategy here is that we don't want to wait\r\n    // for the parsing to be completed, before we start importing\r\n    // the file. That's because in the context of a browser,\r\n    // most of the time will be spent waiting for the server to respond.\r\n    //\r\n    // On creation, we push the import path to our import queue, though\r\n    // `import,push`, we also pass it a callback, which it'll call once\r\n    // the file has been fetched, and parsed.\r\n    //\r\n    var Import = function (path, features, options, index, currentFileInfo, visibilityInfo) {\r\n        this.options = options;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.path = path;\r\n        this.features = features;\r\n        this.allowRoot = true;\r\n        if (this.options.less !== undefined || this.options.inline) {\r\n            this.css = !this.options.less || this.options.inline;\r\n        }\r\n        else {\r\n            var pathValue = this.getPath();\r\n            if (pathValue && /[#\\.\\&\\?]css([\\?;].*)?$/.test(pathValue)) {\r\n                this.css = true;\r\n            }\r\n        }\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.setParent(this.features, this);\r\n        this.setParent(this.path, this);\r\n    };\r\n    Import.prototype = Object.assign(new Node(), {\r\n        type: 'Import',\r\n        accept: function (visitor) {\r\n            if (this.features) {\r\n                this.features = visitor.visit(this.features);\r\n            }\r\n            this.path = visitor.visit(this.path);\r\n            if (!this.options.isPlugin && !this.options.inline && this.root) {\r\n                this.root = visitor.visit(this.root);\r\n            }\r\n        },\r\n        genCSS: function (context, output) {\r\n            if (this.css && this.path._fileInfo.reference === undefined) {\r\n                output.add('@import ', this._fileInfo, this._index);\r\n                this.path.genCSS(context, output);\r\n                if (this.features) {\r\n                    output.add(' ');\r\n                    this.features.genCSS(context, output);\r\n                }\r\n                output.add(';');\r\n            }\r\n        },\r\n        getPath: function () {\r\n            return (this.path instanceof URL) ?\r\n                this.path.value.value : this.path.value;\r\n        },\r\n        isVariableImport: function () {\r\n            var path = this.path;\r\n            if (path instanceof URL) {\r\n                path = path.value;\r\n            }\r\n            if (path instanceof Quoted) {\r\n                return path.containsVariables();\r\n            }\r\n            return true;\r\n        },\r\n        evalForImport: function (context) {\r\n            var path = this.path;\r\n            if (path instanceof URL) {\r\n                path = path.value;\r\n            }\r\n            return new Import(path.eval(context), this.features, this.options, this._index, this._fileInfo, this.visibilityInfo());\r\n        },\r\n        evalPath: function (context) {\r\n            var path = this.path.eval(context);\r\n            var fileInfo = this._fileInfo;\r\n            if (!(path instanceof URL)) {\r\n                // Add the rootpath if the URL requires a rewrite\r\n                var pathValue = path.value;\r\n                if (fileInfo &&\r\n                    pathValue &&\r\n                    context.pathRequiresRewrite(pathValue)) {\r\n                    path.value = context.rewritePath(pathValue, fileInfo.rootpath);\r\n                }\r\n                else {\r\n                    path.value = context.normalizePath(path.value);\r\n                }\r\n            }\r\n            return path;\r\n        },\r\n        eval: function (context) {\r\n            var result = this.doEval(context);\r\n            if (this.options.reference || this.blocksVisibility()) {\r\n                if (result.length || result.length === 0) {\r\n                    result.forEach(function (node) {\r\n                        node.addVisibilityBlock();\r\n                    });\r\n                }\r\n                else {\r\n                    result.addVisibilityBlock();\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        doEval: function (context) {\r\n            var ruleset;\r\n            var registry;\r\n            var features = this.features && this.features.eval(context);\r\n            if (this.options.isPlugin) {\r\n                if (this.root && this.root.eval) {\r\n                    try {\r\n                        this.root.eval(context);\r\n                    }\r\n                    catch (e) {\r\n                        e.message = 'Plugin error during evaluation';\r\n                        throw new LessError(e, this.root.imports, this.root.filename);\r\n                    }\r\n                }\r\n                registry = context.frames[0] && context.frames[0].functionRegistry;\r\n                if (registry && this.root && this.root.functions) {\r\n                    registry.addMultiple(this.root.functions);\r\n                }\r\n                return [];\r\n            }\r\n            if (this.skip) {\r\n                if (typeof this.skip === 'function') {\r\n                    this.skip = this.skip();\r\n                }\r\n                if (this.skip) {\r\n                    return [];\r\n                }\r\n            }\r\n            if (this.options.inline) {\r\n                var contents = new Anonymous(this.root, 0, {\r\n                    filename: this.importedFilename,\r\n                    reference: this.path._fileInfo && this.path._fileInfo.reference\r\n                }, true, true);\r\n                return this.features ? new Media([contents], this.features.value) : [contents];\r\n            }\r\n            else if (this.css) {\r\n                var newImport = new Import(this.evalPath(context), features, this.options, this._index);\r\n                if (!newImport.css && this.error) {\r\n                    throw this.error;\r\n                }\r\n                return newImport;\r\n            }\r\n            else if (this.root) {\r\n                ruleset = new Ruleset(null, copyArray(this.root.rules));\r\n                ruleset.evalImports(context);\r\n                return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        }\r\n    });\n\n    var JsEvalNode = function () { };\r\n    JsEvalNode.prototype = Object.assign(new Node(), {\r\n        evaluateJavaScript: function (expression, context) {\r\n            var result;\r\n            var that = this;\r\n            var evalContext = {};\r\n            if (!context.javascriptEnabled) {\r\n                throw { message: 'Inline JavaScript is not enabled. Is it set in your options?',\r\n                    filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n            expression = expression.replace(/@\\{([\\w-]+)\\}/g, function (_, name) {\r\n                return that.jsify(new Variable(\"@\" + name, that.getIndex(), that.fileInfo()).eval(context));\r\n            });\r\n            try {\r\n                expression = new Function(\"return (\" + expression + \")\");\r\n            }\r\n            catch (e) {\r\n                throw { message: \"JavaScript evaluation error: \" + e.message + \" from `\" + expression + \"`\",\r\n                    filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n            var variables = context.frames[0].variables();\r\n            for (var k in variables) {\r\n                if (variables.hasOwnProperty(k)) {\r\n                    /* jshint loopfunc:true */\r\n                    evalContext[k.slice(1)] = {\r\n                        value: variables[k].value,\r\n                        toJS: function () {\r\n                            return this.value.eval(context).toCSS();\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n            try {\r\n                result = expression.call(evalContext);\r\n            }\r\n            catch (e) {\r\n                throw { message: \"JavaScript evaluation error: '\" + e.name + \": \" + e.message.replace(/[\"]/g, '\\'') + \"'\",\r\n                    filename: this.fileInfo().filename,\r\n                    index: this.getIndex() };\r\n            }\r\n            return result;\r\n        },\r\n        jsify: function (obj) {\r\n            if (Array.isArray(obj.value) && (obj.value.length > 1)) {\r\n                return \"[\" + obj.value.map(function (v) { return v.toCSS(); }).join(', ') + \"]\";\r\n            }\r\n            else {\r\n                return obj.toCSS();\r\n            }\r\n        }\r\n    });\n\n    var JavaScript = function (string, escaped, index, currentFileInfo) {\r\n        this.escaped = escaped;\r\n        this.expression = string;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n    };\r\n    JavaScript.prototype = Object.assign(new JsEvalNode(), {\r\n        type: 'JavaScript',\r\n        eval: function (context) {\r\n            var result = this.evaluateJavaScript(this.expression, context);\r\n            var type = typeof result;\r\n            if (type === 'number' && !isNaN(result)) {\r\n                return new Dimension(result);\r\n            }\r\n            else if (type === 'string') {\r\n                return new Quoted(\"\\\"\" + result + \"\\\"\", result, this.escaped, this._index);\r\n            }\r\n            else if (Array.isArray(result)) {\r\n                return new Anonymous(result.join(', '));\r\n            }\r\n            else {\r\n                return new Anonymous(result);\r\n            }\r\n        }\r\n    });\n\n    var Assignment = function (key, val) {\r\n        this.key = key;\r\n        this.value = val;\r\n    };\r\n    Assignment.prototype = Object.assign(new Node(), {\r\n        type: 'Assignment',\r\n        accept: function (visitor) {\r\n            this.value = visitor.visit(this.value);\r\n        },\r\n        eval: function (context) {\r\n            if (this.value.eval) {\r\n                return new Assignment(this.key, this.value.eval(context));\r\n            }\r\n            return this;\r\n        },\r\n        genCSS: function (context, output) {\r\n            output.add(this.key + \"=\");\r\n            if (this.value.genCSS) {\r\n                this.value.genCSS(context, output);\r\n            }\r\n            else {\r\n                output.add(this.value);\r\n            }\r\n        }\r\n    });\n\n    var Condition = function (op, l, r, i, negate) {\r\n        this.op = op.trim();\r\n        this.lvalue = l;\r\n        this.rvalue = r;\r\n        this._index = i;\r\n        this.negate = negate;\r\n    };\r\n    Condition.prototype = Object.assign(new Node(), {\r\n        type: 'Condition',\r\n        accept: function (visitor) {\r\n            this.lvalue = visitor.visit(this.lvalue);\r\n            this.rvalue = visitor.visit(this.rvalue);\r\n        },\r\n        eval: function (context) {\r\n            var result = (function (op, a, b) {\r\n                switch (op) {\r\n                    case 'and': return a && b;\r\n                    case 'or': return a || b;\r\n                    default:\r\n                        switch (Node.compare(a, b)) {\r\n                            case -1:\r\n                                return op === '<' || op === '=<' || op === '<=';\r\n                            case 0:\r\n                                return op === '=' || op === '>=' || op === '=<' || op === '<=';\r\n                            case 1:\r\n                                return op === '>' || op === '>=';\r\n                            default:\r\n                                return false;\r\n                        }\r\n                }\r\n            })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\r\n            return this.negate ? !result : result;\r\n        }\r\n    });\n\n    var UnicodeDescriptor = function (value) {\r\n        this.value = value;\r\n    };\r\n    UnicodeDescriptor.prototype = Object.assign(new Node(), {\r\n        type: 'UnicodeDescriptor'\r\n    });\n\n    var Negative = function (node) {\r\n        this.value = node;\r\n    };\r\n    Negative.prototype = Object.assign(new Node(), {\r\n        type: 'Negative',\r\n        genCSS: function (context, output) {\r\n            output.add('-');\r\n            this.value.genCSS(context, output);\r\n        },\r\n        eval: function (context) {\r\n            if (context.isMathOn()) {\r\n                return (new Operation('*', [new Dimension(-1), this.value])).eval(context);\r\n            }\r\n            return new Negative(this.value.eval(context));\r\n        }\r\n    });\n\n    var Extend = function (selector, option, index, currentFileInfo, visibilityInfo) {\r\n        this.selector = selector;\r\n        this.option = option;\r\n        this.object_id = Extend.next_id++;\r\n        this.parent_ids = [this.object_id];\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.allowRoot = true;\r\n        switch (option) {\r\n            case 'all':\r\n                this.allowBefore = true;\r\n                this.allowAfter = true;\r\n                break;\r\n            default:\r\n                this.allowBefore = false;\r\n                this.allowAfter = false;\r\n                break;\r\n        }\r\n        this.setParent(this.selector, this);\r\n    };\r\n    Extend.prototype = Object.assign(new Node(), {\r\n        type: 'Extend',\r\n        accept: function (visitor) {\r\n            this.selector = visitor.visit(this.selector);\r\n        },\r\n        eval: function (context) {\r\n            return new Extend(this.selector.eval(context), this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\r\n        },\r\n        clone: function (context) {\r\n            return new Extend(this.selector, this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\r\n        },\r\n        // it concatenates (joins) all selectors in selector array\r\n        findSelfSelectors: function (selectors) {\r\n            var selfElements = [], i, selectorElements;\r\n            for (i = 0; i < selectors.length; i++) {\r\n                selectorElements = selectors[i].elements;\r\n                // duplicate the logic in genCSS function inside the selector node.\r\n                // future TODO - move both logics into the selector joiner visitor\r\n                if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {\r\n                    selectorElements[0].combinator.value = ' ';\r\n                }\r\n                selfElements = selfElements.concat(selectors[i].elements);\r\n            }\r\n            this.selfSelectors = [new Selector(selfElements)];\r\n            this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\r\n        }\r\n    });\r\n    Extend.next_id = 0;\n\n    var VariableCall = function (variable, index, currentFileInfo) {\r\n        this.variable = variable;\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.allowRoot = true;\r\n    };\r\n    VariableCall.prototype = Object.assign(new Node(), {\r\n        type: 'VariableCall',\r\n        eval: function (context) {\r\n            var rules;\r\n            var detachedRuleset = new Variable(this.variable, this.getIndex(), this.fileInfo()).eval(context);\r\n            var error = new LessError({ message: \"Could not evaluate variable call \" + this.variable });\r\n            if (!detachedRuleset.ruleset) {\r\n                if (detachedRuleset.rules) {\r\n                    rules = detachedRuleset;\r\n                }\r\n                else if (Array.isArray(detachedRuleset)) {\r\n                    rules = new Ruleset('', detachedRuleset);\r\n                }\r\n                else if (Array.isArray(detachedRuleset.value)) {\r\n                    rules = new Ruleset('', detachedRuleset.value);\r\n                }\r\n                else {\r\n                    throw error;\r\n                }\r\n                detachedRuleset = new DetachedRuleset(rules);\r\n            }\r\n            if (detachedRuleset.ruleset) {\r\n                return detachedRuleset.callEval(context);\r\n            }\r\n            throw error;\r\n        }\r\n    });\n\n    var NamespaceValue = function (ruleCall, lookups, index, fileInfo) {\r\n        this.value = ruleCall;\r\n        this.lookups = lookups;\r\n        this._index = index;\r\n        this._fileInfo = fileInfo;\r\n    };\r\n    NamespaceValue.prototype = Object.assign(new Node(), {\r\n        type: 'NamespaceValue',\r\n        eval: function (context) {\r\n            var i, name, rules = this.value.eval(context);\r\n            for (i = 0; i < this.lookups.length; i++) {\r\n                name = this.lookups[i];\r\n                /**\r\n                 * Eval'd DRs return rulesets.\r\n                 * Eval'd mixins return rules, so let's make a ruleset if we need it.\r\n                 * We need to do this because of late parsing of values\r\n                 */\r\n                if (Array.isArray(rules)) {\r\n                    rules = new Ruleset([new Selector()], rules);\r\n                }\r\n                if (name === '') {\r\n                    rules = rules.lastDeclaration();\r\n                }\r\n                else if (name.charAt(0) === '@') {\r\n                    if (name.charAt(1) === '@') {\r\n                        name = \"@\" + new Variable(name.substr(1)).eval(context).value;\r\n                    }\r\n                    if (rules.variables) {\r\n                        rules = rules.variable(name);\r\n                    }\r\n                    if (!rules) {\r\n                        throw { type: 'Name',\r\n                            message: \"variable \" + name + \" not found\",\r\n                            filename: this.fileInfo().filename,\r\n                            index: this.getIndex() };\r\n                    }\r\n                }\r\n                else {\r\n                    if (name.substring(0, 2) === '$@') {\r\n                        name = \"$\" + new Variable(name.substr(1)).eval(context).value;\r\n                    }\r\n                    else {\r\n                        name = name.charAt(0) === '$' ? name : \"$\" + name;\r\n                    }\r\n                    if (rules.properties) {\r\n                        rules = rules.property(name);\r\n                    }\r\n                    if (!rules) {\r\n                        throw { type: 'Name',\r\n                            message: \"property \\\"\" + name.substr(1) + \"\\\" not found\",\r\n                            filename: this.fileInfo().filename,\r\n                            index: this.getIndex() };\r\n                    }\r\n                    // Properties are an array of values, since a ruleset can have multiple props.\r\n                    // We pick the last one (the \"cascaded\" value)\r\n                    rules = rules[rules.length - 1];\r\n                }\r\n                if (rules.value) {\r\n                    rules = rules.eval(context).value;\r\n                }\r\n                if (rules.ruleset) {\r\n                    rules = rules.ruleset.eval(context);\r\n                }\r\n            }\r\n            return rules;\r\n        }\r\n    });\n\n    var Definition = function (name, params, rules, condition, variadic, frames, visibilityInfo) {\r\n        this.name = name || 'anonymous mixin';\r\n        this.selectors = [new Selector([new Element(null, name, false, this._index, this._fileInfo)])];\r\n        this.params = params;\r\n        this.condition = condition;\r\n        this.variadic = variadic;\r\n        this.arity = params.length;\r\n        this.rules = rules;\r\n        this._lookups = {};\r\n        var optionalParameters = [];\r\n        this.required = params.reduce(function (count, p) {\r\n            if (!p.name || (p.name && !p.value)) {\r\n                return count + 1;\r\n            }\r\n            else {\r\n                optionalParameters.push(p.name);\r\n                return count;\r\n            }\r\n        }, 0);\r\n        this.optionalParameters = optionalParameters;\r\n        this.frames = frames;\r\n        this.copyVisibilityInfo(visibilityInfo);\r\n        this.allowRoot = true;\r\n    };\r\n    Definition.prototype = Object.assign(new Ruleset(), {\r\n        type: 'MixinDefinition',\r\n        evalFirst: true,\r\n        accept: function (visitor) {\r\n            if (this.params && this.params.length) {\r\n                this.params = visitor.visitArray(this.params);\r\n            }\r\n            this.rules = visitor.visitArray(this.rules);\r\n            if (this.condition) {\r\n                this.condition = visitor.visit(this.condition);\r\n            }\r\n        },\r\n        evalParams: function (context, mixinEnv, args, evaldArguments) {\r\n            /* jshint boss:true */\r\n            var frame = new Ruleset(null, null);\r\n            var varargs;\r\n            var arg;\r\n            var params = copyArray(this.params);\r\n            var i;\r\n            var j;\r\n            var val;\r\n            var name;\r\n            var isNamedFound;\r\n            var argIndex;\r\n            var argsLength = 0;\r\n            if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\r\n                frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\r\n            }\r\n            mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\r\n            if (args) {\r\n                args = copyArray(args);\r\n                argsLength = args.length;\r\n                for (i = 0; i < argsLength; i++) {\r\n                    arg = args[i];\r\n                    if (name = (arg && arg.name)) {\r\n                        isNamedFound = false;\r\n                        for (j = 0; j < params.length; j++) {\r\n                            if (!evaldArguments[j] && name === params[j].name) {\r\n                                evaldArguments[j] = arg.value.eval(context);\r\n                                frame.prependRule(new Declaration(name, arg.value.eval(context)));\r\n                                isNamedFound = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isNamedFound) {\r\n                            args.splice(i, 1);\r\n                            i--;\r\n                            continue;\r\n                        }\r\n                        else {\r\n                            throw { type: 'Runtime', message: \"Named argument for \" + this.name + \" \" + args[i].name + \" not found\" };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            argIndex = 0;\r\n            for (i = 0; i < params.length; i++) {\r\n                if (evaldArguments[i]) {\r\n                    continue;\r\n                }\r\n                arg = args && args[argIndex];\r\n                if (name = params[i].name) {\r\n                    if (params[i].variadic) {\r\n                        varargs = [];\r\n                        for (j = argIndex; j < argsLength; j++) {\r\n                            varargs.push(args[j].value.eval(context));\r\n                        }\r\n                        frame.prependRule(new Declaration(name, new Expression(varargs).eval(context)));\r\n                    }\r\n                    else {\r\n                        val = arg && arg.value;\r\n                        if (val) {\r\n                            // This was a mixin call, pass in a detached ruleset of it's eval'd rules\r\n                            if (Array.isArray(val)) {\r\n                                val = new DetachedRuleset(new Ruleset('', val));\r\n                            }\r\n                            else {\r\n                                val = val.eval(context);\r\n                            }\r\n                        }\r\n                        else if (params[i].value) {\r\n                            val = params[i].value.eval(mixinEnv);\r\n                            frame.resetCache();\r\n                        }\r\n                        else {\r\n                            throw { type: 'Runtime', message: \"wrong number of arguments for \" + this.name + \" (\" + argsLength + \" for \" + this.arity + \")\" };\r\n                        }\r\n                        frame.prependRule(new Declaration(name, val));\r\n                        evaldArguments[i] = val;\r\n                    }\r\n                }\r\n                if (params[i].variadic && args) {\r\n                    for (j = argIndex; j < argsLength; j++) {\r\n                        evaldArguments[j] = args[j].value.eval(context);\r\n                    }\r\n                }\r\n                argIndex++;\r\n            }\r\n            return frame;\r\n        },\r\n        makeImportant: function () {\r\n            var rules = !this.rules ? this.rules : this.rules.map(function (r) {\r\n                if (r.makeImportant) {\r\n                    return r.makeImportant(true);\r\n                }\r\n                else {\r\n                    return r;\r\n                }\r\n            });\r\n            var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\r\n            return result;\r\n        },\r\n        eval: function (context) {\r\n            return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || copyArray(context.frames));\r\n        },\r\n        evalCall: function (context, args, important) {\r\n            var _arguments = [];\r\n            var mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames;\r\n            var frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments);\r\n            var rules;\r\n            var ruleset;\r\n            frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context)));\r\n            rules = copyArray(this.rules);\r\n            ruleset = new Ruleset(null, rules);\r\n            ruleset.originalRuleset = this;\r\n            ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));\r\n            if (important) {\r\n                ruleset = ruleset.makeImportant();\r\n            }\r\n            return ruleset;\r\n        },\r\n        matchCondition: function (args, context) {\r\n            if (this.condition && !this.condition.eval(new contexts.Eval(context, [this.evalParams(context, /* the parameter variables */ new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])]\r\n                .concat(this.frames || []) // the parent namespace/mixin frames\r\n                .concat(context.frames)))) { // the current environment frames\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        matchArgs: function (args, context) {\r\n            var allArgsCnt = (args && args.length) || 0;\r\n            var len;\r\n            var optionalParameters = this.optionalParameters;\r\n            var requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {\r\n                if (optionalParameters.indexOf(p.name) < 0) {\r\n                    return count + 1;\r\n                }\r\n                else {\r\n                    return count;\r\n                }\r\n            }, 0);\r\n            if (!this.variadic) {\r\n                if (requiredArgsCnt < this.required) {\r\n                    return false;\r\n                }\r\n                if (allArgsCnt > this.params.length) {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (requiredArgsCnt < (this.required - 1)) {\r\n                    return false;\r\n                }\r\n            }\r\n            // check patterns\r\n            len = Math.min(requiredArgsCnt, this.arity);\r\n            for (var i = 0; i < len; i++) {\r\n                if (!this.params[i].name && !this.params[i].variadic) {\r\n                    if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    });\n\n    var MixinCall = function (elements, args, index, currentFileInfo, important) {\r\n        this.selector = new Selector(elements);\r\n        this.arguments = args || [];\r\n        this._index = index;\r\n        this._fileInfo = currentFileInfo;\r\n        this.important = important;\r\n        this.allowRoot = true;\r\n        this.setParent(this.selector, this);\r\n    };\r\n    MixinCall.prototype = Object.assign(new Node(), {\r\n        type: 'MixinCall',\r\n        accept: function (visitor) {\r\n            if (this.selector) {\r\n                this.selector = visitor.visit(this.selector);\r\n            }\r\n            if (this.arguments.length) {\r\n                this.arguments = visitor.visitArray(this.arguments);\r\n            }\r\n        },\r\n        eval: function (context) {\r\n            var mixins;\r\n            var mixin;\r\n            var mixinPath;\r\n            var args = [];\r\n            var arg;\r\n            var argValue;\r\n            var rules = [];\r\n            var match = false;\r\n            var i;\r\n            var m;\r\n            var f;\r\n            var isRecursive;\r\n            var isOneFound;\r\n            var candidates = [];\r\n            var candidate;\r\n            var conditionResult = [];\r\n            var defaultResult;\r\n            var defFalseEitherCase = -1;\r\n            var defNone = 0;\r\n            var defTrue = 1;\r\n            var defFalse = 2;\r\n            var count;\r\n            var originalRuleset;\r\n            var noArgumentsFilter;\r\n            this.selector = this.selector.eval(context);\r\n            function calcDefGroup(mixin, mixinPath) {\r\n                var f, p, namespace;\r\n                for (f = 0; f < 2; f++) {\r\n                    conditionResult[f] = true;\r\n                    defaultFunc.value(f);\r\n                    for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\r\n                        namespace = mixinPath[p];\r\n                        if (namespace.matchCondition) {\r\n                            conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);\r\n                        }\r\n                    }\r\n                    if (mixin.matchCondition) {\r\n                        conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);\r\n                    }\r\n                }\r\n                if (conditionResult[0] || conditionResult[1]) {\r\n                    if (conditionResult[0] != conditionResult[1]) {\r\n                        return conditionResult[1] ?\r\n                            defTrue : defFalse;\r\n                    }\r\n                    return defNone;\r\n                }\r\n                return defFalseEitherCase;\r\n            }\r\n            for (i = 0; i < this.arguments.length; i++) {\r\n                arg = this.arguments[i];\r\n                argValue = arg.value.eval(context);\r\n                if (arg.expand && Array.isArray(argValue.value)) {\r\n                    argValue = argValue.value;\r\n                    for (m = 0; m < argValue.length; m++) {\r\n                        args.push({ value: argValue[m] });\r\n                    }\r\n                }\r\n                else {\r\n                    args.push({ name: arg.name, value: argValue });\r\n                }\r\n            }\r\n            noArgumentsFilter = function (rule) { return rule.matchArgs(null, context); };\r\n            for (i = 0; i < context.frames.length; i++) {\r\n                if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {\r\n                    isOneFound = true;\r\n                    // To make `default()` function independent of definition order we have two \"subpasses\" here.\r\n                    // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\r\n                    // and build candidate list with corresponding flags. Then, when we know all possible matches,\r\n                    // we make a final decision.\r\n                    for (m = 0; m < mixins.length; m++) {\r\n                        mixin = mixins[m].rule;\r\n                        mixinPath = mixins[m].path;\r\n                        isRecursive = false;\r\n                        for (f = 0; f < context.frames.length; f++) {\r\n                            if ((!(mixin instanceof Definition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {\r\n                                isRecursive = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (isRecursive) {\r\n                            continue;\r\n                        }\r\n                        if (mixin.matchArgs(args, context)) {\r\n                            candidate = { mixin: mixin, group: calcDefGroup(mixin, mixinPath) };\r\n                            if (candidate.group !== defFalseEitherCase) {\r\n                                candidates.push(candidate);\r\n                            }\r\n                            match = true;\r\n                        }\r\n                    }\r\n                    defaultFunc.reset();\r\n                    count = [0, 0, 0];\r\n                    for (m = 0; m < candidates.length; m++) {\r\n                        count[candidates[m].group]++;\r\n                    }\r\n                    if (count[defNone] > 0) {\r\n                        defaultResult = defFalse;\r\n                    }\r\n                    else {\r\n                        defaultResult = defTrue;\r\n                        if ((count[defTrue] + count[defFalse]) > 1) {\r\n                            throw { type: 'Runtime',\r\n                                message: \"Ambiguous use of `default()` found when matching for `\" + this.format(args) + \"`\",\r\n                                index: this.getIndex(), filename: this.fileInfo().filename };\r\n                        }\r\n                    }\r\n                    for (m = 0; m < candidates.length; m++) {\r\n                        candidate = candidates[m].group;\r\n                        if ((candidate === defNone) || (candidate === defaultResult)) {\r\n                            try {\r\n                                mixin = candidates[m].mixin;\r\n                                if (!(mixin instanceof Definition)) {\r\n                                    originalRuleset = mixin.originalRuleset || mixin;\r\n                                    mixin = new Definition('', [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());\r\n                                    mixin.originalRuleset = originalRuleset;\r\n                                }\r\n                                var newRules = mixin.evalCall(context, args, this.important).rules;\r\n                                this._setVisibilityToReplacement(newRules);\r\n                                Array.prototype.push.apply(rules, newRules);\r\n                            }\r\n                            catch (e) {\r\n                                throw { message: e.message, index: this.getIndex(), filename: this.fileInfo().filename, stack: e.stack };\r\n                            }\r\n                        }\r\n                    }\r\n                    if (match) {\r\n                        return rules;\r\n                    }\r\n                }\r\n            }\r\n            if (isOneFound) {\r\n                throw { type: 'Runtime',\r\n                    message: \"No matching definition was found for `\" + this.format(args) + \"`\",\r\n                    index: this.getIndex(), filename: this.fileInfo().filename };\r\n            }\r\n            else {\r\n                throw { type: 'Name',\r\n                    message: this.selector.toCSS().trim() + \" is undefined\",\r\n                    index: this.getIndex(), filename: this.fileInfo().filename };\r\n            }\r\n        },\r\n        _setVisibilityToReplacement: function (replacement) {\r\n            var i, rule;\r\n            if (this.blocksVisibility()) {\r\n                for (i = 0; i < replacement.length; i++) {\r\n                    rule = replacement[i];\r\n                    rule.addVisibilityBlock();\r\n                }\r\n            }\r\n        },\r\n        format: function (args) {\r\n            return this.selector.toCSS().trim() + \"(\" + (args ? args.map(function (a) {\r\n                var argValue = '';\r\n                if (a.name) {\r\n                    argValue += a.name + \":\";\r\n                }\r\n                if (a.value.toCSS) {\r\n                    argValue += a.value.toCSS();\r\n                }\r\n                else {\r\n                    argValue += '???';\r\n                }\r\n                return argValue;\r\n            }).join(', ') : '') + \")\";\r\n        }\r\n    });\n\n    var tree = {\r\n        Node: Node,\r\n        Color: Color,\r\n        AtRule: AtRule,\r\n        DetachedRuleset: DetachedRuleset,\r\n        Operation: Operation,\r\n        Dimension: Dimension,\r\n        Unit: Unit,\r\n        Keyword: Keyword,\r\n        Variable: Variable,\r\n        Property: Property,\r\n        Ruleset: Ruleset,\r\n        Element: Element,\r\n        Attribute: Attribute,\r\n        Combinator: Combinator,\r\n        Selector: Selector,\r\n        Quoted: Quoted,\r\n        Expression: Expression,\r\n        Declaration: Declaration,\r\n        Call: Call,\r\n        URL: URL,\r\n        Import: Import,\r\n        Comment: Comment,\r\n        Anonymous: Anonymous,\r\n        Value: Value,\r\n        JavaScript: JavaScript,\r\n        Assignment: Assignment,\r\n        Condition: Condition,\r\n        Paren: Paren,\r\n        Media: Media,\r\n        UnicodeDescriptor: UnicodeDescriptor,\r\n        Negative: Negative,\r\n        Extend: Extend,\r\n        VariableCall: VariableCall,\r\n        NamespaceValue: NamespaceValue,\r\n        mixin: {\r\n            Call: MixinCall,\r\n            Definition: Definition\r\n        }\r\n    };\n\n    var AbstractFileManager = /** @class */ (function () {\r\n        function AbstractFileManager() {\r\n        }\r\n        AbstractFileManager.prototype.getPath = function (filename) {\r\n            var j = filename.lastIndexOf('?');\r\n            if (j > 0) {\r\n                filename = filename.slice(0, j);\r\n            }\r\n            j = filename.lastIndexOf('/');\r\n            if (j < 0) {\r\n                j = filename.lastIndexOf('\\\\');\r\n            }\r\n            if (j < 0) {\r\n                return '';\r\n            }\r\n            return filename.slice(0, j + 1);\r\n        };\r\n        AbstractFileManager.prototype.tryAppendExtension = function (path, ext) {\r\n            return /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext;\r\n        };\r\n        AbstractFileManager.prototype.tryAppendLessExtension = function (path) {\r\n            return this.tryAppendExtension(path, '.less');\r\n        };\r\n        AbstractFileManager.prototype.supportsSync = function () {\r\n            return false;\r\n        };\r\n        AbstractFileManager.prototype.alwaysMakePathsAbsolute = function () {\r\n            return false;\r\n        };\r\n        AbstractFileManager.prototype.isPathAbsolute = function (filename) {\r\n            return (/^(?:[a-z-]+:|\\/|\\\\|#)/i).test(filename);\r\n        };\r\n        // TODO: pull out / replace?\r\n        AbstractFileManager.prototype.join = function (basePath, laterPath) {\r\n            if (!basePath) {\r\n                return laterPath;\r\n            }\r\n            return basePath + laterPath;\r\n        };\r\n        AbstractFileManager.prototype.pathDiff = function (url, baseUrl) {\r\n            // diff between two paths to create a relative path\r\n            var urlParts = this.extractUrlParts(url);\r\n            var baseUrlParts = this.extractUrlParts(baseUrl);\r\n            var i;\r\n            var max;\r\n            var urlDirectories;\r\n            var baseUrlDirectories;\r\n            var diff = '';\r\n            if (urlParts.hostPart !== baseUrlParts.hostPart) {\r\n                return '';\r\n            }\r\n            max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);\r\n            for (i = 0; i < max; i++) {\r\n                if (baseUrlParts.directories[i] !== urlParts.directories[i]) {\r\n                    break;\r\n                }\r\n            }\r\n            baseUrlDirectories = baseUrlParts.directories.slice(i);\r\n            urlDirectories = urlParts.directories.slice(i);\r\n            for (i = 0; i < baseUrlDirectories.length - 1; i++) {\r\n                diff += '../';\r\n            }\r\n            for (i = 0; i < urlDirectories.length - 1; i++) {\r\n                diff += urlDirectories[i] + \"/\";\r\n            }\r\n            return diff;\r\n        };\r\n        // helper function, not part of API\r\n        AbstractFileManager.prototype.extractUrlParts = function (url, baseUrl) {\r\n            // urlParts[1] = protocol://hostname/ OR /\r\n            // urlParts[2] = / if path relative to host base\r\n            // urlParts[3] = directories\r\n            // urlParts[4] = filename\r\n            // urlParts[5] = parameters\r\n            var urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i;\r\n            var urlParts = url.match(urlPartsRegex);\r\n            var returner = {};\r\n            var rawDirectories = [];\r\n            var directories = [];\r\n            var i;\r\n            var baseUrlParts;\r\n            if (!urlParts) {\r\n                throw new Error(\"Could not parse sheet href - '\" + url + \"'\");\r\n            }\r\n            // Stylesheets in IE don't always return the full path\r\n            if (baseUrl && (!urlParts[1] || urlParts[2])) {\r\n                baseUrlParts = baseUrl.match(urlPartsRegex);\r\n                if (!baseUrlParts) {\r\n                    throw new Error(\"Could not parse page url - '\" + baseUrl + \"'\");\r\n                }\r\n                urlParts[1] = urlParts[1] || baseUrlParts[1] || '';\r\n                if (!urlParts[2]) {\r\n                    urlParts[3] = baseUrlParts[3] + urlParts[3];\r\n                }\r\n            }\r\n            if (urlParts[3]) {\r\n                rawDirectories = urlParts[3].replace(/\\\\/g, '/').split('/');\r\n                // collapse '..' and skip '.'\r\n                for (i = 0; i < rawDirectories.length; i++) {\r\n                    if (rawDirectories[i] === '..') {\r\n                        directories.pop();\r\n                    }\r\n                    else if (rawDirectories[i] !== '.') {\r\n                        directories.push(rawDirectories[i]);\r\n                    }\r\n                }\r\n            }\r\n            returner.hostPart = urlParts[1];\r\n            returner.directories = directories;\r\n            returner.rawPath = (urlParts[1] || '') + rawDirectories.join('/');\r\n            returner.path = (urlParts[1] || '') + directories.join('/');\r\n            returner.filename = urlParts[4];\r\n            returner.fileUrl = returner.path + (urlParts[4] || '');\r\n            returner.url = returner.fileUrl + (urlParts[5] || '');\r\n            return returner;\r\n        };\r\n        return AbstractFileManager;\r\n    }());\n\n    var AbstractPluginLoader = /** @class */ (function () {\r\n        function AbstractPluginLoader() {\r\n            // Implemented by Node.js plugin loader\r\n            this.require = function () {\r\n                return null;\r\n            };\r\n        }\r\n        AbstractPluginLoader.prototype.evalPlugin = function (contents, context, imports, pluginOptions, fileInfo) {\r\n            var loader, registry, pluginObj, localModule, pluginManager, filename, result;\r\n            pluginManager = context.pluginManager;\r\n            if (fileInfo) {\r\n                if (typeof fileInfo === 'string') {\r\n                    filename = fileInfo;\r\n                }\r\n                else {\r\n                    filename = fileInfo.filename;\r\n                }\r\n            }\r\n            var shortname = (new this.less.FileManager()).extractUrlParts(filename).filename;\r\n            if (filename) {\r\n                pluginObj = pluginManager.get(filename);\r\n                if (pluginObj) {\r\n                    result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\r\n                    if (result) {\r\n                        return result;\r\n                    }\r\n                    try {\r\n                        if (pluginObj.use) {\r\n                            pluginObj.use.call(this.context, pluginObj);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        e.message = e.message || 'Error during @plugin call';\r\n                        return new LessError(e, imports, filename);\r\n                    }\r\n                    return pluginObj;\r\n                }\r\n            }\r\n            localModule = {\r\n                exports: {},\r\n                pluginManager: pluginManager,\r\n                fileInfo: fileInfo\r\n            };\r\n            registry = functionRegistry.create();\r\n            var registerPlugin = function (obj) {\r\n                pluginObj = obj;\r\n            };\r\n            try {\r\n                loader = new Function('module', 'require', 'registerPlugin', 'functions', 'tree', 'less', 'fileInfo', contents);\r\n                loader(localModule, this.require(filename), registerPlugin, registry, this.less.tree, this.less, fileInfo);\r\n            }\r\n            catch (e) {\r\n                return new LessError(e, imports, filename);\r\n            }\r\n            if (!pluginObj) {\r\n                pluginObj = localModule.exports;\r\n            }\r\n            pluginObj = this.validatePlugin(pluginObj, filename, shortname);\r\n            if (pluginObj instanceof LessError) {\r\n                return pluginObj;\r\n            }\r\n            if (pluginObj) {\r\n                pluginObj.imports = imports;\r\n                pluginObj.filename = filename;\r\n                // For < 3.x (or unspecified minVersion) - setOptions() before install()\r\n                if (!pluginObj.minVersion || this.compareVersion('3.0.0', pluginObj.minVersion) < 0) {\r\n                    result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\r\n                    if (result) {\r\n                        return result;\r\n                    }\r\n                }\r\n                // Run on first load\r\n                pluginManager.addPlugin(pluginObj, fileInfo.filename, registry);\r\n                pluginObj.functions = registry.getLocalFunctions();\r\n                // Need to call setOptions again because the pluginObj might have functions\r\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n                // Run every @plugin call\r\n                try {\r\n                    if (pluginObj.use) {\r\n                        pluginObj.use.call(this.context, pluginObj);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    e.message = e.message || 'Error during @plugin call';\r\n                    return new LessError(e, imports, filename);\r\n                }\r\n            }\r\n            else {\r\n                return new LessError({ message: 'Not a valid plugin' }, imports, filename);\r\n            }\r\n            return pluginObj;\r\n        };\r\n        AbstractPluginLoader.prototype.trySetOptions = function (plugin, filename, name, options) {\r\n            if (options && !plugin.setOptions) {\r\n                return new LessError({\r\n                    message: \"Options have been provided but the plugin \" + name + \" does not support any options.\"\r\n                });\r\n            }\r\n            try {\r\n                plugin.setOptions && plugin.setOptions(options);\r\n            }\r\n            catch (e) {\r\n                return new LessError(e);\r\n            }\r\n        };\r\n        AbstractPluginLoader.prototype.validatePlugin = function (plugin, filename, name) {\r\n            if (plugin) {\r\n                // support plugins being a function\r\n                // so that the plugin can be more usable programmatically\r\n                if (typeof plugin === 'function') {\r\n                    plugin = new plugin();\r\n                }\r\n                if (plugin.minVersion) {\r\n                    if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {\r\n                        return new LessError({\r\n                            message: \"Plugin \" + name + \" requires version \" + this.versionToString(plugin.minVersion)\r\n                        });\r\n                    }\r\n                }\r\n                return plugin;\r\n            }\r\n            return null;\r\n        };\r\n        AbstractPluginLoader.prototype.compareVersion = function (aVersion, bVersion) {\r\n            if (typeof aVersion === 'string') {\r\n                aVersion = aVersion.match(/^(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\r\n                aVersion.shift();\r\n            }\r\n            for (var i = 0; i < aVersion.length; i++) {\r\n                if (aVersion[i] !== bVersion[i]) {\r\n                    return parseInt(aVersion[i]) > parseInt(bVersion[i]) ? -1 : 1;\r\n                }\r\n            }\r\n            return 0;\r\n        };\r\n        AbstractPluginLoader.prototype.versionToString = function (version) {\r\n            var versionString = '';\r\n            for (var i = 0; i < version.length; i++) {\r\n                versionString += (versionString ? '.' : '') + version[i];\r\n            }\r\n            return versionString;\r\n        };\r\n        AbstractPluginLoader.prototype.printUsage = function (plugins) {\r\n            for (var i = 0; i < plugins.length; i++) {\r\n                var plugin = plugins[i];\r\n                if (plugin.printUsage) {\r\n                    plugin.printUsage();\r\n                }\r\n            }\r\n        };\r\n        return AbstractPluginLoader;\r\n    }());\n\n    var _visitArgs = { visitDeeper: true };\r\n    var _hasIndexed = false;\r\n    function _noop(node) {\r\n        return node;\r\n    }\r\n    function indexNodeTypes(parent, ticker) {\r\n        // add .typeIndex to tree node types for lookup table\r\n        var key, child;\r\n        for (key in parent) {\r\n            /* eslint guard-for-in: 0 */\r\n            child = parent[key];\r\n            switch (typeof child) {\r\n                case 'function':\r\n                    // ignore bound functions directly on tree which do not have a prototype\r\n                    // or aren't nodes\r\n                    if (child.prototype && child.prototype.type) {\r\n                        child.prototype.typeIndex = ticker++;\r\n                    }\r\n                    break;\r\n                case 'object':\r\n                    ticker = indexNodeTypes(child, ticker);\r\n                    break;\r\n            }\r\n        }\r\n        return ticker;\r\n    }\r\n    var Visitor = /** @class */ (function () {\r\n        function Visitor(implementation) {\r\n            this._implementation = implementation;\r\n            this._visitInCache = {};\r\n            this._visitOutCache = {};\r\n            if (!_hasIndexed) {\r\n                indexNodeTypes(tree, 1);\r\n                _hasIndexed = true;\r\n            }\r\n        }\r\n        Visitor.prototype.visit = function (node) {\r\n            if (!node) {\r\n                return node;\r\n            }\r\n            var nodeTypeIndex = node.typeIndex;\r\n            if (!nodeTypeIndex) {\r\n                // MixinCall args aren't a node type?\r\n                if (node.value && node.value.typeIndex) {\r\n                    this.visit(node.value);\r\n                }\r\n                return node;\r\n            }\r\n            var impl = this._implementation;\r\n            var func = this._visitInCache[nodeTypeIndex];\r\n            var funcOut = this._visitOutCache[nodeTypeIndex];\r\n            var visitArgs = _visitArgs;\r\n            var fnName;\r\n            visitArgs.visitDeeper = true;\r\n            if (!func) {\r\n                fnName = \"visit\" + node.type;\r\n                func = impl[fnName] || _noop;\r\n                funcOut = impl[fnName + \"Out\"] || _noop;\r\n                this._visitInCache[nodeTypeIndex] = func;\r\n                this._visitOutCache[nodeTypeIndex] = funcOut;\r\n            }\r\n            if (func !== _noop) {\r\n                var newNode = func.call(impl, node, visitArgs);\r\n                if (node && impl.isReplacing) {\r\n                    node = newNode;\r\n                }\r\n            }\r\n            if (visitArgs.visitDeeper && node) {\r\n                if (node.length) {\r\n                    for (var i = 0, cnt = node.length; i < cnt; i++) {\r\n                        if (node[i].accept) {\r\n                            node[i].accept(this);\r\n                        }\r\n                    }\r\n                }\r\n                else if (node.accept) {\r\n                    node.accept(this);\r\n                }\r\n            }\r\n            if (funcOut != _noop) {\r\n                funcOut.call(impl, node);\r\n            }\r\n            return node;\r\n        };\r\n        Visitor.prototype.visitArray = function (nodes, nonReplacing) {\r\n            if (!nodes) {\r\n                return nodes;\r\n            }\r\n            var cnt = nodes.length;\r\n            var i;\r\n            // Non-replacing\r\n            if (nonReplacing || !this._implementation.isReplacing) {\r\n                for (i = 0; i < cnt; i++) {\r\n                    this.visit(nodes[i]);\r\n                }\r\n                return nodes;\r\n            }\r\n            // Replacing\r\n            var out = [];\r\n            for (i = 0; i < cnt; i++) {\r\n                var evald = this.visit(nodes[i]);\r\n                if (evald === undefined) {\r\n                    continue;\r\n                }\r\n                if (!evald.splice) {\r\n                    out.push(evald);\r\n                }\r\n                else if (evald.length) {\r\n                    this.flatten(evald, out);\r\n                }\r\n            }\r\n            return out;\r\n        };\r\n        Visitor.prototype.flatten = function (arr, out) {\r\n            if (!out) {\r\n                out = [];\r\n            }\r\n            var cnt, i, item, nestedCnt, j, nestedItem;\r\n            for (i = 0, cnt = arr.length; i < cnt; i++) {\r\n                item = arr[i];\r\n                if (item === undefined) {\r\n                    continue;\r\n                }\r\n                if (!item.splice) {\r\n                    out.push(item);\r\n                    continue;\r\n                }\r\n                for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\r\n                    nestedItem = item[j];\r\n                    if (nestedItem === undefined) {\r\n                        continue;\r\n                    }\r\n                    if (!nestedItem.splice) {\r\n                        out.push(nestedItem);\r\n                    }\r\n                    else if (nestedItem.length) {\r\n                        this.flatten(nestedItem, out);\r\n                    }\r\n                }\r\n            }\r\n            return out;\r\n        };\r\n        return Visitor;\r\n    }());\n\n    var ImportSequencer = /** @class */ (function () {\r\n        function ImportSequencer(onSequencerEmpty) {\r\n            this.imports = [];\r\n            this.variableImports = [];\r\n            this._onSequencerEmpty = onSequencerEmpty;\r\n            this._currentDepth = 0;\r\n        }\r\n        ImportSequencer.prototype.addImport = function (callback) {\r\n            var importSequencer = this, importItem = {\r\n                callback: callback,\r\n                args: null,\r\n                isReady: false\r\n            };\r\n            this.imports.push(importItem);\r\n            return function () {\r\n                importItem.args = Array.prototype.slice.call(arguments, 0);\r\n                importItem.isReady = true;\r\n                importSequencer.tryRun();\r\n            };\r\n        };\r\n        ImportSequencer.prototype.addVariableImport = function (callback) {\r\n            this.variableImports.push(callback);\r\n        };\r\n        ImportSequencer.prototype.tryRun = function () {\r\n            this._currentDepth++;\r\n            try {\r\n                while (true) {\r\n                    while (this.imports.length > 0) {\r\n                        var importItem = this.imports[0];\r\n                        if (!importItem.isReady) {\r\n                            return;\r\n                        }\r\n                        this.imports = this.imports.slice(1);\r\n                        importItem.callback.apply(null, importItem.args);\r\n                    }\r\n                    if (this.variableImports.length === 0) {\r\n                        break;\r\n                    }\r\n                    var variableImport = this.variableImports[0];\r\n                    this.variableImports = this.variableImports.slice(1);\r\n                    variableImport();\r\n                }\r\n            }\r\n            finally {\r\n                this._currentDepth--;\r\n            }\r\n            if (this._currentDepth === 0 && this._onSequencerEmpty) {\r\n                this._onSequencerEmpty();\r\n            }\r\n        };\r\n        return ImportSequencer;\r\n    }());\n\n    var ImportVisitor = function (importer, finish) {\r\n        this._visitor = new Visitor(this);\r\n        this._importer = importer;\r\n        this._finish = finish;\r\n        this.context = new contexts.Eval();\r\n        this.importCount = 0;\r\n        this.onceFileDetectionMap = {};\r\n        this.recursionDetector = {};\r\n        this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));\r\n    };\r\n    ImportVisitor.prototype = {\r\n        isReplacing: false,\r\n        run: function (root) {\r\n            try {\r\n                // process the contents\r\n                this._visitor.visit(root);\r\n            }\r\n            catch (e) {\r\n                this.error = e;\r\n            }\r\n            this.isFinished = true;\r\n            this._sequencer.tryRun();\r\n        },\r\n        _onSequencerEmpty: function () {\r\n            if (!this.isFinished) {\r\n                return;\r\n            }\r\n            this._finish(this.error);\r\n        },\r\n        visitImport: function (importNode, visitArgs) {\r\n            var inlineCSS = importNode.options.inline;\r\n            if (!importNode.css || inlineCSS) {\r\n                var context = new contexts.Eval(this.context, copyArray(this.context.frames));\r\n                var importParent = context.frames[0];\r\n                this.importCount++;\r\n                if (importNode.isVariableImport()) {\r\n                    this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));\r\n                }\r\n                else {\r\n                    this.processImportNode(importNode, context, importParent);\r\n                }\r\n            }\r\n            visitArgs.visitDeeper = false;\r\n        },\r\n        processImportNode: function (importNode, context, importParent) {\r\n            var evaldImportNode;\r\n            var inlineCSS = importNode.options.inline;\r\n            try {\r\n                evaldImportNode = importNode.evalForImport(context);\r\n            }\r\n            catch (e) {\r\n                if (!e.filename) {\r\n                    e.index = importNode.getIndex();\r\n                    e.filename = importNode.fileInfo().filename;\r\n                }\r\n                // attempt to eval properly and treat as css\r\n                importNode.css = true;\r\n                // if that fails, this error will be thrown\r\n                importNode.error = e;\r\n            }\r\n            if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\r\n                if (evaldImportNode.options.multiple) {\r\n                    context.importMultiple = true;\r\n                }\r\n                // try appending if we haven't determined if it is css or not\r\n                var tryAppendLessExtension = evaldImportNode.css === undefined;\r\n                for (var i = 0; i < importParent.rules.length; i++) {\r\n                    if (importParent.rules[i] === importNode) {\r\n                        importParent.rules[i] = evaldImportNode;\r\n                        break;\r\n                    }\r\n                }\r\n                var onImported = this.onImported.bind(this, evaldImportNode, context), sequencedOnImported = this._sequencer.addImport(onImported);\r\n                this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.fileInfo(), evaldImportNode.options, sequencedOnImported);\r\n            }\r\n            else {\r\n                this.importCount--;\r\n                if (this.isFinished) {\r\n                    this._sequencer.tryRun();\r\n                }\r\n            }\r\n        },\r\n        onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {\r\n            if (e) {\r\n                if (!e.filename) {\r\n                    e.index = importNode.getIndex();\r\n                    e.filename = importNode.fileInfo().filename;\r\n                }\r\n                this.error = e;\r\n            }\r\n            var importVisitor = this, inlineCSS = importNode.options.inline, isPlugin = importNode.options.isPlugin, isOptional = importNode.options.optional, duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;\r\n            if (!context.importMultiple) {\r\n                if (duplicateImport) {\r\n                    importNode.skip = true;\r\n                }\r\n                else {\r\n                    importNode.skip = function () {\r\n                        if (fullPath in importVisitor.onceFileDetectionMap) {\r\n                            return true;\r\n                        }\r\n                        importVisitor.onceFileDetectionMap[fullPath] = true;\r\n                        return false;\r\n                    };\r\n                }\r\n            }\r\n            if (!fullPath && isOptional) {\r\n                importNode.skip = true;\r\n            }\r\n            if (root) {\r\n                importNode.root = root;\r\n                importNode.importedFilename = fullPath;\r\n                if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {\r\n                    importVisitor.recursionDetector[fullPath] = true;\r\n                    var oldContext = this.context;\r\n                    this.context = context;\r\n                    try {\r\n                        this._visitor.visit(root);\r\n                    }\r\n                    catch (e) {\r\n                        this.error = e;\r\n                    }\r\n                    this.context = oldContext;\r\n                }\r\n            }\r\n            importVisitor.importCount--;\r\n            if (importVisitor.isFinished) {\r\n                importVisitor._sequencer.tryRun();\r\n            }\r\n        },\r\n        visitDeclaration: function (declNode, visitArgs) {\r\n            if (declNode.value.type === 'DetachedRuleset') {\r\n                this.context.frames.unshift(declNode);\r\n            }\r\n            else {\r\n                visitArgs.visitDeeper = false;\r\n            }\r\n        },\r\n        visitDeclarationOut: function (declNode) {\r\n            if (declNode.value.type === 'DetachedRuleset') {\r\n                this.context.frames.shift();\r\n            }\r\n        },\r\n        visitAtRule: function (atRuleNode, visitArgs) {\r\n            this.context.frames.unshift(atRuleNode);\r\n        },\r\n        visitAtRuleOut: function (atRuleNode) {\r\n            this.context.frames.shift();\r\n        },\r\n        visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\r\n            this.context.frames.unshift(mixinDefinitionNode);\r\n        },\r\n        visitMixinDefinitionOut: function (mixinDefinitionNode) {\r\n            this.context.frames.shift();\r\n        },\r\n        visitRuleset: function (rulesetNode, visitArgs) {\r\n            this.context.frames.unshift(rulesetNode);\r\n        },\r\n        visitRulesetOut: function (rulesetNode) {\r\n            this.context.frames.shift();\r\n        },\r\n        visitMedia: function (mediaNode, visitArgs) {\r\n            this.context.frames.unshift(mediaNode.rules[0]);\r\n        },\r\n        visitMediaOut: function (mediaNode) {\r\n            this.context.frames.shift();\r\n        }\r\n    };\n\n    var SetTreeVisibilityVisitor = /** @class */ (function () {\r\n        function SetTreeVisibilityVisitor(visible) {\r\n            this.visible = visible;\r\n        }\r\n        SetTreeVisibilityVisitor.prototype.run = function (root) {\r\n            this.visit(root);\r\n        };\r\n        SetTreeVisibilityVisitor.prototype.visitArray = function (nodes) {\r\n            if (!nodes) {\r\n                return nodes;\r\n            }\r\n            var cnt = nodes.length;\r\n            var i;\r\n            for (i = 0; i < cnt; i++) {\r\n                this.visit(nodes[i]);\r\n            }\r\n            return nodes;\r\n        };\r\n        SetTreeVisibilityVisitor.prototype.visit = function (node) {\r\n            if (!node) {\r\n                return node;\r\n            }\r\n            if (node.constructor === Array) {\r\n                return this.visitArray(node);\r\n            }\r\n            if (!node.blocksVisibility || node.blocksVisibility()) {\r\n                return node;\r\n            }\r\n            if (this.visible) {\r\n                node.ensureVisibility();\r\n            }\r\n            else {\r\n                node.ensureInvisibility();\r\n            }\r\n            node.accept(this);\r\n            return node;\r\n        };\r\n        return SetTreeVisibilityVisitor;\r\n    }());\n\n    /* jshint loopfunc:true */\r\n    var ExtendFinderVisitor = /** @class */ (function () {\r\n        function ExtendFinderVisitor() {\r\n            this._visitor = new Visitor(this);\r\n            this.contexts = [];\r\n            this.allExtendsStack = [[]];\r\n        }\r\n        ExtendFinderVisitor.prototype.run = function (root) {\r\n            root = this._visitor.visit(root);\r\n            root.allExtends = this.allExtendsStack[0];\r\n            return root;\r\n        };\r\n        ExtendFinderVisitor.prototype.visitDeclaration = function (declNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        ExtendFinderVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        ExtendFinderVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\r\n            if (rulesetNode.root) {\r\n                return;\r\n            }\r\n            var i;\r\n            var j;\r\n            var extend;\r\n            var allSelectorsExtendList = [];\r\n            var extendList;\r\n            // get &:extend(.a); rules which apply to all selectors in this ruleset\r\n            var rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;\r\n            for (i = 0; i < ruleCnt; i++) {\r\n                if (rulesetNode.rules[i] instanceof tree.Extend) {\r\n                    allSelectorsExtendList.push(rules[i]);\r\n                    rulesetNode.extendOnEveryPath = true;\r\n                }\r\n            }\r\n            // now find every selector and apply the extends that apply to all extends\r\n            // and the ones which apply to an individual extend\r\n            var paths = rulesetNode.paths;\r\n            for (i = 0; i < paths.length; i++) {\r\n                var selectorPath = paths[i], selector = selectorPath[selectorPath.length - 1], selExtendList = selector.extendList;\r\n                extendList = selExtendList ? copyArray(selExtendList).concat(allSelectorsExtendList)\r\n                    : allSelectorsExtendList;\r\n                if (extendList) {\r\n                    extendList = extendList.map(function (allSelectorsExtend) {\r\n                        return allSelectorsExtend.clone();\r\n                    });\r\n                }\r\n                for (j = 0; j < extendList.length; j++) {\r\n                    this.foundExtends = true;\r\n                    extend = extendList[j];\r\n                    extend.findSelfSelectors(selectorPath);\r\n                    extend.ruleset = rulesetNode;\r\n                    if (j === 0) {\r\n                        extend.firstExtendOnThisSelectorPath = true;\r\n                    }\r\n                    this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\r\n                }\r\n            }\r\n            this.contexts.push(rulesetNode.selectors);\r\n        };\r\n        ExtendFinderVisitor.prototype.visitRulesetOut = function (rulesetNode) {\r\n            if (!rulesetNode.root) {\r\n                this.contexts.length = this.contexts.length - 1;\r\n            }\r\n        };\r\n        ExtendFinderVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\r\n            mediaNode.allExtends = [];\r\n            this.allExtendsStack.push(mediaNode.allExtends);\r\n        };\r\n        ExtendFinderVisitor.prototype.visitMediaOut = function (mediaNode) {\r\n            this.allExtendsStack.length = this.allExtendsStack.length - 1;\r\n        };\r\n        ExtendFinderVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\r\n            atRuleNode.allExtends = [];\r\n            this.allExtendsStack.push(atRuleNode.allExtends);\r\n        };\r\n        ExtendFinderVisitor.prototype.visitAtRuleOut = function (atRuleNode) {\r\n            this.allExtendsStack.length = this.allExtendsStack.length - 1;\r\n        };\r\n        return ExtendFinderVisitor;\r\n    }());\r\n    var ProcessExtendsVisitor = /** @class */ (function () {\r\n        function ProcessExtendsVisitor() {\r\n            this._visitor = new Visitor(this);\r\n        }\r\n        ProcessExtendsVisitor.prototype.run = function (root) {\r\n            var extendFinder = new ExtendFinderVisitor();\r\n            this.extendIndices = {};\r\n            extendFinder.run(root);\r\n            if (!extendFinder.foundExtends) {\r\n                return root;\r\n            }\r\n            root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\r\n            this.allExtendsStack = [root.allExtends];\r\n            var newRoot = this._visitor.visit(root);\r\n            this.checkExtendsForNonMatched(root.allExtends);\r\n            return newRoot;\r\n        };\r\n        ProcessExtendsVisitor.prototype.checkExtendsForNonMatched = function (extendList) {\r\n            var indices = this.extendIndices;\r\n            extendList.filter(function (extend) {\r\n                return !extend.hasFoundMatches && extend.parent_ids.length == 1;\r\n            }).forEach(function (extend) {\r\n                var selector = '_unknown_';\r\n                try {\r\n                    selector = extend.selector.toCSS({});\r\n                }\r\n                catch (_) { }\r\n                if (!indices[extend.index + \" \" + selector]) {\r\n                    indices[extend.index + \" \" + selector] = true;\r\n                    logger$1.warn(\"extend '\" + selector + \"' has no matches\");\r\n                }\r\n            });\r\n        };\r\n        ProcessExtendsVisitor.prototype.doExtendChaining = function (extendsList, extendsListTarget, iterationCount) {\r\n            //\r\n            // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\r\n            // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\r\n            // this means this new extend can then go and alter other extends\r\n            //\r\n            // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\r\n            // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\r\n            // processed if we look at each selector at a time, as is done in visitRuleset\r\n            var extendIndex;\r\n            var targetExtendIndex;\r\n            var matches;\r\n            var extendsToAdd = [];\r\n            var newSelector;\r\n            var extendVisitor = this;\r\n            var selectorPath;\r\n            var extend;\r\n            var targetExtend;\r\n            var newExtend;\r\n            iterationCount = iterationCount || 0;\r\n            // loop through comparing every extend with every target extend.\r\n            // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\r\n            // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\r\n            // and the second is the target.\r\n            // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\r\n            // case when processing media queries\r\n            for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\r\n                for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\r\n                    extend = extendsList[extendIndex];\r\n                    targetExtend = extendsListTarget[targetExtendIndex];\r\n                    // look for circular references\r\n                    if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {\r\n                        continue;\r\n                    }\r\n                    // find a match in the target extends self selector (the bit before :extend)\r\n                    selectorPath = [targetExtend.selfSelectors[0]];\r\n                    matches = extendVisitor.findMatch(extend, selectorPath);\r\n                    if (matches.length) {\r\n                        extend.hasFoundMatches = true;\r\n                        // we found a match, so for each self selector..\r\n                        extend.selfSelectors.forEach(function (selfSelector) {\r\n                            var info = targetExtend.visibilityInfo();\r\n                            // process the extend as usual\r\n                            newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\r\n                            // but now we create a new extend from it\r\n                            newExtend = new (tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\r\n                            newExtend.selfSelectors = newSelector;\r\n                            // add the extend onto the list of extends for that selector\r\n                            newSelector[newSelector.length - 1].extendList = [newExtend];\r\n                            // record that we need to add it.\r\n                            extendsToAdd.push(newExtend);\r\n                            newExtend.ruleset = targetExtend.ruleset;\r\n                            // remember its parents for circular references\r\n                            newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\r\n                            // only process the selector once.. if we have :extend(.a,.b) then multiple\r\n                            // extends will look at the same selector path, so when extending\r\n                            // we know that any others will be duplicates in terms of what is added to the css\r\n                            if (targetExtend.firstExtendOnThisSelectorPath) {\r\n                                newExtend.firstExtendOnThisSelectorPath = true;\r\n                                targetExtend.ruleset.paths.push(newSelector);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            if (extendsToAdd.length) {\r\n                // try to detect circular references to stop a stack overflow.\r\n                // may no longer be needed.\r\n                this.extendChainCount++;\r\n                if (iterationCount > 100) {\r\n                    var selectorOne = '{unable to calculate}';\r\n                    var selectorTwo = '{unable to calculate}';\r\n                    try {\r\n                        selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\r\n                        selectorTwo = extendsToAdd[0].selector.toCSS();\r\n                    }\r\n                    catch (e) { }\r\n                    throw { message: \"extend circular reference detected. One of the circular extends is currently:\" + selectorOne + \":extend(\" + selectorTwo + \")\" };\r\n                }\r\n                // now process the new extends on the existing rules so that we can handle a extending b extending c extending\r\n                // d extending e...\r\n                return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\r\n            }\r\n            else {\r\n                return extendsToAdd;\r\n            }\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitDeclaration = function (ruleNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitSelector = function (selectorNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\r\n            if (rulesetNode.root) {\r\n                return;\r\n            }\r\n            var matches;\r\n            var pathIndex;\r\n            var extendIndex;\r\n            var allExtends = this.allExtendsStack[this.allExtendsStack.length - 1];\r\n            var selectorsToAdd = [];\r\n            var extendVisitor = this;\r\n            var selectorPath;\r\n            // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\r\n            for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\r\n                for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\r\n                    selectorPath = rulesetNode.paths[pathIndex];\r\n                    // extending extends happens initially, before the main pass\r\n                    if (rulesetNode.extendOnEveryPath) {\r\n                        continue;\r\n                    }\r\n                    var extendList = selectorPath[selectorPath.length - 1].extendList;\r\n                    if (extendList && extendList.length) {\r\n                        continue;\r\n                    }\r\n                    matches = this.findMatch(allExtends[extendIndex], selectorPath);\r\n                    if (matches.length) {\r\n                        allExtends[extendIndex].hasFoundMatches = true;\r\n                        allExtends[extendIndex].selfSelectors.forEach(function (selfSelector) {\r\n                            var extendedSelectors;\r\n                            extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\r\n                            selectorsToAdd.push(extendedSelectors);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\r\n        };\r\n        ProcessExtendsVisitor.prototype.findMatch = function (extend, haystackSelectorPath) {\r\n            //\r\n            // look through the haystack selector path to try and find the needle - extend.selector\r\n            // returns an array of selector matches that can then be replaced\r\n            //\r\n            var haystackSelectorIndex;\r\n            var hackstackSelector;\r\n            var hackstackElementIndex;\r\n            var haystackElement;\r\n            var targetCombinator;\r\n            var i;\r\n            var extendVisitor = this;\r\n            var needleElements = extend.selector.elements;\r\n            var potentialMatches = [];\r\n            var potentialMatch;\r\n            var matches = [];\r\n            // loop through the haystack elements\r\n            for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\r\n                hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\r\n                for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\r\n                    haystackElement = hackstackSelector.elements[hackstackElementIndex];\r\n                    // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\r\n                    if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\r\n                        potentialMatches.push({ pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\r\n                            initialCombinator: haystackElement.combinator });\r\n                    }\r\n                    for (i = 0; i < potentialMatches.length; i++) {\r\n                        potentialMatch = potentialMatches[i];\r\n                        // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\r\n                        // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\r\n                        // work out what the resulting combinator will be\r\n                        targetCombinator = haystackElement.combinator.value;\r\n                        if (targetCombinator === '' && hackstackElementIndex === 0) {\r\n                            targetCombinator = ' ';\r\n                        }\r\n                        // if we don't match, null our match to indicate failure\r\n                        if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\r\n                            (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\r\n                            potentialMatch = null;\r\n                        }\r\n                        else {\r\n                            potentialMatch.matched++;\r\n                        }\r\n                        // if we are still valid and have finished, test whether we have elements after and whether these are allowed\r\n                        if (potentialMatch) {\r\n                            potentialMatch.finished = potentialMatch.matched === needleElements.length;\r\n                            if (potentialMatch.finished &&\r\n                                (!extend.allowAfter &&\r\n                                    (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\r\n                                potentialMatch = null;\r\n                            }\r\n                        }\r\n                        // if null we remove, if not, we are still valid, so either push as a valid match or continue\r\n                        if (potentialMatch) {\r\n                            if (potentialMatch.finished) {\r\n                                potentialMatch.length = needleElements.length;\r\n                                potentialMatch.endPathIndex = haystackSelectorIndex;\r\n                                potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\r\n                                potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\r\n                                matches.push(potentialMatch);\r\n                            }\r\n                        }\r\n                        else {\r\n                            potentialMatches.splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return matches;\r\n        };\r\n        ProcessExtendsVisitor.prototype.isElementValuesEqual = function (elementValue1, elementValue2) {\r\n            if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\r\n                return elementValue1 === elementValue2;\r\n            }\r\n            if (elementValue1 instanceof tree.Attribute) {\r\n                if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\r\n                    return false;\r\n                }\r\n                if (!elementValue1.value || !elementValue2.value) {\r\n                    if (elementValue1.value || elementValue2.value) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n                elementValue1 = elementValue1.value.value || elementValue1.value;\r\n                elementValue2 = elementValue2.value.value || elementValue2.value;\r\n                return elementValue1 === elementValue2;\r\n            }\r\n            elementValue1 = elementValue1.value;\r\n            elementValue2 = elementValue2.value;\r\n            if (elementValue1 instanceof tree.Selector) {\r\n                if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\r\n                    return false;\r\n                }\r\n                for (var i = 0; i < elementValue1.elements.length; i++) {\r\n                    if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\r\n                        if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        ProcessExtendsVisitor.prototype.extendSelector = function (matches, selectorPath, replacementSelector, isVisible) {\r\n            // for a set of matches, replace each match with the replacement selector\r\n            var currentSelectorPathIndex = 0, currentSelectorPathElementIndex = 0, path = [], matchIndex, selector, firstElement, match, newElements;\r\n            for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\r\n                match = matches[matchIndex];\r\n                selector = selectorPath[match.pathIndex];\r\n                firstElement = new tree.Element(match.initialCombinator, replacementSelector.elements[0].value, replacementSelector.elements[0].isVariable, replacementSelector.elements[0].getIndex(), replacementSelector.elements[0].fileInfo());\r\n                if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\r\n                    path[path.length - 1].elements = path[path.length - 1]\r\n                        .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\r\n                    currentSelectorPathElementIndex = 0;\r\n                    currentSelectorPathIndex++;\r\n                }\r\n                newElements = selector.elements\r\n                    .slice(currentSelectorPathElementIndex, match.index)\r\n                    .concat([firstElement])\r\n                    .concat(replacementSelector.elements.slice(1));\r\n                if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\r\n                    path[path.length - 1].elements =\r\n                        path[path.length - 1].elements.concat(newElements);\r\n                }\r\n                else {\r\n                    path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\r\n                    path.push(new tree.Selector(newElements));\r\n                }\r\n                currentSelectorPathIndex = match.endPathIndex;\r\n                currentSelectorPathElementIndex = match.endPathElementIndex;\r\n                if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\r\n                    currentSelectorPathElementIndex = 0;\r\n                    currentSelectorPathIndex++;\r\n                }\r\n            }\r\n            if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\r\n                path[path.length - 1].elements = path[path.length - 1]\r\n                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\r\n                currentSelectorPathIndex++;\r\n            }\r\n            path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\r\n            path = path.map(function (currentValue) {\r\n                // we can re-use elements here, because the visibility property matters only for selectors\r\n                var derived = currentValue.createDerived(currentValue.elements);\r\n                if (isVisible) {\r\n                    derived.ensureVisibility();\r\n                }\r\n                else {\r\n                    derived.ensureInvisibility();\r\n                }\r\n                return derived;\r\n            });\r\n            return path;\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\r\n            var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\r\n            newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\r\n            this.allExtendsStack.push(newAllExtends);\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitMediaOut = function (mediaNode) {\r\n            var lastIndex = this.allExtendsStack.length - 1;\r\n            this.allExtendsStack.length = lastIndex;\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\r\n            var newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\r\n            newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\r\n            this.allExtendsStack.push(newAllExtends);\r\n        };\r\n        ProcessExtendsVisitor.prototype.visitAtRuleOut = function (atRuleNode) {\r\n            var lastIndex = this.allExtendsStack.length - 1;\r\n            this.allExtendsStack.length = lastIndex;\r\n        };\r\n        return ProcessExtendsVisitor;\r\n    }());\n\n    var JoinSelectorVisitor = /** @class */ (function () {\r\n        function JoinSelectorVisitor() {\r\n            this.contexts = [[]];\r\n            this._visitor = new Visitor(this);\r\n        }\r\n        JoinSelectorVisitor.prototype.run = function (root) {\r\n            return this._visitor.visit(root);\r\n        };\r\n        JoinSelectorVisitor.prototype.visitDeclaration = function (declNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        JoinSelectorVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\r\n            visitArgs.visitDeeper = false;\r\n        };\r\n        JoinSelectorVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\r\n            var context = this.contexts[this.contexts.length - 1];\r\n            var paths = [];\r\n            var selectors;\r\n            this.contexts.push(paths);\r\n            if (!rulesetNode.root) {\r\n                selectors = rulesetNode.selectors;\r\n                if (selectors) {\r\n                    selectors = selectors.filter(function (selector) { return selector.getIsOutput(); });\r\n                    rulesetNode.selectors = selectors.length ? selectors : (selectors = null);\r\n                    if (selectors) {\r\n                        rulesetNode.joinSelectors(paths, context, selectors);\r\n                    }\r\n                }\r\n                if (!selectors) {\r\n                    rulesetNode.rules = null;\r\n                }\r\n                rulesetNode.paths = paths;\r\n            }\r\n        };\r\n        JoinSelectorVisitor.prototype.visitRulesetOut = function (rulesetNode) {\r\n            this.contexts.length = this.contexts.length - 1;\r\n        };\r\n        JoinSelectorVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\r\n            var context = this.contexts[this.contexts.length - 1];\r\n            mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);\r\n        };\r\n        JoinSelectorVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\r\n            var context = this.contexts[this.contexts.length - 1];\r\n            if (atRuleNode.rules && atRuleNode.rules.length) {\r\n                atRuleNode.rules[0].root = (atRuleNode.isRooted || context.length === 0 || null);\r\n            }\r\n        };\r\n        return JoinSelectorVisitor;\r\n    }());\n\n    var CSSVisitorUtils = /** @class */ (function () {\r\n        function CSSVisitorUtils(context) {\r\n            this._visitor = new Visitor(this);\r\n            this._context = context;\r\n        }\r\n        CSSVisitorUtils.prototype.containsSilentNonBlockedChild = function (bodyRules) {\r\n            var rule;\r\n            if (!bodyRules) {\r\n                return false;\r\n            }\r\n            for (var r = 0; r < bodyRules.length; r++) {\r\n                rule = bodyRules[r];\r\n                if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\r\n                    // the atrule contains something that was referenced (likely by extend)\r\n                    // therefore it needs to be shown in output too\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        CSSVisitorUtils.prototype.keepOnlyVisibleChilds = function (owner) {\r\n            if (owner && owner.rules) {\r\n                owner.rules = owner.rules.filter(function (thing) { return thing.isVisible(); });\r\n            }\r\n        };\r\n        CSSVisitorUtils.prototype.isEmpty = function (owner) {\r\n            return (owner && owner.rules)\r\n                ? (owner.rules.length === 0) : true;\r\n        };\r\n        CSSVisitorUtils.prototype.hasVisibleSelector = function (rulesetNode) {\r\n            return (rulesetNode && rulesetNode.paths)\r\n                ? (rulesetNode.paths.length > 0) : false;\r\n        };\r\n        CSSVisitorUtils.prototype.resolveVisibility = function (node, originalRules) {\r\n            if (!node.blocksVisibility()) {\r\n                if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\r\n                    return;\r\n                }\r\n                return node;\r\n            }\r\n            var compiledRulesBody = node.rules[0];\r\n            this.keepOnlyVisibleChilds(compiledRulesBody);\r\n            if (this.isEmpty(compiledRulesBody)) {\r\n                return;\r\n            }\r\n            node.ensureVisibility();\r\n            node.removeVisibilityBlock();\r\n            return node;\r\n        };\r\n        CSSVisitorUtils.prototype.isVisibleRuleset = function (rulesetNode) {\r\n            if (rulesetNode.firstRoot) {\r\n                return true;\r\n            }\r\n            if (this.isEmpty(rulesetNode)) {\r\n                return false;\r\n            }\r\n            if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        return CSSVisitorUtils;\r\n    }());\r\n    var ToCSSVisitor = function (context) {\r\n        this._visitor = new Visitor(this);\r\n        this._context = context;\r\n        this.utils = new CSSVisitorUtils(context);\r\n    };\r\n    ToCSSVisitor.prototype = {\r\n        isReplacing: true,\r\n        run: function (root) {\r\n            return this._visitor.visit(root);\r\n        },\r\n        visitDeclaration: function (declNode, visitArgs) {\r\n            if (declNode.blocksVisibility() || declNode.variable) {\r\n                return;\r\n            }\r\n            return declNode;\r\n        },\r\n        visitMixinDefinition: function (mixinNode, visitArgs) {\r\n            // mixin definitions do not get eval'd - this means they keep state\r\n            // so we have to clear that state here so it isn't used if toCSS is called twice\r\n            mixinNode.frames = [];\r\n        },\r\n        visitExtend: function (extendNode, visitArgs) {\r\n        },\r\n        visitComment: function (commentNode, visitArgs) {\r\n            if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\r\n                return;\r\n            }\r\n            return commentNode;\r\n        },\r\n        visitMedia: function (mediaNode, visitArgs) {\r\n            var originalRules = mediaNode.rules[0].rules;\r\n            mediaNode.accept(this._visitor);\r\n            visitArgs.visitDeeper = false;\r\n            return this.utils.resolveVisibility(mediaNode, originalRules);\r\n        },\r\n        visitImport: function (importNode, visitArgs) {\r\n            if (importNode.blocksVisibility()) {\r\n                return;\r\n            }\r\n            return importNode;\r\n        },\r\n        visitAtRule: function (atRuleNode, visitArgs) {\r\n            if (atRuleNode.rules && atRuleNode.rules.length) {\r\n                return this.visitAtRuleWithBody(atRuleNode, visitArgs);\r\n            }\r\n            else {\r\n                return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\r\n            }\r\n        },\r\n        visitAnonymous: function (anonymousNode, visitArgs) {\r\n            if (!anonymousNode.blocksVisibility()) {\r\n                anonymousNode.accept(this._visitor);\r\n                return anonymousNode;\r\n            }\r\n        },\r\n        visitAtRuleWithBody: function (atRuleNode, visitArgs) {\r\n            // if there is only one nested ruleset and that one has no path, then it is\r\n            // just fake ruleset\r\n            function hasFakeRuleset(atRuleNode) {\r\n                var bodyRules = atRuleNode.rules;\r\n                return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\r\n            }\r\n            function getBodyRules(atRuleNode) {\r\n                var nodeRules = atRuleNode.rules;\r\n                if (hasFakeRuleset(atRuleNode)) {\r\n                    return nodeRules[0].rules;\r\n                }\r\n                return nodeRules;\r\n            }\r\n            // it is still true that it is only one ruleset in array\r\n            // this is last such moment\r\n            // process childs\r\n            var originalRules = getBodyRules(atRuleNode);\r\n            atRuleNode.accept(this._visitor);\r\n            visitArgs.visitDeeper = false;\r\n            if (!this.utils.isEmpty(atRuleNode)) {\r\n                this._mergeRules(atRuleNode.rules[0].rules);\r\n            }\r\n            return this.utils.resolveVisibility(atRuleNode, originalRules);\r\n        },\r\n        visitAtRuleWithoutBody: function (atRuleNode, visitArgs) {\r\n            if (atRuleNode.blocksVisibility()) {\r\n                return;\r\n            }\r\n            if (atRuleNode.name === '@charset') {\r\n                // Only output the debug info together with subsequent @charset definitions\r\n                // a comment (or @media statement) before the actual @charset atrule would\r\n                // be considered illegal css as it has to be on the first line\r\n                if (this.charset) {\r\n                    if (atRuleNode.debugInfo) {\r\n                        var comment = new tree.Comment(\"/* \" + atRuleNode.toCSS(this._context).replace(/\\n/g, '') + \" */\\n\");\r\n                        comment.debugInfo = atRuleNode.debugInfo;\r\n                        return this._visitor.visit(comment);\r\n                    }\r\n                    return;\r\n                }\r\n                this.charset = true;\r\n            }\r\n            return atRuleNode;\r\n        },\r\n        checkValidNodes: function (rules, isRoot) {\r\n            if (!rules) {\r\n                return;\r\n            }\r\n            for (var i = 0; i < rules.length; i++) {\r\n                var ruleNode = rules[i];\r\n                if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\r\n                    throw { message: 'Properties must be inside selector blocks. They cannot be in the root',\r\n                        index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename };\r\n                }\r\n                if (ruleNode instanceof tree.Call) {\r\n                    throw { message: \"Function '\" + ruleNode.name + \"' did not return a root node\",\r\n                        index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename };\r\n                }\r\n                if (ruleNode.type && !ruleNode.allowRoot) {\r\n                    throw { message: ruleNode.type + \" node returned by a function is not valid here\",\r\n                        index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename };\r\n                }\r\n            }\r\n        },\r\n        visitRuleset: function (rulesetNode, visitArgs) {\r\n            // at this point rulesets are nested into each other\r\n            var rule;\r\n            var rulesets = [];\r\n            this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\r\n            if (!rulesetNode.root) {\r\n                // remove invisible paths\r\n                this._compileRulesetPaths(rulesetNode);\r\n                // remove rulesets from this ruleset body and compile them separately\r\n                var nodeRules = rulesetNode.rules;\r\n                var nodeRuleCnt = nodeRules ? nodeRules.length : 0;\r\n                for (var i = 0; i < nodeRuleCnt;) {\r\n                    rule = nodeRules[i];\r\n                    if (rule && rule.rules) {\r\n                        // visit because we are moving them out from being a child\r\n                        rulesets.push(this._visitor.visit(rule));\r\n                        nodeRules.splice(i, 1);\r\n                        nodeRuleCnt--;\r\n                        continue;\r\n                    }\r\n                    i++;\r\n                }\r\n                // accept the visitor to remove rules and refactor itself\r\n                // then we can decide nogw whether we want it or not\r\n                // compile body\r\n                if (nodeRuleCnt > 0) {\r\n                    rulesetNode.accept(this._visitor);\r\n                }\r\n                else {\r\n                    rulesetNode.rules = null;\r\n                }\r\n                visitArgs.visitDeeper = false;\r\n            }\r\n            else { // if (! rulesetNode.root) {\r\n                rulesetNode.accept(this._visitor);\r\n                visitArgs.visitDeeper = false;\r\n            }\r\n            if (rulesetNode.rules) {\r\n                this._mergeRules(rulesetNode.rules);\r\n                this._removeDuplicateRules(rulesetNode.rules);\r\n            }\r\n            // now decide whether we keep the ruleset\r\n            if (this.utils.isVisibleRuleset(rulesetNode)) {\r\n                rulesetNode.ensureVisibility();\r\n                rulesets.splice(0, 0, rulesetNode);\r\n            }\r\n            if (rulesets.length === 1) {\r\n                return rulesets[0];\r\n            }\r\n            return rulesets;\r\n        },\r\n        _compileRulesetPaths: function (rulesetNode) {\r\n            if (rulesetNode.paths) {\r\n                rulesetNode.paths = rulesetNode.paths\r\n                    .filter(function (p) {\r\n                    var i;\r\n                    if (p[0].elements[0].combinator.value === ' ') {\r\n                        p[0].elements[0].combinator = new (tree.Combinator)('');\r\n                    }\r\n                    for (i = 0; i < p.length; i++) {\r\n                        if (p[i].isVisible() && p[i].getIsOutput()) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n        },\r\n        _removeDuplicateRules: function (rules) {\r\n            if (!rules) {\r\n                return;\r\n            }\r\n            // remove duplicates\r\n            var ruleCache = {};\r\n            var ruleList;\r\n            var rule;\r\n            var i;\r\n            for (i = rules.length - 1; i >= 0; i--) {\r\n                rule = rules[i];\r\n                if (rule instanceof tree.Declaration) {\r\n                    if (!ruleCache[rule.name]) {\r\n                        ruleCache[rule.name] = rule;\r\n                    }\r\n                    else {\r\n                        ruleList = ruleCache[rule.name];\r\n                        if (ruleList instanceof tree.Declaration) {\r\n                            ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\r\n                        }\r\n                        var ruleCSS = rule.toCSS(this._context);\r\n                        if (ruleList.indexOf(ruleCSS) !== -1) {\r\n                            rules.splice(i, 1);\r\n                        }\r\n                        else {\r\n                            ruleList.push(ruleCSS);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        _mergeRules: function (rules) {\r\n            if (!rules) {\r\n                return;\r\n            }\r\n            var groups = {};\r\n            var groupsArr = [];\r\n            for (var i = 0; i < rules.length; i++) {\r\n                var rule = rules[i];\r\n                if (rule.merge) {\r\n                    var key = rule.name;\r\n                    groups[key] ? rules.splice(i--, 1) :\r\n                        groupsArr.push(groups[key] = []);\r\n                    groups[key].push(rule);\r\n                }\r\n            }\r\n            groupsArr.forEach(function (group) {\r\n                if (group.length > 0) {\r\n                    var result_1 = group[0];\r\n                    var space_1 = [];\r\n                    var comma_1 = [new tree.Expression(space_1)];\r\n                    group.forEach(function (rule) {\r\n                        if ((rule.merge === '+') && (space_1.length > 0)) {\r\n                            comma_1.push(new tree.Expression(space_1 = []));\r\n                        }\r\n                        space_1.push(rule.value);\r\n                        result_1.important = result_1.important || rule.important;\r\n                    });\r\n                    result_1.value = new tree.Value(comma_1);\r\n                }\r\n            });\r\n        }\r\n    };\n\n    var visitors = {\r\n        Visitor: Visitor,\r\n        ImportVisitor: ImportVisitor,\r\n        MarkVisibleSelectorsVisitor: SetTreeVisibilityVisitor,\r\n        ExtendVisitor: ProcessExtendsVisitor,\r\n        JoinSelectorVisitor: JoinSelectorVisitor,\r\n        ToCSSVisitor: ToCSSVisitor\r\n    };\n\n    // Split the input into chunks.\r\n    function chunker (input, fail) {\r\n        var len = input.length;\r\n        var level = 0;\r\n        var parenLevel = 0;\r\n        var lastOpening;\r\n        var lastOpeningParen;\r\n        var lastMultiComment;\r\n        var lastMultiCommentEndBrace;\r\n        var chunks = [];\r\n        var emitFrom = 0;\r\n        var chunkerCurrentIndex;\r\n        var currentChunkStartIndex;\r\n        var cc;\r\n        var cc2;\r\n        var matched;\r\n        function emitChunk(force) {\r\n            var len = chunkerCurrentIndex - emitFrom;\r\n            if (((len < 512) && !force) || !len) {\r\n                return;\r\n            }\r\n            chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\r\n            emitFrom = chunkerCurrentIndex + 1;\r\n        }\r\n        for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\r\n            cc = input.charCodeAt(chunkerCurrentIndex);\r\n            if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\r\n                // a-z or whitespace\r\n                continue;\r\n            }\r\n            switch (cc) {\r\n                case 40: // (\r\n                    parenLevel++;\r\n                    lastOpeningParen = chunkerCurrentIndex;\r\n                    continue;\r\n                case 41: // )\r\n                    if (--parenLevel < 0) {\r\n                        return fail('missing opening `(`', chunkerCurrentIndex);\r\n                    }\r\n                    continue;\r\n                case 59: // ;\r\n                    if (!parenLevel) {\r\n                        emitChunk();\r\n                    }\r\n                    continue;\r\n                case 123: // {\r\n                    level++;\r\n                    lastOpening = chunkerCurrentIndex;\r\n                    continue;\r\n                case 125: // }\r\n                    if (--level < 0) {\r\n                        return fail('missing opening `{`', chunkerCurrentIndex);\r\n                    }\r\n                    if (!level && !parenLevel) {\r\n                        emitChunk();\r\n                    }\r\n                    continue;\r\n                case 92: // \\\r\n                    if (chunkerCurrentIndex < len - 1) {\r\n                        chunkerCurrentIndex++;\r\n                        continue;\r\n                    }\r\n                    return fail('unescaped `\\\\`', chunkerCurrentIndex);\r\n                case 34:\r\n                case 39:\r\n                case 96: // \", ' and `\r\n                    matched = 0;\r\n                    currentChunkStartIndex = chunkerCurrentIndex;\r\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\r\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\r\n                        if (cc2 > 96) {\r\n                            continue;\r\n                        }\r\n                        if (cc2 == cc) {\r\n                            matched = 1;\r\n                            break;\r\n                        }\r\n                        if (cc2 == 92) { // \\\r\n                            if (chunkerCurrentIndex == len - 1) {\r\n                                return fail('unescaped `\\\\`', chunkerCurrentIndex);\r\n                            }\r\n                            chunkerCurrentIndex++;\r\n                        }\r\n                    }\r\n                    if (matched) {\r\n                        continue;\r\n                    }\r\n                    return fail(\"unmatched `\" + String.fromCharCode(cc) + \"`\", currentChunkStartIndex);\r\n                case 47: // /, check for comment\r\n                    if (parenLevel || (chunkerCurrentIndex == len - 1)) {\r\n                        continue;\r\n                    }\r\n                    cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\r\n                    if (cc2 == 47) {\r\n                        // //, find lnfeed\r\n                        for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\r\n                            cc2 = input.charCodeAt(chunkerCurrentIndex);\r\n                            if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (cc2 == 42) {\r\n                        // /*, find */\r\n                        lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\r\n                        for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\r\n                            cc2 = input.charCodeAt(chunkerCurrentIndex);\r\n                            if (cc2 == 125) {\r\n                                lastMultiCommentEndBrace = chunkerCurrentIndex;\r\n                            }\r\n                            if (cc2 != 42) {\r\n                                continue;\r\n                            }\r\n                            if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (chunkerCurrentIndex == len - 1) {\r\n                            return fail('missing closing `*/`', currentChunkStartIndex);\r\n                        }\r\n                        chunkerCurrentIndex++;\r\n                    }\r\n                    continue;\r\n                case 42: // *, check for unmatched */\r\n                    if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\r\n                        return fail('unmatched `/*`', chunkerCurrentIndex);\r\n                    }\r\n                    continue;\r\n            }\r\n        }\r\n        if (level !== 0) {\r\n            if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\r\n                return fail('missing closing `}` or `*/`', lastOpening);\r\n            }\r\n            else {\r\n                return fail('missing closing `}`', lastOpening);\r\n            }\r\n        }\r\n        else if (parenLevel !== 0) {\r\n            return fail('missing closing `)`', lastOpeningParen);\r\n        }\r\n        emitChunk(true);\r\n        return chunks;\r\n    }\n\n    var getParserInput = (function () {\r\n        var // Less input string\r\n        input;\r\n        var // current chunk\r\n        j;\r\n        var // holds state for backtracking\r\n        saveStack = [];\r\n        var // furthest index the parser has gone to\r\n        furthest;\r\n        var // if this is furthest we got to, this is the probably cause\r\n        furthestPossibleErrorMessage;\r\n        var // chunkified input\r\n        chunks;\r\n        var // current chunk\r\n        current;\r\n        var // index of current chunk, in `input`\r\n        currentPos;\r\n        var parserInput = {};\r\n        var CHARCODE_SPACE = 32;\r\n        var CHARCODE_TAB = 9;\r\n        var CHARCODE_LF = 10;\r\n        var CHARCODE_CR = 13;\r\n        var CHARCODE_PLUS = 43;\r\n        var CHARCODE_COMMA = 44;\r\n        var CHARCODE_FORWARD_SLASH = 47;\r\n        var CHARCODE_9 = 57;\r\n        function skipWhitespace(length) {\r\n            var oldi = parserInput.i;\r\n            var oldj = j;\r\n            var curr = parserInput.i - currentPos;\r\n            var endIndex = parserInput.i + current.length - curr;\r\n            var mem = (parserInput.i += length);\r\n            var inp = input;\r\n            var c;\r\n            var nextChar;\r\n            var comment;\r\n            for (; parserInput.i < endIndex; parserInput.i++) {\r\n                c = inp.charCodeAt(parserInput.i);\r\n                if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\r\n                    nextChar = inp.charAt(parserInput.i + 1);\r\n                    if (nextChar === '/') {\r\n                        comment = { index: parserInput.i, isLineComment: true };\r\n                        var nextNewLine = inp.indexOf('\\n', parserInput.i + 2);\r\n                        if (nextNewLine < 0) {\r\n                            nextNewLine = endIndex;\r\n                        }\r\n                        parserInput.i = nextNewLine;\r\n                        comment.text = inp.substr(comment.index, parserInput.i - comment.index);\r\n                        parserInput.commentStore.push(comment);\r\n                        continue;\r\n                    }\r\n                    else if (nextChar === '*') {\r\n                        var nextStarSlash = inp.indexOf('*/', parserInput.i + 2);\r\n                        if (nextStarSlash >= 0) {\r\n                            comment = {\r\n                                index: parserInput.i,\r\n                                text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),\r\n                                isLineComment: false\r\n                            };\r\n                            parserInput.i += comment.text.length - 1;\r\n                            parserInput.commentStore.push(comment);\r\n                            continue;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {\r\n                    break;\r\n                }\r\n            }\r\n            current = current.slice(length + parserInput.i - mem + curr);\r\n            currentPos = parserInput.i;\r\n            if (!current.length) {\r\n                if (j < chunks.length - 1) {\r\n                    current = chunks[++j];\r\n                    skipWhitespace(0); // skip space at the beginning of a chunk\r\n                    return true; // things changed\r\n                }\r\n                parserInput.finished = true;\r\n            }\r\n            return oldi !== parserInput.i || oldj !== j;\r\n        }\r\n        parserInput.save = function () {\r\n            currentPos = parserInput.i;\r\n            saveStack.push({ current: current, i: parserInput.i, j: j });\r\n        };\r\n        parserInput.restore = function (possibleErrorMessage) {\r\n            if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {\r\n                furthest = parserInput.i;\r\n                furthestPossibleErrorMessage = possibleErrorMessage;\r\n            }\r\n            var state = saveStack.pop();\r\n            current = state.current;\r\n            currentPos = parserInput.i = state.i;\r\n            j = state.j;\r\n        };\r\n        parserInput.forget = function () {\r\n            saveStack.pop();\r\n        };\r\n        parserInput.isWhitespace = function (offset) {\r\n            var pos = parserInput.i + (offset || 0);\r\n            var code = input.charCodeAt(pos);\r\n            return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);\r\n        };\r\n        // Specialization of $(tok)\r\n        parserInput.$re = function (tok) {\r\n            if (parserInput.i > currentPos) {\r\n                current = current.slice(parserInput.i - currentPos);\r\n                currentPos = parserInput.i;\r\n            }\r\n            var m = tok.exec(current);\r\n            if (!m) {\r\n                return null;\r\n            }\r\n            skipWhitespace(m[0].length);\r\n            if (typeof m === 'string') {\r\n                return m;\r\n            }\r\n            return m.length === 1 ? m[0] : m;\r\n        };\r\n        parserInput.$char = function (tok) {\r\n            if (input.charAt(parserInput.i) !== tok) {\r\n                return null;\r\n            }\r\n            skipWhitespace(1);\r\n            return tok;\r\n        };\r\n        parserInput.$str = function (tok) {\r\n            var tokLength = tok.length;\r\n            // https://jsperf.com/string-startswith/21\r\n            for (var i = 0; i < tokLength; i++) {\r\n                if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\r\n                    return null;\r\n                }\r\n            }\r\n            skipWhitespace(tokLength);\r\n            return tok;\r\n        };\r\n        parserInput.$quoted = function (loc) {\r\n            var pos = loc || parserInput.i;\r\n            var startChar = input.charAt(pos);\r\n            if (startChar !== '\\'' && startChar !== '\"') {\r\n                return;\r\n            }\r\n            var length = input.length;\r\n            var currentPosition = pos;\r\n            for (var i = 1; i + currentPosition < length; i++) {\r\n                var nextChar = input.charAt(i + currentPosition);\r\n                switch (nextChar) {\r\n                    case '\\\\':\r\n                        i++;\r\n                        continue;\r\n                    case '\\r':\r\n                    case '\\n':\r\n                        break;\r\n                    case startChar:\r\n                        var str = input.substr(currentPosition, i + 1);\r\n                        if (!loc && loc !== 0) {\r\n                            skipWhitespace(i + 1);\r\n                            return str;\r\n                        }\r\n                        return [startChar, str];\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Permissive parsing. Ignores everything except matching {} [] () and quotes\r\n         * until matching token (outside of blocks)\r\n         */\r\n        parserInput.$parseUntil = function (tok) {\r\n            var quote = '';\r\n            var returnVal = null;\r\n            var inComment = false;\r\n            var blockDepth = 0;\r\n            var blockStack = [];\r\n            var parseGroups = [];\r\n            var length = input.length;\r\n            var startPos = parserInput.i;\r\n            var lastPos = parserInput.i;\r\n            var i = parserInput.i;\r\n            var loop = true;\r\n            var testChar;\r\n            if (typeof tok === 'string') {\r\n                testChar = function (char) { return char === tok; };\r\n            }\r\n            else {\r\n                testChar = function (char) { return tok.test(char); };\r\n            }\r\n            do {\r\n                var nextChar = input.charAt(i);\r\n                if (blockDepth === 0 && testChar(nextChar)) {\r\n                    returnVal = input.substr(lastPos, i - lastPos);\r\n                    if (returnVal) {\r\n                        parseGroups.push(returnVal);\r\n                    }\r\n                    else {\r\n                        parseGroups.push(' ');\r\n                    }\r\n                    returnVal = parseGroups;\r\n                    skipWhitespace(i - startPos);\r\n                    loop = false;\r\n                }\r\n                else {\r\n                    if (inComment) {\r\n                        if (nextChar === '*' &&\r\n                            input.charAt(i + 1) === '/') {\r\n                            i++;\r\n                            blockDepth--;\r\n                            inComment = false;\r\n                        }\r\n                        i++;\r\n                        continue;\r\n                    }\r\n                    switch (nextChar) {\r\n                        case '\\\\':\r\n                            i++;\r\n                            nextChar = input.charAt(i);\r\n                            parseGroups.push(input.substr(lastPos, i - lastPos + 1));\r\n                            lastPos = i + 1;\r\n                            break;\r\n                        case '/':\r\n                            if (input.charAt(i + 1) === '*') {\r\n                                i++;\r\n                                inComment = true;\r\n                                blockDepth++;\r\n                            }\r\n                            break;\r\n                        case '\\'':\r\n                        case '\"':\r\n                            quote = parserInput.$quoted(i);\r\n                            if (quote) {\r\n                                parseGroups.push(input.substr(lastPos, i - lastPos), quote);\r\n                                i += quote[1].length - 1;\r\n                                lastPos = i + 1;\r\n                            }\r\n                            else {\r\n                                skipWhitespace(i - startPos);\r\n                                returnVal = nextChar;\r\n                                loop = false;\r\n                            }\r\n                            break;\r\n                        case '{':\r\n                            blockStack.push('}');\r\n                            blockDepth++;\r\n                            break;\r\n                        case '(':\r\n                            blockStack.push(')');\r\n                            blockDepth++;\r\n                            break;\r\n                        case '[':\r\n                            blockStack.push(']');\r\n                            blockDepth++;\r\n                            break;\r\n                        case '}':\r\n                        case ')':\r\n                        case ']':\r\n                            var expected = blockStack.pop();\r\n                            if (nextChar === expected) {\r\n                                blockDepth--;\r\n                            }\r\n                            else {\r\n                                // move the parser to the error and return expected\r\n                                skipWhitespace(i - startPos);\r\n                                returnVal = expected;\r\n                                loop = false;\r\n                            }\r\n                    }\r\n                    i++;\r\n                    if (i > length) {\r\n                        loop = false;\r\n                    }\r\n                }\r\n            } while (loop);\r\n            return returnVal ? returnVal : null;\r\n        };\r\n        parserInput.autoCommentAbsorb = true;\r\n        parserInput.commentStore = [];\r\n        parserInput.finished = false;\r\n        // Same as $(), but don't change the state of the parser,\r\n        // just return the match.\r\n        parserInput.peek = function (tok) {\r\n            if (typeof tok === 'string') {\r\n                // https://jsperf.com/string-startswith/21\r\n                for (var i = 0; i < tok.length; i++) {\r\n                    if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            else {\r\n                return tok.test(current);\r\n            }\r\n        };\r\n        // Specialization of peek()\r\n        // TODO remove or change some currentChar calls to peekChar\r\n        parserInput.peekChar = function (tok) { return input.charAt(parserInput.i) === tok; };\r\n        parserInput.currentChar = function () { return input.charAt(parserInput.i); };\r\n        parserInput.prevChar = function () { return input.charAt(parserInput.i - 1); };\r\n        parserInput.getInput = function () { return input; };\r\n        parserInput.peekNotNumeric = function () {\r\n            var c = input.charCodeAt(parserInput.i);\r\n            // Is the first char of the dimension 0-9, '.', '+' or '-'\r\n            return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;\r\n        };\r\n        parserInput.start = function (str, chunkInput, failFunction) {\r\n            input = str;\r\n            parserInput.i = j = currentPos = furthest = 0;\r\n            // chunking apparently makes things quicker (but my tests indicate\r\n            // it might actually make things slower in node at least)\r\n            // and it is a non-perfect parse - it can't recognise\r\n            // unquoted urls, meaning it can't distinguish comments\r\n            // meaning comments with quotes or {}() in them get 'counted'\r\n            // and then lead to parse errors.\r\n            // In addition if the chunking chunks in the wrong place we might\r\n            // not be able to parse a parser statement in one go\r\n            // this is officially deprecated but can be switched on via an option\r\n            // in the case it causes too much performance issues.\r\n            if (chunkInput) {\r\n                chunks = chunker(str, failFunction);\r\n            }\r\n            else {\r\n                chunks = [str];\r\n            }\r\n            current = chunks[0];\r\n            skipWhitespace(0);\r\n        };\r\n        parserInput.end = function () {\r\n            var message;\r\n            var isFinished = parserInput.i >= input.length;\r\n            if (parserInput.i < furthest) {\r\n                message = furthestPossibleErrorMessage;\r\n                parserInput.i = furthest;\r\n            }\r\n            return {\r\n                isFinished: isFinished,\r\n                furthest: parserInput.i,\r\n                furthestPossibleErrorMessage: message,\r\n                furthestReachedEnd: parserInput.i >= input.length - 1,\r\n                furthestChar: input[parserInput.i]\r\n            };\r\n        };\r\n        return parserInput;\r\n    });\n\n    //\r\n    // less.js - parser\r\n    //\r\n    //    A relatively straight-forward predictive parser.\r\n    //    There is no tokenization/lexing stage, the input is parsed\r\n    //    in one sweep.\r\n    //\r\n    //    To make the parser fast enough to run in the browser, several\r\n    //    optimization had to be made:\r\n    //\r\n    //    - Matching and slicing on a huge input is often cause of slowdowns.\r\n    //      The solution is to chunkify the input into smaller strings.\r\n    //      The chunks are stored in the `chunks` var,\r\n    //      `j` holds the current chunk index, and `currentPos` holds\r\n    //      the index of the current chunk in relation to `input`.\r\n    //      This gives us an almost 4x speed-up.\r\n    //\r\n    //    - In many cases, we don't need to match individual tokens;\r\n    //      for example, if a value doesn't hold any variables, operations\r\n    //      or dynamic references, the parser can effectively 'skip' it,\r\n    //      treating it as a literal.\r\n    //      An example would be '1px solid #000' - which evaluates to itself,\r\n    //      we don't need to know what the individual components are.\r\n    //      The drawback, of course is that you don't get the benefits of\r\n    //      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\r\n    //      and a smaller speed-up in the code-gen.\r\n    //\r\n    //\r\n    //    Token matching is done with the `$` function, which either takes\r\n    //    a terminal string or regexp, or a non-terminal function to call.\r\n    //    It also takes care of moving all the indices forwards.\r\n    //\r\n    var Parser = function Parser(context, imports, fileInfo) {\r\n        var parsers;\r\n        var parserInput = getParserInput();\r\n        function error(msg, type) {\r\n            throw new LessError({\r\n                index: parserInput.i,\r\n                filename: fileInfo.filename,\r\n                type: type || 'Syntax',\r\n                message: msg\r\n            }, imports);\r\n        }\r\n        function expect(arg, msg) {\r\n            // some older browsers return typeof 'function' for RegExp\r\n            var result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);\r\n            if (result) {\r\n                return result;\r\n            }\r\n            error(msg || (typeof arg === 'string'\r\n                ? \"expected '\" + arg + \"' got '\" + parserInput.currentChar() + \"'\"\r\n                : 'unexpected token'));\r\n        }\r\n        // Specialization of expect()\r\n        function expectChar(arg, msg) {\r\n            if (parserInput.$char(arg)) {\r\n                return arg;\r\n            }\r\n            error(msg || \"expected '\" + arg + \"' got '\" + parserInput.currentChar() + \"'\");\r\n        }\r\n        function getDebugInfo(index) {\r\n            var filename = fileInfo.filename;\r\n            return {\r\n                lineNumber: getLocation(index, parserInput.getInput()).line + 1,\r\n                fileName: filename\r\n            };\r\n        }\r\n        /**\r\n         *  Used after initial parsing to create nodes on the fly\r\n         *\r\n         *  @param {String} str          - string to parse\r\n         *  @param {Array}  parseList    - array of parsers to run input through e.g. [\"value\", \"important\"]\r\n         *  @param {Number} currentIndex - start number to begin indexing\r\n         *  @param {Object} fileInfo     - fileInfo to attach to created nodes\r\n         */\r\n        function parseNode(str, parseList, currentIndex, fileInfo, callback) {\r\n            var result;\r\n            var returnNodes = [];\r\n            var parser = parserInput;\r\n            try {\r\n                parser.start(str, false, function fail(msg, index) {\r\n                    callback({\r\n                        message: msg,\r\n                        index: index + currentIndex\r\n                    });\r\n                });\r\n                for (var x = 0, p = void 0, i = void 0; (p = parseList[x]); x++) {\r\n                    i = parser.i;\r\n                    result = parsers[p]();\r\n                    if (result) {\r\n                        try {\r\n                            result._index = i + currentIndex;\r\n                            result._fileInfo = fileInfo;\r\n                        }\r\n                        catch (e) { }\r\n                        returnNodes.push(result);\r\n                    }\r\n                    else {\r\n                        returnNodes.push(null);\r\n                    }\r\n                }\r\n                var endInfo = parser.end();\r\n                if (endInfo.isFinished) {\r\n                    callback(null, returnNodes);\r\n                }\r\n                else {\r\n                    callback(true, null);\r\n                }\r\n            }\r\n            catch (e) {\r\n                throw new LessError({\r\n                    index: e.index + currentIndex,\r\n                    message: e.message\r\n                }, imports, fileInfo.filename);\r\n            }\r\n        }\r\n        //\r\n        // The Parser\r\n        //\r\n        return {\r\n            parserInput: parserInput,\r\n            imports: imports,\r\n            fileInfo: fileInfo,\r\n            parseNode: parseNode,\r\n            //\r\n            // Parse an input string into an abstract syntax tree,\r\n            // @param str A string containing 'less' markup\r\n            // @param callback call `callback` when done.\r\n            // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\r\n            //\r\n            parse: function (str, callback, additionalData) {\r\n                var root;\r\n                var err = null;\r\n                var globalVars;\r\n                var modifyVars;\r\n                var ignored;\r\n                var preText = '';\r\n                // Optionally disable @plugin parsing\r\n                if (additionalData && additionalData.disablePluginRule) {\r\n                    parsers.plugin = function () {\r\n                        var dir = parserInput.$re(/^@plugin?\\s+/);\r\n                        if (dir) {\r\n                            error('@plugin statements are not allowed when disablePluginRule is set to true');\r\n                        }\r\n                    };\r\n                }\r\n                globalVars = (additionalData && additionalData.globalVars) ? Parser.serializeVars(additionalData.globalVars) + \"\\n\" : '';\r\n                modifyVars = (additionalData && additionalData.modifyVars) ? \"\\n\" + Parser.serializeVars(additionalData.modifyVars) : '';\r\n                if (context.pluginManager) {\r\n                    var preProcessors = context.pluginManager.getPreProcessors();\r\n                    for (var i = 0; i < preProcessors.length; i++) {\r\n                        str = preProcessors[i].process(str, { context: context, imports: imports, fileInfo: fileInfo });\r\n                    }\r\n                }\r\n                if (globalVars || (additionalData && additionalData.banner)) {\r\n                    preText = ((additionalData && additionalData.banner) ? additionalData.banner : '') + globalVars;\r\n                    ignored = imports.contentsIgnoredChars;\r\n                    ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;\r\n                    ignored[fileInfo.filename] += preText.length;\r\n                }\r\n                str = str.replace(/\\r\\n?/g, '\\n');\r\n                // Remove potential UTF Byte Order Mark\r\n                str = preText + str.replace(/^\\uFEFF/, '') + modifyVars;\r\n                imports.contents[fileInfo.filename] = str;\r\n                // Start with the primary rule.\r\n                // The whole syntax tree is held under a Ruleset node,\r\n                // with the `root` property set to true, so no `{}` are\r\n                // output. The callback is called when the input is parsed.\r\n                try {\r\n                    parserInput.start(str, context.chunkInput, function fail(msg, index) {\r\n                        throw new LessError({\r\n                            index: index,\r\n                            type: 'Parse',\r\n                            message: msg,\r\n                            filename: fileInfo.filename\r\n                        }, imports);\r\n                    });\r\n                    tree.Node.prototype.parse = this;\r\n                    root = new tree.Ruleset(null, this.parsers.primary());\r\n                    tree.Node.prototype.rootNode = root;\r\n                    root.root = true;\r\n                    root.firstRoot = true;\r\n                    root.functionRegistry = functionRegistry.inherit();\r\n                }\r\n                catch (e) {\r\n                    return callback(new LessError(e, imports, fileInfo.filename));\r\n                }\r\n                // If `i` is smaller than the `input.length - 1`,\r\n                // it means the parser wasn't able to parse the whole\r\n                // string, so we've got a parsing error.\r\n                //\r\n                // We try to extract a \\n delimited string,\r\n                // showing the line where the parse error occurred.\r\n                // We split it up into two parts (the part which parsed,\r\n                // and the part which didn't), so we can color them differently.\r\n                var endInfo = parserInput.end();\r\n                if (!endInfo.isFinished) {\r\n                    var message = endInfo.furthestPossibleErrorMessage;\r\n                    if (!message) {\r\n                        message = 'Unrecognised input';\r\n                        if (endInfo.furthestChar === '}') {\r\n                            message += '. Possibly missing opening \\'{\\'';\r\n                        }\r\n                        else if (endInfo.furthestChar === ')') {\r\n                            message += '. Possibly missing opening \\'(\\'';\r\n                        }\r\n                        else if (endInfo.furthestReachedEnd) {\r\n                            message += '. Possibly missing something';\r\n                        }\r\n                    }\r\n                    err = new LessError({\r\n                        type: 'Parse',\r\n                        message: message,\r\n                        index: endInfo.furthest,\r\n                        filename: fileInfo.filename\r\n                    }, imports);\r\n                }\r\n                var finish = function (e) {\r\n                    e = err || e || imports.error;\r\n                    if (e) {\r\n                        if (!(e instanceof LessError)) {\r\n                            e = new LessError(e, imports, fileInfo.filename);\r\n                        }\r\n                        return callback(e);\r\n                    }\r\n                    else {\r\n                        return callback(null, root);\r\n                    }\r\n                };\r\n                if (context.processImports !== false) {\r\n                    new visitors.ImportVisitor(imports, finish)\r\n                        .run(root);\r\n                }\r\n                else {\r\n                    return finish();\r\n                }\r\n            },\r\n            //\r\n            // Here in, the parsing rules/functions\r\n            //\r\n            // The basic structure of the syntax tree generated is as follows:\r\n            //\r\n            //   Ruleset ->  Declaration -> Value -> Expression -> Entity\r\n            //\r\n            // Here's some Less code:\r\n            //\r\n            //    .class {\r\n            //      color: #fff;\r\n            //      border: 1px solid #000;\r\n            //      width: @w + 4px;\r\n            //      > .child {...}\r\n            //    }\r\n            //\r\n            // And here's what the parse tree might look like:\r\n            //\r\n            //     Ruleset (Selector '.class', [\r\n            //         Declaration (\"color\",  Value ([Expression [Color #fff]]))\r\n            //         Declaration (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\r\n            //         Declaration (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\r\n            //         Ruleset (Selector [Element '>', '.child'], [...])\r\n            //     ])\r\n            //\r\n            //  In general, most rules will try to parse a token with the `$re()` function, and if the return\r\n            //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\r\n            //  first, before parsing, that's when we use `peek()`.\r\n            //\r\n            parsers: parsers = {\r\n                //\r\n                // The `primary` rule is the *entry* and *exit* point of the parser.\r\n                // The rules here can appear at any level of the parse tree.\r\n                //\r\n                // The recursive nature of the grammar is an interplay between the `block`\r\n                // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\r\n                // as represented by this simplified grammar:\r\n                //\r\n                //     primary  →  (ruleset | declaration)+\r\n                //     ruleset  →  selector+ block\r\n                //     block    →  '{' primary '}'\r\n                //\r\n                // Only at one point is the primary rule not called from the\r\n                // block rule: at the root level.\r\n                //\r\n                primary: function () {\r\n                    var mixin = this.mixin;\r\n                    var root = [];\r\n                    var node;\r\n                    while (true) {\r\n                        while (true) {\r\n                            node = this.comment();\r\n                            if (!node) {\r\n                                break;\r\n                            }\r\n                            root.push(node);\r\n                        }\r\n                        // always process comments before deciding if finished\r\n                        if (parserInput.finished) {\r\n                            break;\r\n                        }\r\n                        if (parserInput.peek('}')) {\r\n                            break;\r\n                        }\r\n                        node = this.extendRule();\r\n                        if (node) {\r\n                            root = root.concat(node);\r\n                            continue;\r\n                        }\r\n                        node = mixin.definition() || this.declaration() || mixin.call(false, false) ||\r\n                            this.ruleset() || this.variableCall() || this.entities.call() || this.atrule();\r\n                        if (node) {\r\n                            root.push(node);\r\n                        }\r\n                        else {\r\n                            var foundSemiColon = false;\r\n                            while (parserInput.$char(';')) {\r\n                                foundSemiColon = true;\r\n                            }\r\n                            if (!foundSemiColon) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    return root;\r\n                },\r\n                // comments are collected by the main parsing mechanism and then assigned to nodes\r\n                // where the current structure allows it\r\n                comment: function () {\r\n                    if (parserInput.commentStore.length) {\r\n                        var comment = parserInput.commentStore.shift();\r\n                        return new (tree.Comment)(comment.text, comment.isLineComment, comment.index, fileInfo);\r\n                    }\r\n                },\r\n                //\r\n                // Entities are tokens which can be found inside an Expression\r\n                //\r\n                entities: {\r\n                    mixinLookup: function () {\r\n                        return parsers.mixin.call(true, true);\r\n                    },\r\n                    //\r\n                    // A string, which supports escaping \" and '\r\n                    //\r\n                    //     \"milky way\" 'he\\'s the one!'\r\n                    //\r\n                    quoted: function (forceEscaped) {\r\n                        var str;\r\n                        var index = parserInput.i;\r\n                        var isEscaped = false;\r\n                        parserInput.save();\r\n                        if (parserInput.$char('~')) {\r\n                            isEscaped = true;\r\n                        }\r\n                        else if (forceEscaped) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        str = parserInput.$quoted();\r\n                        if (!str) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        parserInput.forget();\r\n                        return new (tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);\r\n                    },\r\n                    //\r\n                    // A catch-all word, such as:\r\n                    //\r\n                    //     black border-collapse\r\n                    //\r\n                    keyword: function () {\r\n                        var k = parserInput.$char('%') || parserInput.$re(/^\\[?(?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+\\]?/);\r\n                        if (k) {\r\n                            return tree.Color.fromKeyword(k) || new (tree.Keyword)(k);\r\n                        }\r\n                    },\r\n                    //\r\n                    // A function call\r\n                    //\r\n                    //     rgb(255, 0, 255)\r\n                    //\r\n                    // The arguments are parsed with the `entities.arguments` parser.\r\n                    //\r\n                    call: function () {\r\n                        var name;\r\n                        var args;\r\n                        var func;\r\n                        var index = parserInput.i;\r\n                        // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\r\n                        if (parserInput.peek(/^url\\(/i)) {\r\n                            return;\r\n                        }\r\n                        parserInput.save();\r\n                        name = parserInput.$re(/^([\\w-]+|%|~|progid:[\\w\\.]+)\\(/);\r\n                        if (!name) {\r\n                            parserInput.forget();\r\n                            return;\r\n                        }\r\n                        name = name[1];\r\n                        func = this.customFuncCall(name);\r\n                        if (func) {\r\n                            args = func.parse();\r\n                            if (args && func.stop) {\r\n                                parserInput.forget();\r\n                                return args;\r\n                            }\r\n                        }\r\n                        args = this.arguments(args);\r\n                        if (!parserInput.$char(')')) {\r\n                            parserInput.restore('Could not parse call arguments or missing \\')\\'');\r\n                            return;\r\n                        }\r\n                        parserInput.forget();\r\n                        return new (tree.Call)(name, args, index, fileInfo);\r\n                    },\r\n                    //\r\n                    // Parsing rules for functions with non-standard args, e.g.:\r\n                    //\r\n                    //     boolean(not(2 > 1))\r\n                    //\r\n                    //     This is a quick prototype, to be modified/improved when\r\n                    //     more custom-parsed funcs come (e.g. `selector(...)`)\r\n                    //\r\n                    customFuncCall: function (name) {\r\n                        /* Ideally the table is to be moved out of here for faster perf.,\r\n                           but it's quite tricky since it relies on all these `parsers`\r\n                           and `expect` available only here */\r\n                        return {\r\n                            alpha: f(parsers.ieAlpha, true),\r\n                            boolean: f(condition),\r\n                            'if': f(condition)\r\n                        }[name.toLowerCase()];\r\n                        function f(parse, stop) {\r\n                            return {\r\n                                parse: parse,\r\n                                stop: stop // when true - stop after parse() and return its result, \r\n                                // otherwise continue for plain args\r\n                            };\r\n                        }\r\n                        function condition() {\r\n                            return [expect(parsers.condition, 'expected condition')];\r\n                        }\r\n                    },\r\n                    arguments: function (prevArgs) {\r\n                        var argsComma = prevArgs || [];\r\n                        var argsSemiColon = [];\r\n                        var isSemiColonSeparated;\r\n                        var value;\r\n                        parserInput.save();\r\n                        while (true) {\r\n                            if (prevArgs) {\r\n                                prevArgs = false;\r\n                            }\r\n                            else {\r\n                                value = parsers.detachedRuleset() || this.assignment() || parsers.expression();\r\n                                if (!value) {\r\n                                    break;\r\n                                }\r\n                                if (value.value && value.value.length == 1) {\r\n                                    value = value.value[0];\r\n                                }\r\n                                argsComma.push(value);\r\n                            }\r\n                            if (parserInput.$char(',')) {\r\n                                continue;\r\n                            }\r\n                            if (parserInput.$char(';') || isSemiColonSeparated) {\r\n                                isSemiColonSeparated = true;\r\n                                value = (argsComma.length < 1) ? argsComma[0]\r\n                                    : new tree.Value(argsComma);\r\n                                argsSemiColon.push(value);\r\n                                argsComma = [];\r\n                            }\r\n                        }\r\n                        parserInput.forget();\r\n                        return isSemiColonSeparated ? argsSemiColon : argsComma;\r\n                    },\r\n                    literal: function () {\r\n                        return this.dimension() ||\r\n                            this.color() ||\r\n                            this.quoted() ||\r\n                            this.unicodeDescriptor();\r\n                    },\r\n                    // Assignments are argument entities for calls.\r\n                    // They are present in ie filter properties as shown below.\r\n                    //\r\n                    //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\r\n                    //\r\n                    assignment: function () {\r\n                        var key;\r\n                        var value;\r\n                        parserInput.save();\r\n                        key = parserInput.$re(/^\\w+(?=\\s?=)/i);\r\n                        if (!key) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        if (!parserInput.$char('=')) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        value = parsers.entity();\r\n                        if (value) {\r\n                            parserInput.forget();\r\n                            return new (tree.Assignment)(key, value);\r\n                        }\r\n                        else {\r\n                            parserInput.restore();\r\n                        }\r\n                    },\r\n                    //\r\n                    // Parse url() tokens\r\n                    //\r\n                    // We use a specific rule for urls, because they don't really behave like\r\n                    // standard function calls. The difference is that the argument doesn't have\r\n                    // to be enclosed within a string, so it can't be parsed as an Expression.\r\n                    //\r\n                    url: function () {\r\n                        var value;\r\n                        var index = parserInput.i;\r\n                        parserInput.autoCommentAbsorb = false;\r\n                        if (!parserInput.$str('url(')) {\r\n                            parserInput.autoCommentAbsorb = true;\r\n                            return;\r\n                        }\r\n                        value = this.quoted() || this.variable() || this.property() ||\r\n                            parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) || '';\r\n                        parserInput.autoCommentAbsorb = true;\r\n                        expectChar(')');\r\n                        return new (tree.URL)((value.value != null ||\r\n                            value instanceof tree.Variable ||\r\n                            value instanceof tree.Property) ?\r\n                            value : new (tree.Anonymous)(value, index), index, fileInfo);\r\n                    },\r\n                    //\r\n                    // A Variable entity, such as `@fink`, in\r\n                    //\r\n                    //     width: @fink + 2px\r\n                    //\r\n                    // We use a different parser for variable definitions,\r\n                    // see `parsers.variable`.\r\n                    //\r\n                    variable: function () {\r\n                        var ch;\r\n                        var name;\r\n                        var index = parserInput.i;\r\n                        parserInput.save();\r\n                        if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\\w-]+/))) {\r\n                            ch = parserInput.currentChar();\r\n                            if (ch === '(' || ch === '[' && !parserInput.prevChar().match(/^\\s/)) {\r\n                                // this may be a VariableCall lookup\r\n                                var result = parsers.variableCall(name);\r\n                                if (result) {\r\n                                    parserInput.forget();\r\n                                    return result;\r\n                                }\r\n                            }\r\n                            parserInput.forget();\r\n                            return new (tree.Variable)(name, index, fileInfo);\r\n                        }\r\n                        parserInput.restore();\r\n                    },\r\n                    // A variable entity using the protective {} e.g. @{var}\r\n                    variableCurly: function () {\r\n                        var curly;\r\n                        var index = parserInput.i;\r\n                        if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))) {\r\n                            return new (tree.Variable)(\"@\" + curly[1], index, fileInfo);\r\n                        }\r\n                    },\r\n                    //\r\n                    // A Property accessor, such as `$color`, in\r\n                    //\r\n                    //     background-color: $color\r\n                    //\r\n                    property: function () {\r\n                        var name;\r\n                        var index = parserInput.i;\r\n                        if (parserInput.currentChar() === '$' && (name = parserInput.$re(/^\\$[\\w-]+/))) {\r\n                            return new (tree.Property)(name, index, fileInfo);\r\n                        }\r\n                    },\r\n                    // A property entity useing the protective {} e.g. ${prop}\r\n                    propertyCurly: function () {\r\n                        var curly;\r\n                        var index = parserInput.i;\r\n                        if (parserInput.currentChar() === '$' && (curly = parserInput.$re(/^\\$\\{([\\w-]+)\\}/))) {\r\n                            return new (tree.Property)(\"$\" + curly[1], index, fileInfo);\r\n                        }\r\n                    },\r\n                    //\r\n                    // A Hexadecimal color\r\n                    //\r\n                    //     #4F3C2F\r\n                    //\r\n                    // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\r\n                    //\r\n                    color: function () {\r\n                        var rgb;\r\n                        parserInput.save();\r\n                        if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})([\\w.#\\[])?/))) {\r\n                            if (!rgb[2]) {\r\n                                parserInput.forget();\r\n                                return new (tree.Color)(rgb[1], undefined, rgb[0]);\r\n                            }\r\n                        }\r\n                        parserInput.restore();\r\n                    },\r\n                    colorKeyword: function () {\r\n                        parserInput.save();\r\n                        var autoCommentAbsorb = parserInput.autoCommentAbsorb;\r\n                        parserInput.autoCommentAbsorb = false;\r\n                        var k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);\r\n                        parserInput.autoCommentAbsorb = autoCommentAbsorb;\r\n                        if (!k) {\r\n                            parserInput.forget();\r\n                            return;\r\n                        }\r\n                        parserInput.restore();\r\n                        var color = tree.Color.fromKeyword(k);\r\n                        if (color) {\r\n                            parserInput.$str(k);\r\n                            return color;\r\n                        }\r\n                    },\r\n                    //\r\n                    // A Dimension, that is, a number and a unit\r\n                    //\r\n                    //     0.5em 95%\r\n                    //\r\n                    dimension: function () {\r\n                        if (parserInput.peekNotNumeric()) {\r\n                            return;\r\n                        }\r\n                        var value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i);\r\n                        if (value) {\r\n                            return new (tree.Dimension)(value[1], value[2]);\r\n                        }\r\n                    },\r\n                    //\r\n                    // A unicode descriptor, as is used in unicode-range\r\n                    //\r\n                    // U+0??  or U+00A1-00A9\r\n                    //\r\n                    unicodeDescriptor: function () {\r\n                        var ud;\r\n                        ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/);\r\n                        if (ud) {\r\n                            return new (tree.UnicodeDescriptor)(ud[0]);\r\n                        }\r\n                    },\r\n                    //\r\n                    // JavaScript code to be evaluated\r\n                    //\r\n                    //     `window.location.href`\r\n                    //\r\n                    javascript: function () {\r\n                        var js;\r\n                        var index = parserInput.i;\r\n                        parserInput.save();\r\n                        var escape = parserInput.$char('~');\r\n                        var jsQuote = parserInput.$char('`');\r\n                        if (!jsQuote) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        js = parserInput.$re(/^[^`]*`/);\r\n                        if (js) {\r\n                            parserInput.forget();\r\n                            return new (tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);\r\n                        }\r\n                        parserInput.restore('invalid javascript definition');\r\n                    }\r\n                },\r\n                //\r\n                // The variable part of a variable definition. Used in the `rule` parser\r\n                //\r\n                //     @fink:\r\n                //\r\n                variable: function () {\r\n                    var name;\r\n                    if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))) {\r\n                        return name[1];\r\n                    }\r\n                },\r\n                //\r\n                // Call a variable value to retrieve a detached ruleset\r\n                // or a value from a detached ruleset's rules.\r\n                //\r\n                //     @fink();\r\n                //     @fink;\r\n                //     color: @fink[@color];\r\n                //\r\n                variableCall: function (parsedName) {\r\n                    var lookups;\r\n                    var i = parserInput.i;\r\n                    var inValue = !!parsedName;\r\n                    var name = parsedName;\r\n                    parserInput.save();\r\n                    if (name || (parserInput.currentChar() === '@'\r\n                        && (name = parserInput.$re(/^(@[\\w-]+)(\\(\\s*\\))?/)))) {\r\n                        lookups = this.mixin.ruleLookups();\r\n                        if (!lookups && ((inValue && parserInput.$str('()') !== '()') || (name[2] !== '()'))) {\r\n                            parserInput.restore('Missing \\'[...]\\' lookup in variable call');\r\n                            return;\r\n                        }\r\n                        if (!inValue) {\r\n                            name = name[1];\r\n                        }\r\n                        var call = new tree.VariableCall(name, i, fileInfo);\r\n                        if (!inValue && parsers.end()) {\r\n                            parserInput.forget();\r\n                            return call;\r\n                        }\r\n                        else {\r\n                            parserInput.forget();\r\n                            return new tree.NamespaceValue(call, lookups, i, fileInfo);\r\n                        }\r\n                    }\r\n                    parserInput.restore();\r\n                },\r\n                //\r\n                // extend syntax - used to extend selectors\r\n                //\r\n                extend: function (isRule) {\r\n                    var elements;\r\n                    var e;\r\n                    var index = parserInput.i;\r\n                    var option;\r\n                    var extendList;\r\n                    var extend;\r\n                    if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\r\n                        return;\r\n                    }\r\n                    do {\r\n                        option = null;\r\n                        elements = null;\r\n                        while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\r\n                            e = this.element();\r\n                            if (!e) {\r\n                                break;\r\n                            }\r\n                            if (elements) {\r\n                                elements.push(e);\r\n                            }\r\n                            else {\r\n                                elements = [e];\r\n                            }\r\n                        }\r\n                        option = option && option[1];\r\n                        if (!elements) {\r\n                            error('Missing target selector for :extend().');\r\n                        }\r\n                        extend = new (tree.Extend)(new (tree.Selector)(elements), option, index, fileInfo);\r\n                        if (extendList) {\r\n                            extendList.push(extend);\r\n                        }\r\n                        else {\r\n                            extendList = [extend];\r\n                        }\r\n                    } while (parserInput.$char(','));\r\n                    expect(/^\\)/);\r\n                    if (isRule) {\r\n                        expect(/^;/);\r\n                    }\r\n                    return extendList;\r\n                },\r\n                //\r\n                // extendRule - used in a rule to extend all the parent selectors\r\n                //\r\n                extendRule: function () {\r\n                    return this.extend(true);\r\n                },\r\n                //\r\n                // Mixins\r\n                //\r\n                mixin: {\r\n                    //\r\n                    // A Mixin call, with an optional argument list\r\n                    //\r\n                    //     #mixins > .square(#fff);\r\n                    //     #mixins.square(#fff);\r\n                    //     .rounded(4px, black);\r\n                    //     .button;\r\n                    //\r\n                    // We can lookup / return a value using the lookup syntax:\r\n                    //\r\n                    //     color: #mixin.square(#fff)[@color];\r\n                    //\r\n                    // The `while` loop is there because mixins can be\r\n                    // namespaced, but we only support the child and descendant\r\n                    // selector for now.\r\n                    //\r\n                    call: function (inValue, getLookup) {\r\n                        var s = parserInput.currentChar();\r\n                        var important = false;\r\n                        var lookups;\r\n                        var index = parserInput.i;\r\n                        var elements;\r\n                        var args;\r\n                        var hasParens;\r\n                        if (s !== '.' && s !== '#') {\r\n                            return;\r\n                        }\r\n                        parserInput.save(); // stop us absorbing part of an invalid selector\r\n                        elements = this.elements();\r\n                        if (elements) {\r\n                            if (parserInput.$char('(')) {\r\n                                args = this.args(true).args;\r\n                                expectChar(')');\r\n                                hasParens = true;\r\n                            }\r\n                            if (getLookup !== false) {\r\n                                lookups = this.ruleLookups();\r\n                            }\r\n                            if (getLookup === true && !lookups) {\r\n                                parserInput.restore();\r\n                                return;\r\n                            }\r\n                            if (inValue && !lookups && !hasParens) {\r\n                                // This isn't a valid in-value mixin call\r\n                                parserInput.restore();\r\n                                return;\r\n                            }\r\n                            if (!inValue && parsers.important()) {\r\n                                important = true;\r\n                            }\r\n                            if (inValue || parsers.end()) {\r\n                                parserInput.forget();\r\n                                var mixin = new (tree.mixin.Call)(elements, args, index, fileInfo, !lookups && important);\r\n                                if (lookups) {\r\n                                    return new tree.NamespaceValue(mixin, lookups);\r\n                                }\r\n                                else {\r\n                                    return mixin;\r\n                                }\r\n                            }\r\n                        }\r\n                        parserInput.restore();\r\n                    },\r\n                    /**\r\n                     * Matching elements for mixins\r\n                     * (Start with . or # and can have > )\r\n                     */\r\n                    elements: function () {\r\n                        var elements;\r\n                        var e;\r\n                        var c;\r\n                        var elem;\r\n                        var elemIndex;\r\n                        var re = /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/;\r\n                        while (true) {\r\n                            elemIndex = parserInput.i;\r\n                            e = parserInput.$re(re);\r\n                            if (!e) {\r\n                                break;\r\n                            }\r\n                            elem = new (tree.Element)(c, e, false, elemIndex, fileInfo);\r\n                            if (elements) {\r\n                                elements.push(elem);\r\n                            }\r\n                            else {\r\n                                elements = [elem];\r\n                            }\r\n                            c = parserInput.$char('>');\r\n                        }\r\n                        return elements;\r\n                    },\r\n                    args: function (isCall) {\r\n                        var entities = parsers.entities;\r\n                        var returner = { args: null, variadic: false };\r\n                        var expressions = [];\r\n                        var argsSemiColon = [];\r\n                        var argsComma = [];\r\n                        var isSemiColonSeparated;\r\n                        var expressionContainsNamed;\r\n                        var name;\r\n                        var nameLoop;\r\n                        var value;\r\n                        var arg;\r\n                        var expand;\r\n                        var hasSep = true;\r\n                        parserInput.save();\r\n                        while (true) {\r\n                            if (isCall) {\r\n                                arg = parsers.detachedRuleset() || parsers.expression();\r\n                            }\r\n                            else {\r\n                                parserInput.commentStore.length = 0;\r\n                                if (parserInput.$str('...')) {\r\n                                    returner.variadic = true;\r\n                                    if (parserInput.$char(';') && !isSemiColonSeparated) {\r\n                                        isSemiColonSeparated = true;\r\n                                    }\r\n                                    (isSemiColonSeparated ? argsSemiColon : argsComma)\r\n                                        .push({ variadic: true });\r\n                                    break;\r\n                                }\r\n                                arg = entities.variable() || entities.property() || entities.literal() || entities.keyword() || this.call(true);\r\n                            }\r\n                            if (!arg || !hasSep) {\r\n                                break;\r\n                            }\r\n                            nameLoop = null;\r\n                            if (arg.throwAwayComments) {\r\n                                arg.throwAwayComments();\r\n                            }\r\n                            value = arg;\r\n                            var val = null;\r\n                            if (isCall) {\r\n                                // Variable\r\n                                if (arg.value && arg.value.length == 1) {\r\n                                    val = arg.value[0];\r\n                                }\r\n                            }\r\n                            else {\r\n                                val = arg;\r\n                            }\r\n                            if (val && (val instanceof tree.Variable || val instanceof tree.Property)) {\r\n                                if (parserInput.$char(':')) {\r\n                                    if (expressions.length > 0) {\r\n                                        if (isSemiColonSeparated) {\r\n                                            error('Cannot mix ; and , as delimiter types');\r\n                                        }\r\n                                        expressionContainsNamed = true;\r\n                                    }\r\n                                    value = parsers.detachedRuleset() || parsers.expression();\r\n                                    if (!value) {\r\n                                        if (isCall) {\r\n                                            error('could not understand value for named argument');\r\n                                        }\r\n                                        else {\r\n                                            parserInput.restore();\r\n                                            returner.args = [];\r\n                                            return returner;\r\n                                        }\r\n                                    }\r\n                                    nameLoop = (name = val.name);\r\n                                }\r\n                                else if (parserInput.$str('...')) {\r\n                                    if (!isCall) {\r\n                                        returner.variadic = true;\r\n                                        if (parserInput.$char(';') && !isSemiColonSeparated) {\r\n                                            isSemiColonSeparated = true;\r\n                                        }\r\n                                        (isSemiColonSeparated ? argsSemiColon : argsComma)\r\n                                            .push({ name: arg.name, variadic: true });\r\n                                        break;\r\n                                    }\r\n                                    else {\r\n                                        expand = true;\r\n                                    }\r\n                                }\r\n                                else if (!isCall) {\r\n                                    name = nameLoop = val.name;\r\n                                    value = null;\r\n                                }\r\n                            }\r\n                            if (value) {\r\n                                expressions.push(value);\r\n                            }\r\n                            argsComma.push({ name: nameLoop, value: value, expand: expand });\r\n                            if (parserInput.$char(',')) {\r\n                                hasSep = true;\r\n                                continue;\r\n                            }\r\n                            hasSep = parserInput.$char(';') === ';';\r\n                            if (hasSep || isSemiColonSeparated) {\r\n                                if (expressionContainsNamed) {\r\n                                    error('Cannot mix ; and , as delimiter types');\r\n                                }\r\n                                isSemiColonSeparated = true;\r\n                                if (expressions.length > 1) {\r\n                                    value = new (tree.Value)(expressions);\r\n                                }\r\n                                argsSemiColon.push({ name: name, value: value, expand: expand });\r\n                                name = null;\r\n                                expressions = [];\r\n                                expressionContainsNamed = false;\r\n                            }\r\n                        }\r\n                        parserInput.forget();\r\n                        returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;\r\n                        return returner;\r\n                    },\r\n                    //\r\n                    // A Mixin definition, with a list of parameters\r\n                    //\r\n                    //     .rounded (@radius: 2px, @color) {\r\n                    //        ...\r\n                    //     }\r\n                    //\r\n                    // Until we have a finer grained state-machine, we have to\r\n                    // do a look-ahead, to make sure we don't have a mixin call.\r\n                    // See the `rule` function for more information.\r\n                    //\r\n                    // We start by matching `.rounded (`, and then proceed on to\r\n                    // the argument list, which has optional default values.\r\n                    // We store the parameters in `params`, with a `value` key,\r\n                    // if there is a value, such as in the case of `@radius`.\r\n                    //\r\n                    // Once we've got our params list, and a closing `)`, we parse\r\n                    // the `{...}` block.\r\n                    //\r\n                    definition: function () {\r\n                        var name;\r\n                        var params = [];\r\n                        var match;\r\n                        var ruleset;\r\n                        var cond;\r\n                        var variadic = false;\r\n                        if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') ||\r\n                            parserInput.peek(/^[^{]*\\}/)) {\r\n                            return;\r\n                        }\r\n                        parserInput.save();\r\n                        match = parserInput.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/);\r\n                        if (match) {\r\n                            name = match[1];\r\n                            var argInfo = this.args(false);\r\n                            params = argInfo.args;\r\n                            variadic = argInfo.variadic;\r\n                            // .mixincall(\"@{a}\");\r\n                            // looks a bit like a mixin definition..\r\n                            // also\r\n                            // .mixincall(@a: {rule: set;});\r\n                            // so we have to be nice and restore\r\n                            if (!parserInput.$char(')')) {\r\n                                parserInput.restore('Missing closing \\')\\'');\r\n                                return;\r\n                            }\r\n                            parserInput.commentStore.length = 0;\r\n                            if (parserInput.$str('when')) { // Guard\r\n                                cond = expect(parsers.conditions, 'expected condition');\r\n                            }\r\n                            ruleset = parsers.block();\r\n                            if (ruleset) {\r\n                                parserInput.forget();\r\n                                return new (tree.mixin.Definition)(name, params, ruleset, cond, variadic);\r\n                            }\r\n                            else {\r\n                                parserInput.restore();\r\n                            }\r\n                        }\r\n                        else {\r\n                            parserInput.restore();\r\n                        }\r\n                    },\r\n                    ruleLookups: function () {\r\n                        var rule;\r\n                        var lookups = [];\r\n                        if (parserInput.currentChar() !== '[') {\r\n                            return;\r\n                        }\r\n                        while (true) {\r\n                            parserInput.save();\r\n                            rule = this.lookupValue();\r\n                            if (!rule && rule !== '') {\r\n                                parserInput.restore();\r\n                                break;\r\n                            }\r\n                            lookups.push(rule);\r\n                            parserInput.forget();\r\n                        }\r\n                        if (lookups.length > 0) {\r\n                            return lookups;\r\n                        }\r\n                    },\r\n                    lookupValue: function () {\r\n                        parserInput.save();\r\n                        if (!parserInput.$char('[')) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        var name = parserInput.$re(/^(?:[@$]{0,2})[_a-zA-Z0-9-]*/);\r\n                        if (!parserInput.$char(']')) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        if (name || name === '') {\r\n                            parserInput.forget();\r\n                            return name;\r\n                        }\r\n                        parserInput.restore();\r\n                    }\r\n                },\r\n                //\r\n                // Entities are the smallest recognized token,\r\n                // and can be found inside a rule's value.\r\n                //\r\n                entity: function () {\r\n                    var entities = this.entities;\r\n                    return this.comment() || entities.literal() || entities.variable() || entities.url() ||\r\n                        entities.property() || entities.call() || entities.keyword() || this.mixin.call(true) ||\r\n                        entities.javascript();\r\n                },\r\n                //\r\n                // A Declaration terminator. Note that we use `peek()` to check for '}',\r\n                // because the `block` rule will be expecting it, but we still need to make sure\r\n                // it's there, if ';' was omitted.\r\n                //\r\n                end: function () {\r\n                    return parserInput.$char(';') || parserInput.peek('}');\r\n                },\r\n                //\r\n                // IE's alpha function\r\n                //\r\n                //     alpha(opacity=88)\r\n                //\r\n                ieAlpha: function () {\r\n                    var value;\r\n                    // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\r\n                    if (!parserInput.$re(/^opacity=/i)) {\r\n                        return;\r\n                    }\r\n                    value = parserInput.$re(/^\\d+/);\r\n                    if (!value) {\r\n                        value = expect(parsers.entities.variable, 'Could not parse alpha');\r\n                        value = \"@{\" + value.name.slice(1) + \"}\";\r\n                    }\r\n                    expectChar(')');\r\n                    return new tree.Quoted('', \"alpha(opacity=\" + value + \")\");\r\n                },\r\n                //\r\n                // A Selector Element\r\n                //\r\n                //     div\r\n                //     + h1\r\n                //     #socks\r\n                //     input[type=\"text\"]\r\n                //\r\n                // Elements are the building blocks for Selectors,\r\n                // they are made out of a `Combinator` (see combinator rule),\r\n                // and an element name, such as a tag a class, or `*`.\r\n                //\r\n                element: function () {\r\n                    var e;\r\n                    var c;\r\n                    var v;\r\n                    var index = parserInput.i;\r\n                    c = this.combinator();\r\n                    e = parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\r\n                        parserInput.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) ||\r\n                        parserInput.$char('*') || parserInput.$char('&') || this.attribute() ||\r\n                        parserInput.$re(/^\\([^&()@]+\\)/) || parserInput.$re(/^[\\.#:](?=@)/) ||\r\n                        this.entities.variableCurly();\r\n                    if (!e) {\r\n                        parserInput.save();\r\n                        if (parserInput.$char('(')) {\r\n                            if ((v = this.selector(false)) && parserInput.$char(')')) {\r\n                                e = new (tree.Paren)(v);\r\n                                parserInput.forget();\r\n                            }\r\n                            else {\r\n                                parserInput.restore('Missing closing \\')\\'');\r\n                            }\r\n                        }\r\n                        else {\r\n                            parserInput.forget();\r\n                        }\r\n                    }\r\n                    if (e) {\r\n                        return new (tree.Element)(c, e, e instanceof tree.Variable, index, fileInfo);\r\n                    }\r\n                },\r\n                //\r\n                // Combinators combine elements together, in a Selector.\r\n                //\r\n                // Because our parser isn't white-space sensitive, special care\r\n                // has to be taken, when parsing the descendant combinator, ` `,\r\n                // as it's an empty space. We have to check the previous character\r\n                // in the input, to see if it's a ` ` character. More info on how\r\n                // we deal with this in *combinator.js*.\r\n                //\r\n                combinator: function () {\r\n                    var c = parserInput.currentChar();\r\n                    if (c === '/') {\r\n                        parserInput.save();\r\n                        var slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i);\r\n                        if (slashedCombinator) {\r\n                            parserInput.forget();\r\n                            return new (tree.Combinator)(slashedCombinator);\r\n                        }\r\n                        parserInput.restore();\r\n                    }\r\n                    if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\r\n                        parserInput.i++;\r\n                        if (c === '^' && parserInput.currentChar() === '^') {\r\n                            c = '^^';\r\n                            parserInput.i++;\r\n                        }\r\n                        while (parserInput.isWhitespace()) {\r\n                            parserInput.i++;\r\n                        }\r\n                        return new (tree.Combinator)(c);\r\n                    }\r\n                    else if (parserInput.isWhitespace(-1)) {\r\n                        return new (tree.Combinator)(' ');\r\n                    }\r\n                    else {\r\n                        return new (tree.Combinator)(null);\r\n                    }\r\n                },\r\n                //\r\n                // A CSS Selector\r\n                // with less extensions e.g. the ability to extend and guard\r\n                //\r\n                //     .class > div + h1\r\n                //     li a:hover\r\n                //\r\n                // Selectors are made out of one or more Elements, see above.\r\n                //\r\n                selector: function (isLess) {\r\n                    var index = parserInput.i;\r\n                    var elements;\r\n                    var extendList;\r\n                    var c;\r\n                    var e;\r\n                    var allExtends;\r\n                    var when;\r\n                    var condition;\r\n                    isLess = isLess !== false;\r\n                    while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str('when'))) || (e = this.element())) {\r\n                        if (when) {\r\n                            condition = expect(this.conditions, 'expected condition');\r\n                        }\r\n                        else if (condition) {\r\n                            error('CSS guard can only be used at the end of selector');\r\n                        }\r\n                        else if (extendList) {\r\n                            if (allExtends) {\r\n                                allExtends = allExtends.concat(extendList);\r\n                            }\r\n                            else {\r\n                                allExtends = extendList;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (allExtends) {\r\n                                error('Extend can only be used at the end of selector');\r\n                            }\r\n                            c = parserInput.currentChar();\r\n                            if (elements) {\r\n                                elements.push(e);\r\n                            }\r\n                            else {\r\n                                elements = [e];\r\n                            }\r\n                            e = null;\r\n                        }\r\n                        if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (elements) {\r\n                        return new (tree.Selector)(elements, allExtends, condition, index, fileInfo);\r\n                    }\r\n                    if (allExtends) {\r\n                        error('Extend must be used to extend a selector, it cannot be used on its own');\r\n                    }\r\n                },\r\n                selectors: function () {\r\n                    var s;\r\n                    var selectors;\r\n                    while (true) {\r\n                        s = this.selector();\r\n                        if (!s) {\r\n                            break;\r\n                        }\r\n                        if (selectors) {\r\n                            selectors.push(s);\r\n                        }\r\n                        else {\r\n                            selectors = [s];\r\n                        }\r\n                        parserInput.commentStore.length = 0;\r\n                        if (s.condition && selectors.length > 1) {\r\n                            error(\"Guards are only currently allowed on a single selector.\");\r\n                        }\r\n                        if (!parserInput.$char(',')) {\r\n                            break;\r\n                        }\r\n                        if (s.condition) {\r\n                            error(\"Guards are only currently allowed on a single selector.\");\r\n                        }\r\n                        parserInput.commentStore.length = 0;\r\n                    }\r\n                    return selectors;\r\n                },\r\n                attribute: function () {\r\n                    if (!parserInput.$char('[')) {\r\n                        return;\r\n                    }\r\n                    var entities = this.entities;\r\n                    var key;\r\n                    var val;\r\n                    var op;\r\n                    //\r\n                    // case-insensitive flag\r\n                    // e.g. [attr operator value i]\r\n                    //\r\n                    var cif;\r\n                    if (!(key = entities.variableCurly())) {\r\n                        key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/);\r\n                    }\r\n                    op = parserInput.$re(/^[|~*$^]?=/);\r\n                    if (op) {\r\n                        val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\\w-]+/) || entities.variableCurly();\r\n                        if (val) {\r\n                            cif = parserInput.$re(/^[iIsS]/);\r\n                        }\r\n                    }\r\n                    expectChar(']');\r\n                    return new (tree.Attribute)(key, op, val, cif);\r\n                },\r\n                //\r\n                // The `block` rule is used by `ruleset` and `mixin.definition`.\r\n                // It's a wrapper around the `primary` rule, with added `{}`.\r\n                //\r\n                block: function () {\r\n                    var content;\r\n                    if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {\r\n                        return content;\r\n                    }\r\n                },\r\n                blockRuleset: function () {\r\n                    var block = this.block();\r\n                    if (block) {\r\n                        block = new tree.Ruleset(null, block);\r\n                    }\r\n                    return block;\r\n                },\r\n                detachedRuleset: function () {\r\n                    var argInfo;\r\n                    var params;\r\n                    var variadic;\r\n                    parserInput.save();\r\n                    if (parserInput.$re(/^[.#]\\(/)) {\r\n                        /**\r\n                         * DR args currently only implemented for each() function, and not\r\n                         * yet settable as `@dr: #(@arg) {}`\r\n                         * This should be done when DRs are merged with mixins.\r\n                         * See: https://github.com/less/less-meta/issues/16\r\n                         */\r\n                        argInfo = this.mixin.args(false);\r\n                        params = argInfo.args;\r\n                        variadic = argInfo.variadic;\r\n                        if (!parserInput.$char(')')) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                    }\r\n                    var blockRuleset = this.blockRuleset();\r\n                    if (blockRuleset) {\r\n                        parserInput.forget();\r\n                        if (params) {\r\n                            return new tree.mixin.Definition(null, params, blockRuleset, null, variadic);\r\n                        }\r\n                        return new tree.DetachedRuleset(blockRuleset);\r\n                    }\r\n                    parserInput.restore();\r\n                },\r\n                //\r\n                // div, .class, body > p {...}\r\n                //\r\n                ruleset: function () {\r\n                    var selectors;\r\n                    var rules;\r\n                    var debugInfo;\r\n                    parserInput.save();\r\n                    if (context.dumpLineNumbers) {\r\n                        debugInfo = getDebugInfo(parserInput.i);\r\n                    }\r\n                    selectors = this.selectors();\r\n                    if (selectors && (rules = this.block())) {\r\n                        parserInput.forget();\r\n                        var ruleset = new (tree.Ruleset)(selectors, rules, context.strictImports);\r\n                        if (context.dumpLineNumbers) {\r\n                            ruleset.debugInfo = debugInfo;\r\n                        }\r\n                        return ruleset;\r\n                    }\r\n                    else {\r\n                        parserInput.restore();\r\n                    }\r\n                },\r\n                declaration: function () {\r\n                    var name;\r\n                    var value;\r\n                    var index = parserInput.i;\r\n                    var hasDR;\r\n                    var c = parserInput.currentChar();\r\n                    var important;\r\n                    var merge;\r\n                    var isVariable;\r\n                    if (c === '.' || c === '#' || c === '&' || c === ':') {\r\n                        return;\r\n                    }\r\n                    parserInput.save();\r\n                    name = this.variable() || this.ruleProperty();\r\n                    if (name) {\r\n                        isVariable = typeof name === 'string';\r\n                        if (isVariable) {\r\n                            value = this.detachedRuleset();\r\n                            if (value) {\r\n                                hasDR = true;\r\n                            }\r\n                        }\r\n                        parserInput.commentStore.length = 0;\r\n                        if (!value) {\r\n                            // a name returned by this.ruleProperty() is always an array of the form:\r\n                            // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\r\n                            // where each item is a tree.Keyword or tree.Variable\r\n                            merge = !isVariable && name.length > 1 && name.pop().value;\r\n                            // Custom property values get permissive parsing\r\n                            if (name[0].value && name[0].value.slice(0, 2) === '--') {\r\n                                value = this.permissiveValue();\r\n                            }\r\n                            // Try to store values as anonymous\r\n                            // If we need the value later we'll re-parse it in ruleset.parseValue\r\n                            else {\r\n                                value = this.anonymousValue();\r\n                            }\r\n                            if (value) {\r\n                                parserInput.forget();\r\n                                // anonymous values absorb the end ';' which is required for them to work\r\n                                return new (tree.Declaration)(name, value, false, merge, index, fileInfo);\r\n                            }\r\n                            if (!value) {\r\n                                value = this.value();\r\n                            }\r\n                            if (value) {\r\n                                important = this.important();\r\n                            }\r\n                            else if (isVariable) {\r\n                                // As a last resort, try permissiveValue\r\n                                value = this.permissiveValue();\r\n                            }\r\n                        }\r\n                        if (value && (this.end() || hasDR)) {\r\n                            parserInput.forget();\r\n                            return new (tree.Declaration)(name, value, important, merge, index, fileInfo);\r\n                        }\r\n                        else {\r\n                            parserInput.restore();\r\n                        }\r\n                    }\r\n                    else {\r\n                        parserInput.restore();\r\n                    }\r\n                },\r\n                anonymousValue: function () {\r\n                    var index = parserInput.i;\r\n                    var match = parserInput.$re(/^([^.#@\\$+\\/'\"*`(;{}-]*);/);\r\n                    if (match) {\r\n                        return new (tree.Anonymous)(match[1], index);\r\n                    }\r\n                },\r\n                /**\r\n                 * Used for custom properties, at-rules, and variables (as fallback)\r\n                 * Parses almost anything inside of {} [] () \"\" blocks\r\n                 * until it reaches outer-most tokens.\r\n                 *\r\n                 * First, it will try to parse comments and entities to reach\r\n                 * the end. This is mostly like the Expression parser except no\r\n                 * math is allowed.\r\n                 */\r\n                permissiveValue: function (untilTokens) {\r\n                    var i;\r\n                    var e;\r\n                    var done;\r\n                    var value;\r\n                    var tok = untilTokens || ';';\r\n                    var index = parserInput.i;\r\n                    var result = [];\r\n                    function testCurrentChar() {\r\n                        var char = parserInput.currentChar();\r\n                        if (typeof tok === 'string') {\r\n                            return char === tok;\r\n                        }\r\n                        else {\r\n                            return tok.test(char);\r\n                        }\r\n                    }\r\n                    if (testCurrentChar()) {\r\n                        return;\r\n                    }\r\n                    value = [];\r\n                    do {\r\n                        e = this.comment();\r\n                        if (e) {\r\n                            value.push(e);\r\n                            continue;\r\n                        }\r\n                        e = this.entity();\r\n                        if (e) {\r\n                            value.push(e);\r\n                        }\r\n                    } while (e);\r\n                    done = testCurrentChar();\r\n                    if (value.length > 0) {\r\n                        value = new (tree.Expression)(value);\r\n                        if (done) {\r\n                            return value;\r\n                        }\r\n                        else {\r\n                            result.push(value);\r\n                        }\r\n                        // Preserve space before $parseUntil as it will not\r\n                        if (parserInput.prevChar() === ' ') {\r\n                            result.push(new tree.Anonymous(' ', index));\r\n                        }\r\n                    }\r\n                    parserInput.save();\r\n                    value = parserInput.$parseUntil(tok);\r\n                    if (value) {\r\n                        if (typeof value === 'string') {\r\n                            error(\"Expected '\" + value + \"'\", 'Parse');\r\n                        }\r\n                        if (value.length === 1 && value[0] === ' ') {\r\n                            parserInput.forget();\r\n                            return new tree.Anonymous('', index);\r\n                        }\r\n                        var item = void 0;\r\n                        for (i = 0; i < value.length; i++) {\r\n                            item = value[i];\r\n                            if (Array.isArray(item)) {\r\n                                // Treat actual quotes as normal quoted values\r\n                                result.push(new tree.Quoted(item[0], item[1], true, index, fileInfo));\r\n                            }\r\n                            else {\r\n                                if (i === value.length - 1) {\r\n                                    item = item.trim();\r\n                                }\r\n                                // Treat like quoted values, but replace vars like unquoted expressions\r\n                                var quote = new tree.Quoted('\\'', item, true, index, fileInfo);\r\n                                quote.variableRegex = /@([\\w-]+)/g;\r\n                                quote.propRegex = /\\$([\\w-]+)/g;\r\n                                result.push(quote);\r\n                            }\r\n                        }\r\n                        parserInput.forget();\r\n                        return new tree.Expression(result, true);\r\n                    }\r\n                    parserInput.restore();\r\n                },\r\n                //\r\n                // An @import atrule\r\n                //\r\n                //     @import \"lib\";\r\n                //\r\n                // Depending on our environment, importing is done differently:\r\n                // In the browser, it's an XHR request, in Node, it would be a\r\n                // file-system operation. The function used for importing is\r\n                // stored in `import`, which we pass to the Import constructor.\r\n                //\r\n                'import': function () {\r\n                    var path;\r\n                    var features;\r\n                    var index = parserInput.i;\r\n                    var dir = parserInput.$re(/^@import\\s+/);\r\n                    if (dir) {\r\n                        var options = (dir ? this.importOptions() : null) || {};\r\n                        if ((path = this.entities.quoted() || this.entities.url())) {\r\n                            features = this.mediaFeatures();\r\n                            if (!parserInput.$char(';')) {\r\n                                parserInput.i = index;\r\n                                error('missing semi-colon or unrecognised media features on import');\r\n                            }\r\n                            features = features && new (tree.Value)(features);\r\n                            return new (tree.Import)(path, features, options, index, fileInfo);\r\n                        }\r\n                        else {\r\n                            parserInput.i = index;\r\n                            error('malformed import statement');\r\n                        }\r\n                    }\r\n                },\r\n                importOptions: function () {\r\n                    var o;\r\n                    var options = {};\r\n                    var optionName;\r\n                    var value;\r\n                    // list of options, surrounded by parens\r\n                    if (!parserInput.$char('(')) {\r\n                        return null;\r\n                    }\r\n                    do {\r\n                        o = this.importOption();\r\n                        if (o) {\r\n                            optionName = o;\r\n                            value = true;\r\n                            switch (optionName) {\r\n                                case 'css':\r\n                                    optionName = 'less';\r\n                                    value = false;\r\n                                    break;\r\n                                case 'once':\r\n                                    optionName = 'multiple';\r\n                                    value = false;\r\n                                    break;\r\n                            }\r\n                            options[optionName] = value;\r\n                            if (!parserInput.$char(',')) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    } while (o);\r\n                    expectChar(')');\r\n                    return options;\r\n                },\r\n                importOption: function () {\r\n                    var opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);\r\n                    if (opt) {\r\n                        return opt[1];\r\n                    }\r\n                },\r\n                mediaFeature: function () {\r\n                    var entities = this.entities;\r\n                    var nodes = [];\r\n                    var e;\r\n                    var p;\r\n                    parserInput.save();\r\n                    do {\r\n                        e = entities.keyword() || entities.variable() || entities.mixinLookup();\r\n                        if (e) {\r\n                            nodes.push(e);\r\n                        }\r\n                        else if (parserInput.$char('(')) {\r\n                            p = this.property();\r\n                            e = this.value();\r\n                            if (parserInput.$char(')')) {\r\n                                if (p && e) {\r\n                                    nodes.push(new (tree.Paren)(new (tree.Declaration)(p, e, null, null, parserInput.i, fileInfo, true)));\r\n                                }\r\n                                else if (e) {\r\n                                    nodes.push(new (tree.Paren)(e));\r\n                                }\r\n                                else {\r\n                                    error('badly formed media feature definition');\r\n                                }\r\n                            }\r\n                            else {\r\n                                error('Missing closing \\')\\'', 'Parse');\r\n                            }\r\n                        }\r\n                    } while (e);\r\n                    parserInput.forget();\r\n                    if (nodes.length > 0) {\r\n                        return new (tree.Expression)(nodes);\r\n                    }\r\n                },\r\n                mediaFeatures: function () {\r\n                    var entities = this.entities;\r\n                    var features = [];\r\n                    var e;\r\n                    do {\r\n                        e = this.mediaFeature();\r\n                        if (e) {\r\n                            features.push(e);\r\n                            if (!parserInput.$char(',')) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        else {\r\n                            e = entities.variable() || entities.mixinLookup();\r\n                            if (e) {\r\n                                features.push(e);\r\n                                if (!parserInput.$char(',')) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    } while (e);\r\n                    return features.length > 0 ? features : null;\r\n                },\r\n                media: function () {\r\n                    var features;\r\n                    var rules;\r\n                    var media;\r\n                    var debugInfo;\r\n                    var index = parserInput.i;\r\n                    if (context.dumpLineNumbers) {\r\n                        debugInfo = getDebugInfo(index);\r\n                    }\r\n                    parserInput.save();\r\n                    if (parserInput.$str('@media')) {\r\n                        features = this.mediaFeatures();\r\n                        rules = this.block();\r\n                        if (!rules) {\r\n                            error('media definitions require block statements after any features');\r\n                        }\r\n                        parserInput.forget();\r\n                        media = new (tree.Media)(rules, features, index, fileInfo);\r\n                        if (context.dumpLineNumbers) {\r\n                            media.debugInfo = debugInfo;\r\n                        }\r\n                        return media;\r\n                    }\r\n                    parserInput.restore();\r\n                },\r\n                //\r\n                // A @plugin directive, used to import plugins dynamically.\r\n                //\r\n                //     @plugin (args) \"lib\";\r\n                //\r\n                plugin: function () {\r\n                    var path;\r\n                    var args;\r\n                    var options;\r\n                    var index = parserInput.i;\r\n                    var dir = parserInput.$re(/^@plugin\\s+/);\r\n                    if (dir) {\r\n                        args = this.pluginArgs();\r\n                        if (args) {\r\n                            options = {\r\n                                pluginArgs: args,\r\n                                isPlugin: true\r\n                            };\r\n                        }\r\n                        else {\r\n                            options = { isPlugin: true };\r\n                        }\r\n                        if ((path = this.entities.quoted() || this.entities.url())) {\r\n                            if (!parserInput.$char(';')) {\r\n                                parserInput.i = index;\r\n                                error('missing semi-colon on @plugin');\r\n                            }\r\n                            return new (tree.Import)(path, null, options, index, fileInfo);\r\n                        }\r\n                        else {\r\n                            parserInput.i = index;\r\n                            error('malformed @plugin statement');\r\n                        }\r\n                    }\r\n                },\r\n                pluginArgs: function () {\r\n                    // list of options, surrounded by parens\r\n                    parserInput.save();\r\n                    if (!parserInput.$char('(')) {\r\n                        parserInput.restore();\r\n                        return null;\r\n                    }\r\n                    var args = parserInput.$re(/^\\s*([^\\);]+)\\)\\s*/);\r\n                    if (args[1]) {\r\n                        parserInput.forget();\r\n                        return args[1].trim();\r\n                    }\r\n                    else {\r\n                        parserInput.restore();\r\n                        return null;\r\n                    }\r\n                },\r\n                //\r\n                // A CSS AtRule\r\n                //\r\n                //     @charset \"utf-8\";\r\n                //\r\n                atrule: function () {\r\n                    var index = parserInput.i;\r\n                    var name;\r\n                    var value;\r\n                    var rules;\r\n                    var nonVendorSpecificName;\r\n                    var hasIdentifier;\r\n                    var hasExpression;\r\n                    var hasUnknown;\r\n                    var hasBlock = true;\r\n                    var isRooted = true;\r\n                    if (parserInput.currentChar() !== '@') {\r\n                        return;\r\n                    }\r\n                    value = this['import']() || this.plugin() || this.media();\r\n                    if (value) {\r\n                        return value;\r\n                    }\r\n                    parserInput.save();\r\n                    name = parserInput.$re(/^@[a-z-]+/);\r\n                    if (!name) {\r\n                        return;\r\n                    }\r\n                    nonVendorSpecificName = name;\r\n                    if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\r\n                        nonVendorSpecificName = \"@\" + name.slice(name.indexOf('-', 2) + 1);\r\n                    }\r\n                    switch (nonVendorSpecificName) {\r\n                        case '@charset':\r\n                            hasIdentifier = true;\r\n                            hasBlock = false;\r\n                            break;\r\n                        case '@namespace':\r\n                            hasExpression = true;\r\n                            hasBlock = false;\r\n                            break;\r\n                        case '@keyframes':\r\n                        case '@counter-style':\r\n                            hasIdentifier = true;\r\n                            break;\r\n                        case '@document':\r\n                        case '@supports':\r\n                            hasUnknown = true;\r\n                            isRooted = false;\r\n                            break;\r\n                        default:\r\n                            hasUnknown = true;\r\n                            break;\r\n                    }\r\n                    parserInput.commentStore.length = 0;\r\n                    if (hasIdentifier) {\r\n                        value = this.entity();\r\n                        if (!value) {\r\n                            error(\"expected \" + name + \" identifier\");\r\n                        }\r\n                    }\r\n                    else if (hasExpression) {\r\n                        value = this.expression();\r\n                        if (!value) {\r\n                            error(\"expected \" + name + \" expression\");\r\n                        }\r\n                    }\r\n                    else if (hasUnknown) {\r\n                        value = this.permissiveValue(/^[{;]/);\r\n                        hasBlock = (parserInput.currentChar() === '{');\r\n                        if (!value) {\r\n                            if (!hasBlock && parserInput.currentChar() !== ';') {\r\n                                error(name + \" rule is missing block or ending semi-colon\");\r\n                            }\r\n                        }\r\n                        else if (!value.value) {\r\n                            value = null;\r\n                        }\r\n                    }\r\n                    if (hasBlock) {\r\n                        rules = this.blockRuleset();\r\n                    }\r\n                    if (rules || (!hasBlock && value && parserInput.$char(';'))) {\r\n                        parserInput.forget();\r\n                        return new (tree.AtRule)(name, value, rules, index, fileInfo, context.dumpLineNumbers ? getDebugInfo(index) : null, isRooted);\r\n                    }\r\n                    parserInput.restore('at-rule options not recognised');\r\n                },\r\n                //\r\n                // A Value is a comma-delimited list of Expressions\r\n                //\r\n                //     font-family: Baskerville, Georgia, serif;\r\n                //\r\n                // In a Rule, a Value represents everything after the `:`,\r\n                // and before the `;`.\r\n                //\r\n                value: function () {\r\n                    var e;\r\n                    var expressions = [];\r\n                    var index = parserInput.i;\r\n                    do {\r\n                        e = this.expression();\r\n                        if (e) {\r\n                            expressions.push(e);\r\n                            if (!parserInput.$char(',')) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    } while (e);\r\n                    if (expressions.length > 0) {\r\n                        return new (tree.Value)(expressions, index);\r\n                    }\r\n                },\r\n                important: function () {\r\n                    if (parserInput.currentChar() === '!') {\r\n                        return parserInput.$re(/^! *important/);\r\n                    }\r\n                },\r\n                sub: function () {\r\n                    var a;\r\n                    var e;\r\n                    parserInput.save();\r\n                    if (parserInput.$char('(')) {\r\n                        a = this.addition();\r\n                        if (a && parserInput.$char(')')) {\r\n                            parserInput.forget();\r\n                            e = new (tree.Expression)([a]);\r\n                            e.parens = true;\r\n                            return e;\r\n                        }\r\n                        parserInput.restore('Expected \\')\\'');\r\n                        return;\r\n                    }\r\n                    parserInput.restore();\r\n                },\r\n                multiplication: function () {\r\n                    var m;\r\n                    var a;\r\n                    var op;\r\n                    var operation;\r\n                    var isSpaced;\r\n                    m = this.operand();\r\n                    if (m) {\r\n                        isSpaced = parserInput.isWhitespace(-1);\r\n                        while (true) {\r\n                            if (parserInput.peek(/^\\/[*\\/]/)) {\r\n                                break;\r\n                            }\r\n                            parserInput.save();\r\n                            op = parserInput.$char('/') || parserInput.$char('*') || parserInput.$str('./');\r\n                            if (!op) {\r\n                                parserInput.forget();\r\n                                break;\r\n                            }\r\n                            a = this.operand();\r\n                            if (!a) {\r\n                                parserInput.restore();\r\n                                break;\r\n                            }\r\n                            parserInput.forget();\r\n                            m.parensInOp = true;\r\n                            a.parensInOp = true;\r\n                            operation = new (tree.Operation)(op, [operation || m, a], isSpaced);\r\n                            isSpaced = parserInput.isWhitespace(-1);\r\n                        }\r\n                        return operation || m;\r\n                    }\r\n                },\r\n                addition: function () {\r\n                    var m;\r\n                    var a;\r\n                    var op;\r\n                    var operation;\r\n                    var isSpaced;\r\n                    m = this.multiplication();\r\n                    if (m) {\r\n                        isSpaced = parserInput.isWhitespace(-1);\r\n                        while (true) {\r\n                            op = parserInput.$re(/^[-+]\\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));\r\n                            if (!op) {\r\n                                break;\r\n                            }\r\n                            a = this.multiplication();\r\n                            if (!a) {\r\n                                break;\r\n                            }\r\n                            m.parensInOp = true;\r\n                            a.parensInOp = true;\r\n                            operation = new (tree.Operation)(op, [operation || m, a], isSpaced);\r\n                            isSpaced = parserInput.isWhitespace(-1);\r\n                        }\r\n                        return operation || m;\r\n                    }\r\n                },\r\n                conditions: function () {\r\n                    var a;\r\n                    var b;\r\n                    var index = parserInput.i;\r\n                    var condition;\r\n                    a = this.condition(true);\r\n                    if (a) {\r\n                        while (true) {\r\n                            if (!parserInput.peek(/^,\\s*(not\\s*)?\\(/) || !parserInput.$char(',')) {\r\n                                break;\r\n                            }\r\n                            b = this.condition(true);\r\n                            if (!b) {\r\n                                break;\r\n                            }\r\n                            condition = new (tree.Condition)('or', condition || a, b, index);\r\n                        }\r\n                        return condition || a;\r\n                    }\r\n                },\r\n                condition: function (needsParens) {\r\n                    var result;\r\n                    var logical;\r\n                    var next;\r\n                    function or() {\r\n                        return parserInput.$str('or');\r\n                    }\r\n                    result = this.conditionAnd(needsParens);\r\n                    if (!result) {\r\n                        return;\r\n                    }\r\n                    logical = or();\r\n                    if (logical) {\r\n                        next = this.condition(needsParens);\r\n                        if (next) {\r\n                            result = new (tree.Condition)(logical, result, next);\r\n                        }\r\n                        else {\r\n                            return;\r\n                        }\r\n                    }\r\n                    return result;\r\n                },\r\n                conditionAnd: function (needsParens) {\r\n                    var result;\r\n                    var logical;\r\n                    var next;\r\n                    var self = this;\r\n                    function insideCondition() {\r\n                        var cond = self.negatedCondition(needsParens) || self.parenthesisCondition(needsParens);\r\n                        if (!cond && !needsParens) {\r\n                            return self.atomicCondition(needsParens);\r\n                        }\r\n                        return cond;\r\n                    }\r\n                    function and() {\r\n                        return parserInput.$str('and');\r\n                    }\r\n                    result = insideCondition();\r\n                    if (!result) {\r\n                        return;\r\n                    }\r\n                    logical = and();\r\n                    if (logical) {\r\n                        next = this.conditionAnd(needsParens);\r\n                        if (next) {\r\n                            result = new (tree.Condition)(logical, result, next);\r\n                        }\r\n                        else {\r\n                            return;\r\n                        }\r\n                    }\r\n                    return result;\r\n                },\r\n                negatedCondition: function (needsParens) {\r\n                    if (parserInput.$str('not')) {\r\n                        var result = this.parenthesisCondition(needsParens);\r\n                        if (result) {\r\n                            result.negate = !result.negate;\r\n                        }\r\n                        return result;\r\n                    }\r\n                },\r\n                parenthesisCondition: function (needsParens) {\r\n                    function tryConditionFollowedByParenthesis(me) {\r\n                        var body;\r\n                        parserInput.save();\r\n                        body = me.condition(needsParens);\r\n                        if (!body) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        if (!parserInput.$char(')')) {\r\n                            parserInput.restore();\r\n                            return;\r\n                        }\r\n                        parserInput.forget();\r\n                        return body;\r\n                    }\r\n                    var body;\r\n                    parserInput.save();\r\n                    if (!parserInput.$str('(')) {\r\n                        parserInput.restore();\r\n                        return;\r\n                    }\r\n                    body = tryConditionFollowedByParenthesis(this);\r\n                    if (body) {\r\n                        parserInput.forget();\r\n                        return body;\r\n                    }\r\n                    body = this.atomicCondition(needsParens);\r\n                    if (!body) {\r\n                        parserInput.restore();\r\n                        return;\r\n                    }\r\n                    if (!parserInput.$char(')')) {\r\n                        parserInput.restore(\"expected ')' got '\" + parserInput.currentChar() + \"'\");\r\n                        return;\r\n                    }\r\n                    parserInput.forget();\r\n                    return body;\r\n                },\r\n                atomicCondition: function (needsParens) {\r\n                    var entities = this.entities;\r\n                    var index = parserInput.i;\r\n                    var a;\r\n                    var b;\r\n                    var c;\r\n                    var op;\r\n                    function cond() {\r\n                        return this.addition() || entities.keyword() || entities.quoted() || entities.mixinLookup();\r\n                    }\r\n                    cond = cond.bind(this);\r\n                    a = cond();\r\n                    if (a) {\r\n                        if (parserInput.$char('>')) {\r\n                            if (parserInput.$char('=')) {\r\n                                op = '>=';\r\n                            }\r\n                            else {\r\n                                op = '>';\r\n                            }\r\n                        }\r\n                        else if (parserInput.$char('<')) {\r\n                            if (parserInput.$char('=')) {\r\n                                op = '<=';\r\n                            }\r\n                            else {\r\n                                op = '<';\r\n                            }\r\n                        }\r\n                        else if (parserInput.$char('=')) {\r\n                            if (parserInput.$char('>')) {\r\n                                op = '=>';\r\n                            }\r\n                            else if (parserInput.$char('<')) {\r\n                                op = '=<';\r\n                            }\r\n                            else {\r\n                                op = '=';\r\n                            }\r\n                        }\r\n                        if (op) {\r\n                            b = cond();\r\n                            if (b) {\r\n                                c = new (tree.Condition)(op, a, b, index, false);\r\n                            }\r\n                            else {\r\n                                error('expected expression');\r\n                            }\r\n                        }\r\n                        else {\r\n                            c = new (tree.Condition)('=', a, new (tree.Keyword)('true'), index, false);\r\n                        }\r\n                        return c;\r\n                    }\r\n                },\r\n                //\r\n                // An operand is anything that can be part of an operation,\r\n                // such as a Color, or a Variable\r\n                //\r\n                operand: function () {\r\n                    var entities = this.entities;\r\n                    var negate;\r\n                    if (parserInput.peek(/^-[@\\$\\(]/)) {\r\n                        negate = parserInput.$char('-');\r\n                    }\r\n                    var o = this.sub() || entities.dimension() ||\r\n                        entities.color() || entities.variable() ||\r\n                        entities.property() || entities.call() ||\r\n                        entities.quoted(true) || entities.colorKeyword() ||\r\n                        entities.mixinLookup();\r\n                    if (negate) {\r\n                        o.parensInOp = true;\r\n                        o = new (tree.Negative)(o);\r\n                    }\r\n                    return o;\r\n                },\r\n                //\r\n                // Expressions either represent mathematical operations,\r\n                // or white-space delimited Entities.\r\n                //\r\n                //     1px solid black\r\n                //     @var * 2\r\n                //\r\n                expression: function () {\r\n                    var entities = [];\r\n                    var e;\r\n                    var delim;\r\n                    var index = parserInput.i;\r\n                    do {\r\n                        e = this.comment();\r\n                        if (e) {\r\n                            entities.push(e);\r\n                            continue;\r\n                        }\r\n                        e = this.addition() || this.entity();\r\n                        if (e instanceof tree.Comment) {\r\n                            e = null;\r\n                        }\r\n                        if (e) {\r\n                            entities.push(e);\r\n                            // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\r\n                            if (!parserInput.peek(/^\\/[\\/*]/)) {\r\n                                delim = parserInput.$char('/');\r\n                                if (delim) {\r\n                                    entities.push(new (tree.Anonymous)(delim, index));\r\n                                }\r\n                            }\r\n                        }\r\n                    } while (e);\r\n                    if (entities.length > 0) {\r\n                        return new (tree.Expression)(entities);\r\n                    }\r\n                },\r\n                property: function () {\r\n                    var name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);\r\n                    if (name) {\r\n                        return name[1];\r\n                    }\r\n                },\r\n                ruleProperty: function () {\r\n                    var name = [];\r\n                    var index = [];\r\n                    var s;\r\n                    var k;\r\n                    parserInput.save();\r\n                    var simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/);\r\n                    if (simpleProperty) {\r\n                        name = [new (tree.Keyword)(simpleProperty[1])];\r\n                        parserInput.forget();\r\n                        return name;\r\n                    }\r\n                    function match(re) {\r\n                        var i = parserInput.i;\r\n                        var chunk = parserInput.$re(re);\r\n                        if (chunk) {\r\n                            index.push(i);\r\n                            return name.push(chunk[1]);\r\n                        }\r\n                    }\r\n                    match(/^(\\*?)/);\r\n                    while (true) {\r\n                        if (!match(/^((?:[\\w-]+)|(?:[@\\$]\\{[\\w-]+\\}))/)) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if ((name.length > 1) && match(/^((?:\\+_|\\+)?)\\s*:/)) {\r\n                        parserInput.forget();\r\n                        // at last, we have the complete match now. move forward,\r\n                        // convert name particles to tree objects and return:\r\n                        if (name[0] === '') {\r\n                            name.shift();\r\n                            index.shift();\r\n                        }\r\n                        for (k = 0; k < name.length; k++) {\r\n                            s = name[k];\r\n                            name[k] = (s.charAt(0) !== '@' && s.charAt(0) !== '$') ?\r\n                                new (tree.Keyword)(s) :\r\n                                (s.charAt(0) === '@' ?\r\n                                    new (tree.Variable)(\"@\" + s.slice(2, -1), index[k], fileInfo) :\r\n                                    new (tree.Property)(\"$\" + s.slice(2, -1), index[k], fileInfo));\r\n                        }\r\n                        return name;\r\n                    }\r\n                    parserInput.restore();\r\n                }\r\n            }\r\n        };\r\n    };\r\n    Parser.serializeVars = function (vars) {\r\n        var s = '';\r\n        for (var name_1 in vars) {\r\n            if (Object.hasOwnProperty.call(vars, name_1)) {\r\n                var value = vars[name_1];\r\n                s += ((name_1[0] === '@') ? '' : '@') + name_1 + \": \" + value + ((String(value).slice(-1) === ';') ? '' : ';');\r\n            }\r\n        }\r\n        return s;\r\n    };\n\n    function boolean(condition) {\r\n        return condition ? Keyword.True : Keyword.False;\r\n    }\r\n    /**\r\n     * Functions with evalArgs set to false are sent context\r\n     * as the first argument.\r\n     */\r\n    function If(context, condition, trueValue, falseValue) {\r\n        return condition.eval(context) ? trueValue.eval(context)\r\n            : (falseValue ? falseValue.eval(context) : new Anonymous);\r\n    }\r\n    If.evalArgs = false;\r\n    function isdefined(context, variable) {\r\n        try {\r\n            variable.eval(context);\r\n            return Keyword.True;\r\n        }\r\n        catch (e) {\r\n            return Keyword.False;\r\n        }\r\n    }\r\n    isdefined.evalArgs = false;\r\n    var boolean$1 = { isdefined: isdefined, boolean: boolean, 'if': If };\n\n    var colorFunctions;\r\n    function clamp(val) {\r\n        return Math.min(1, Math.max(0, val));\r\n    }\r\n    function hsla(origColor, hsl) {\r\n        var color = colorFunctions.hsla(hsl.h, hsl.s, hsl.l, hsl.a);\r\n        if (color) {\r\n            if (origColor.value &&\r\n                /^(rgb|hsl)/.test(origColor.value)) {\r\n                color.value = origColor.value;\r\n            }\r\n            else {\r\n                color.value = 'rgb';\r\n            }\r\n            return color;\r\n        }\r\n    }\r\n    function toHSL(color) {\r\n        if (color.toHSL) {\r\n            return color.toHSL();\r\n        }\r\n        else {\r\n            throw new Error('Argument cannot be evaluated to a color');\r\n        }\r\n    }\r\n    function toHSV(color) {\r\n        if (color.toHSV) {\r\n            return color.toHSV();\r\n        }\r\n        else {\r\n            throw new Error('Argument cannot be evaluated to a color');\r\n        }\r\n    }\r\n    function number$1(n) {\r\n        if (n instanceof Dimension) {\r\n            return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\r\n        }\r\n        else if (typeof n === 'number') {\r\n            return n;\r\n        }\r\n        else {\r\n            throw {\r\n                type: 'Argument',\r\n                message: 'color functions take numbers as parameters'\r\n            };\r\n        }\r\n    }\r\n    function scaled(n, size) {\r\n        if (n instanceof Dimension && n.unit.is('%')) {\r\n            return parseFloat(n.value * size / 100);\r\n        }\r\n        else {\r\n            return number$1(n);\r\n        }\r\n    }\r\n    colorFunctions = {\r\n        rgb: function (r, g, b) {\r\n            var a = 1;\r\n            /**\r\n             * Comma-less syntax\r\n             *   e.g. rgb(0 128 255 / 50%)\r\n             */\r\n            if (r instanceof Expression) {\r\n                var val = r.value;\r\n                r = val[0];\r\n                g = val[1];\r\n                b = val[2];\r\n                /**\r\n                 * @todo - should this be normalized in\r\n                 *   function caller? Or parsed differently?\r\n                 */\r\n                if (b instanceof Operation) {\r\n                    var op = b;\r\n                    b = op.operands[0];\r\n                    a = op.operands[1];\r\n                }\r\n            }\r\n            var color = colorFunctions.rgba(r, g, b, a);\r\n            if (color) {\r\n                color.value = 'rgb';\r\n                return color;\r\n            }\r\n        },\r\n        rgba: function (r, g, b, a) {\r\n            try {\r\n                if (r instanceof Color) {\r\n                    if (g) {\r\n                        a = number$1(g);\r\n                    }\r\n                    else {\r\n                        a = r.alpha;\r\n                    }\r\n                    return new Color(r.rgb, a, 'rgba');\r\n                }\r\n                var rgb = [r, g, b].map(function (c) { return scaled(c, 255); });\r\n                a = number$1(a);\r\n                return new Color(rgb, a, 'rgba');\r\n            }\r\n            catch (e) { }\r\n        },\r\n        hsl: function (h, s, l) {\r\n            var a = 1;\r\n            if (h instanceof Expression) {\r\n                var val = h.value;\r\n                h = val[0];\r\n                s = val[1];\r\n                l = val[2];\r\n                if (l instanceof Operation) {\r\n                    var op = l;\r\n                    l = op.operands[0];\r\n                    a = op.operands[1];\r\n                }\r\n            }\r\n            var color = colorFunctions.hsla(h, s, l, a);\r\n            if (color) {\r\n                color.value = 'hsl';\r\n                return color;\r\n            }\r\n        },\r\n        hsla: function (h, s, l, a) {\r\n            try {\r\n                if (h instanceof Color) {\r\n                    if (s) {\r\n                        a = number$1(s);\r\n                    }\r\n                    else {\r\n                        a = h.alpha;\r\n                    }\r\n                    return new Color(h.rgb, a, 'hsla');\r\n                }\r\n                var m1_1;\r\n                var m2_1;\r\n                function hue(h) {\r\n                    h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\r\n                    if (h * 6 < 1) {\r\n                        return m1_1 + (m2_1 - m1_1) * h * 6;\r\n                    }\r\n                    else if (h * 2 < 1) {\r\n                        return m2_1;\r\n                    }\r\n                    else if (h * 3 < 2) {\r\n                        return m1_1 + (m2_1 - m1_1) * (2 / 3 - h) * 6;\r\n                    }\r\n                    else {\r\n                        return m1_1;\r\n                    }\r\n                }\r\n                h = (number$1(h) % 360) / 360;\r\n                s = clamp(number$1(s));\r\n                l = clamp(number$1(l));\r\n                a = clamp(number$1(a));\r\n                m2_1 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\r\n                m1_1 = l * 2 - m2_1;\r\n                var rgb = [\r\n                    hue(h + 1 / 3) * 255,\r\n                    hue(h) * 255,\r\n                    hue(h - 1 / 3) * 255\r\n                ];\r\n                a = number$1(a);\r\n                return new Color(rgb, a, 'hsla');\r\n            }\r\n            catch (e) { }\r\n        },\r\n        hsv: function (h, s, v) {\r\n            return colorFunctions.hsva(h, s, v, 1.0);\r\n        },\r\n        hsva: function (h, s, v, a) {\r\n            h = ((number$1(h) % 360) / 360) * 360;\r\n            s = number$1(s);\r\n            v = number$1(v);\r\n            a = number$1(a);\r\n            var i;\r\n            var f;\r\n            i = Math.floor((h / 60) % 6);\r\n            f = (h / 60) - i;\r\n            var vs = [v,\r\n                v * (1 - s),\r\n                v * (1 - f * s),\r\n                v * (1 - (1 - f) * s)];\r\n            var perm = [[0, 3, 1],\r\n                [2, 0, 1],\r\n                [1, 0, 3],\r\n                [1, 2, 0],\r\n                [3, 1, 0],\r\n                [0, 1, 2]];\r\n            return colorFunctions.rgba(vs[perm[i][0]] * 255, vs[perm[i][1]] * 255, vs[perm[i][2]] * 255, a);\r\n        },\r\n        hue: function (color) {\r\n            return new Dimension(toHSL(color).h);\r\n        },\r\n        saturation: function (color) {\r\n            return new Dimension(toHSL(color).s * 100, '%');\r\n        },\r\n        lightness: function (color) {\r\n            return new Dimension(toHSL(color).l * 100, '%');\r\n        },\r\n        hsvhue: function (color) {\r\n            return new Dimension(toHSV(color).h);\r\n        },\r\n        hsvsaturation: function (color) {\r\n            return new Dimension(toHSV(color).s * 100, '%');\r\n        },\r\n        hsvvalue: function (color) {\r\n            return new Dimension(toHSV(color).v * 100, '%');\r\n        },\r\n        red: function (color) {\r\n            return new Dimension(color.rgb[0]);\r\n        },\r\n        green: function (color) {\r\n            return new Dimension(color.rgb[1]);\r\n        },\r\n        blue: function (color) {\r\n            return new Dimension(color.rgb[2]);\r\n        },\r\n        alpha: function (color) {\r\n            return new Dimension(toHSL(color).a);\r\n        },\r\n        luma: function (color) {\r\n            return new Dimension(color.luma() * color.alpha * 100, '%');\r\n        },\r\n        luminance: function (color) {\r\n            var luminance = (0.2126 * color.rgb[0] / 255) +\r\n                (0.7152 * color.rgb[1] / 255) +\r\n                (0.0722 * color.rgb[2] / 255);\r\n            return new Dimension(luminance * color.alpha * 100, '%');\r\n        },\r\n        saturate: function (color, amount, method) {\r\n            // filter: saturate(3.2);\r\n            // should be kept as is, so check for color\r\n            if (!color.rgb) {\r\n                return null;\r\n            }\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.s += hsl.s * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.s += amount.value / 100;\r\n            }\r\n            hsl.s = clamp(hsl.s);\r\n            return hsla(color, hsl);\r\n        },\r\n        desaturate: function (color, amount, method) {\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.s -= hsl.s * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.s -= amount.value / 100;\r\n            }\r\n            hsl.s = clamp(hsl.s);\r\n            return hsla(color, hsl);\r\n        },\r\n        lighten: function (color, amount, method) {\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.l += hsl.l * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.l += amount.value / 100;\r\n            }\r\n            hsl.l = clamp(hsl.l);\r\n            return hsla(color, hsl);\r\n        },\r\n        darken: function (color, amount, method) {\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.l -= hsl.l * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.l -= amount.value / 100;\r\n            }\r\n            hsl.l = clamp(hsl.l);\r\n            return hsla(color, hsl);\r\n        },\r\n        fadein: function (color, amount, method) {\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.a += hsl.a * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.a += amount.value / 100;\r\n            }\r\n            hsl.a = clamp(hsl.a);\r\n            return hsla(color, hsl);\r\n        },\r\n        fadeout: function (color, amount, method) {\r\n            var hsl = toHSL(color);\r\n            if (typeof method !== 'undefined' && method.value === 'relative') {\r\n                hsl.a -= hsl.a * amount.value / 100;\r\n            }\r\n            else {\r\n                hsl.a -= amount.value / 100;\r\n            }\r\n            hsl.a = clamp(hsl.a);\r\n            return hsla(color, hsl);\r\n        },\r\n        fade: function (color, amount) {\r\n            var hsl = toHSL(color);\r\n            hsl.a = amount.value / 100;\r\n            hsl.a = clamp(hsl.a);\r\n            return hsla(color, hsl);\r\n        },\r\n        spin: function (color, amount) {\r\n            var hsl = toHSL(color);\r\n            var hue = (hsl.h + amount.value) % 360;\r\n            hsl.h = hue < 0 ? 360 + hue : hue;\r\n            return hsla(color, hsl);\r\n        },\r\n        //\r\n        // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\r\n        // http://sass-lang.com\r\n        //\r\n        mix: function (color1, color2, weight) {\r\n            if (!weight) {\r\n                weight = new Dimension(50);\r\n            }\r\n            var p = weight.value / 100.0;\r\n            var w = p * 2 - 1;\r\n            var a = toHSL(color1).a - toHSL(color2).a;\r\n            var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\r\n            var w2 = 1 - w1;\r\n            var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\r\n                color1.rgb[1] * w1 + color2.rgb[1] * w2,\r\n                color1.rgb[2] * w1 + color2.rgb[2] * w2];\r\n            var alpha = color1.alpha * p + color2.alpha * (1 - p);\r\n            return new Color(rgb, alpha);\r\n        },\r\n        greyscale: function (color) {\r\n            return colorFunctions.desaturate(color, new Dimension(100));\r\n        },\r\n        contrast: function (color, dark, light, threshold) {\r\n            // filter: contrast(3.2);\r\n            // should be kept as is, so check for color\r\n            if (!color.rgb) {\r\n                return null;\r\n            }\r\n            if (typeof light === 'undefined') {\r\n                light = colorFunctions.rgba(255, 255, 255, 1.0);\r\n            }\r\n            if (typeof dark === 'undefined') {\r\n                dark = colorFunctions.rgba(0, 0, 0, 1.0);\r\n            }\r\n            // Figure out which is actually light and dark:\r\n            if (dark.luma() > light.luma()) {\r\n                var t = light;\r\n                light = dark;\r\n                dark = t;\r\n            }\r\n            if (typeof threshold === 'undefined') {\r\n                threshold = 0.43;\r\n            }\r\n            else {\r\n                threshold = number$1(threshold);\r\n            }\r\n            if (color.luma() < threshold) {\r\n                return light;\r\n            }\r\n            else {\r\n                return dark;\r\n            }\r\n        },\r\n        // Changes made in 2.7.0 - Reverted in 3.0.0\r\n        // contrast: function (color, color1, color2, threshold) {\r\n        //     // Return which of `color1` and `color2` has the greatest contrast with `color`\r\n        //     // according to the standard WCAG contrast ratio calculation.\r\n        //     // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\r\n        //     // The threshold param is no longer used, in line with SASS.\r\n        //     // filter: contrast(3.2);\r\n        //     // should be kept as is, so check for color\r\n        //     if (!color.rgb) {\r\n        //         return null;\r\n        //     }\r\n        //     if (typeof color1 === 'undefined') {\r\n        //         color1 = colorFunctions.rgba(0, 0, 0, 1.0);\r\n        //     }\r\n        //     if (typeof color2 === 'undefined') {\r\n        //         color2 = colorFunctions.rgba(255, 255, 255, 1.0);\r\n        //     }\r\n        //     var contrast1, contrast2;\r\n        //     var luma = color.luma();\r\n        //     var luma1 = color1.luma();\r\n        //     var luma2 = color2.luma();\r\n        //     // Calculate contrast ratios for each color\r\n        //     if (luma > luma1) {\r\n        //         contrast1 = (luma + 0.05) / (luma1 + 0.05);\r\n        //     } else {\r\n        //         contrast1 = (luma1 + 0.05) / (luma + 0.05);\r\n        //     }\r\n        //     if (luma > luma2) {\r\n        //         contrast2 = (luma + 0.05) / (luma2 + 0.05);\r\n        //     } else {\r\n        //         contrast2 = (luma2 + 0.05) / (luma + 0.05);\r\n        //     }\r\n        //     if (contrast1 > contrast2) {\r\n        //         return color1;\r\n        //     } else {\r\n        //         return color2;\r\n        //     }\r\n        // },\r\n        argb: function (color) {\r\n            return new Anonymous(color.toARGB());\r\n        },\r\n        color: function (c) {\r\n            if ((c instanceof Quoted) &&\r\n                (/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})$/i.test(c.value))) {\r\n                var val = c.value.slice(1);\r\n                return new Color(val, undefined, \"#\" + val);\r\n            }\r\n            if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {\r\n                c.value = undefined;\r\n                return c;\r\n            }\r\n            throw {\r\n                type: 'Argument',\r\n                message: 'argument must be a color keyword or 3|4|6|8 digit hex e.g. #FFF'\r\n            };\r\n        },\r\n        tint: function (color, amount) {\r\n            return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\r\n        },\r\n        shade: function (color, amount) {\r\n            return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\r\n        }\r\n    };\r\n    var color = colorFunctions;\n\n    // Color Blending\r\n    // ref: http://www.w3.org/TR/compositing-1\r\n    function colorBlend(mode, color1, color2) {\r\n        var ab = color1.alpha; // result\r\n        var // backdrop\r\n        cb;\r\n        var as = color2.alpha;\r\n        var // source\r\n        cs;\r\n        var ar;\r\n        var cr;\r\n        var r = [];\r\n        ar = as + ab * (1 - as);\r\n        for (var i = 0; i < 3; i++) {\r\n            cb = color1.rgb[i] / 255;\r\n            cs = color2.rgb[i] / 255;\r\n            cr = mode(cb, cs);\r\n            if (ar) {\r\n                cr = (as * cs + ab * (cb -\r\n                    as * (cb + cs - cr))) / ar;\r\n            }\r\n            r[i] = cr * 255;\r\n        }\r\n        return new Color(r, ar);\r\n    }\r\n    var colorBlendModeFunctions = {\r\n        multiply: function (cb, cs) {\r\n            return cb * cs;\r\n        },\r\n        screen: function (cb, cs) {\r\n            return cb + cs - cb * cs;\r\n        },\r\n        overlay: function (cb, cs) {\r\n            cb *= 2;\r\n            return (cb <= 1) ?\r\n                colorBlendModeFunctions.multiply(cb, cs) :\r\n                colorBlendModeFunctions.screen(cb - 1, cs);\r\n        },\r\n        softlight: function (cb, cs) {\r\n            var d = 1;\r\n            var e = cb;\r\n            if (cs > 0.5) {\r\n                e = 1;\r\n                d = (cb > 0.25) ? Math.sqrt(cb)\r\n                    : ((16 * cb - 12) * cb + 4) * cb;\r\n            }\r\n            return cb - (1 - 2 * cs) * e * (d - cb);\r\n        },\r\n        hardlight: function (cb, cs) {\r\n            return colorBlendModeFunctions.overlay(cs, cb);\r\n        },\r\n        difference: function (cb, cs) {\r\n            return Math.abs(cb - cs);\r\n        },\r\n        exclusion: function (cb, cs) {\r\n            return cb + cs - 2 * cb * cs;\r\n        },\r\n        // non-w3c functions:\r\n        average: function (cb, cs) {\r\n            return (cb + cs) / 2;\r\n        },\r\n        negation: function (cb, cs) {\r\n            return 1 - Math.abs(cb + cs - 1);\r\n        }\r\n    };\r\n    for (var f$1 in colorBlendModeFunctions) {\r\n        if (colorBlendModeFunctions.hasOwnProperty(f$1)) {\r\n            colorBlend[f$1] = colorBlend.bind(null, colorBlendModeFunctions[f$1]);\r\n        }\r\n    }\n\n    var dataUri = (function (environment) {\r\n        var fallback = function (functionThis, node) { return new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context); };\r\n        return { 'data-uri': function (mimetypeNode, filePathNode) {\r\n                if (!filePathNode) {\r\n                    filePathNode = mimetypeNode;\r\n                    mimetypeNode = null;\r\n                }\r\n                var mimetype = mimetypeNode && mimetypeNode.value;\r\n                var filePath = filePathNode.value;\r\n                var currentFileInfo = this.currentFileInfo;\r\n                var currentDirectory = currentFileInfo.rewriteUrls ?\r\n                    currentFileInfo.currentDirectory : currentFileInfo.entryPath;\r\n                var fragmentStart = filePath.indexOf('#');\r\n                var fragment = '';\r\n                if (fragmentStart !== -1) {\r\n                    fragment = filePath.slice(fragmentStart);\r\n                    filePath = filePath.slice(0, fragmentStart);\r\n                }\r\n                var context = clone(this.context);\r\n                context.rawBuffer = true;\r\n                var fileManager = environment.getFileManager(filePath, currentDirectory, context, environment, true);\r\n                if (!fileManager) {\r\n                    return fallback(this, filePathNode);\r\n                }\r\n                var useBase64 = false;\r\n                // detect the mimetype if not given\r\n                if (!mimetypeNode) {\r\n                    mimetype = environment.mimeLookup(filePath);\r\n                    if (mimetype === 'image/svg+xml') {\r\n                        useBase64 = false;\r\n                    }\r\n                    else {\r\n                        // use base 64 unless it's an ASCII or UTF-8 format\r\n                        var charset = environment.charsetLookup(mimetype);\r\n                        useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;\r\n                    }\r\n                    if (useBase64) {\r\n                        mimetype += ';base64';\r\n                    }\r\n                }\r\n                else {\r\n                    useBase64 = /;base64$/.test(mimetype);\r\n                }\r\n                var fileSync = fileManager.loadFileSync(filePath, currentDirectory, context, environment);\r\n                if (!fileSync.contents) {\r\n                    logger$1.warn(\"Skipped data-uri embedding of \" + filePath + \" because file not found\");\r\n                    return fallback(this, filePathNode || mimetypeNode);\r\n                }\r\n                var buf = fileSync.contents;\r\n                if (useBase64 && !environment.encodeBase64) {\r\n                    return fallback(this, filePathNode);\r\n                }\r\n                buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\r\n                var uri = \"data:\" + mimetype + \",\" + buf + fragment;\r\n                return new URL(new Quoted(\"\\\"\" + uri + \"\\\"\", uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\r\n            } };\r\n    });\n\n    var getItemsFromNode = function (node) {\r\n        // handle non-array values as an array of length 1\r\n        // return 'undefined' if index is invalid\r\n        var items = Array.isArray(node.value) ?\r\n            node.value : Array(node);\r\n        return items;\r\n    };\r\n    var list = {\r\n        _SELF: function (n) {\r\n            return n;\r\n        },\r\n        '~': function () {\r\n            var expr = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                expr[_i] = arguments[_i];\r\n            }\r\n            if (expr.length === 1) {\r\n                return expr[0];\r\n            }\r\n            return new Value(expr);\r\n        },\r\n        extract: function (values, index) {\r\n            // (1-based index)\r\n            index = index.value - 1;\r\n            return getItemsFromNode(values)[index];\r\n        },\r\n        length: function (values) {\r\n            return new Dimension(getItemsFromNode(values).length);\r\n        },\r\n        /**\r\n         * Creates a Less list of incremental values.\r\n         * Modeled after Lodash's range function, also exists natively in PHP\r\n         *\r\n         * @param {Dimension} [start=1]\r\n         * @param {Dimension} end  - e.g. 10 or 10px - unit is added to output\r\n         * @param {Dimension} [step=1]\r\n         */\r\n        range: function (start, end, step) {\r\n            var from;\r\n            var to;\r\n            var stepValue = 1;\r\n            var list = [];\r\n            if (end) {\r\n                to = end;\r\n                from = start.value;\r\n                if (step) {\r\n                    stepValue = step.value;\r\n                }\r\n            }\r\n            else {\r\n                from = 1;\r\n                to = start;\r\n            }\r\n            for (var i = from; i <= to.value; i += stepValue) {\r\n                list.push(new Dimension(i, to.unit));\r\n            }\r\n            return new Expression(list);\r\n        },\r\n        each: function (list, rs) {\r\n            var _this = this;\r\n            var rules = [];\r\n            var newRules;\r\n            var iterator;\r\n            var tryEval = function (val) {\r\n                if (val instanceof Node) {\r\n                    return val.eval(_this.context);\r\n                }\r\n                return val;\r\n            };\r\n            if (list.value && !(list instanceof Quoted)) {\r\n                if (Array.isArray(list.value)) {\r\n                    iterator = list.value.map(tryEval);\r\n                }\r\n                else {\r\n                    iterator = [tryEval(list.value)];\r\n                }\r\n            }\r\n            else if (list.ruleset) {\r\n                iterator = tryEval(list.ruleset).rules;\r\n            }\r\n            else if (list.rules) {\r\n                iterator = list.rules.map(tryEval);\r\n            }\r\n            else if (Array.isArray(list)) {\r\n                iterator = list.map(tryEval);\r\n            }\r\n            else {\r\n                iterator = [tryEval(list)];\r\n            }\r\n            var valueName = '@value';\r\n            var keyName = '@key';\r\n            var indexName = '@index';\r\n            if (rs.params) {\r\n                valueName = rs.params[0] && rs.params[0].name;\r\n                keyName = rs.params[1] && rs.params[1].name;\r\n                indexName = rs.params[2] && rs.params[2].name;\r\n                rs = rs.rules;\r\n            }\r\n            else {\r\n                rs = rs.ruleset;\r\n            }\r\n            for (var i = 0; i < iterator.length; i++) {\r\n                var key = void 0;\r\n                var value = void 0;\r\n                var item = iterator[i];\r\n                if (item instanceof Declaration) {\r\n                    key = typeof item.name === 'string' ? item.name : item.name[0].value;\r\n                    value = item.value;\r\n                }\r\n                else {\r\n                    key = new Dimension(i + 1);\r\n                    value = item;\r\n                }\r\n                if (item instanceof Comment) {\r\n                    continue;\r\n                }\r\n                newRules = rs.rules.slice(0);\r\n                if (valueName) {\r\n                    newRules.push(new Declaration(valueName, value, false, false, this.index, this.currentFileInfo));\r\n                }\r\n                if (indexName) {\r\n                    newRules.push(new Declaration(indexName, new Dimension(i + 1), false, false, this.index, this.currentFileInfo));\r\n                }\r\n                if (keyName) {\r\n                    newRules.push(new Declaration(keyName, key, false, false, this.index, this.currentFileInfo));\r\n                }\r\n                rules.push(new Ruleset([new (Selector)([new Element(\"\", '&')])], newRules, rs.strictImports, rs.visibilityInfo()));\r\n            }\r\n            return new Ruleset([new (Selector)([new Element(\"\", '&')])], rules, rs.strictImports, rs.visibilityInfo()).eval(this.context);\r\n        }\r\n    };\n\n    var MathHelper = function (fn, unit, n) {\r\n        if (!(n instanceof Dimension)) {\r\n            throw { type: 'Argument', message: 'argument must be a number' };\r\n        }\r\n        if (unit == null) {\r\n            unit = n.unit;\r\n        }\r\n        else {\r\n            n = n.unify();\r\n        }\r\n        return new Dimension(fn(parseFloat(n.value)), unit);\r\n    };\n\n    var mathFunctions = {\r\n        // name,  unit\r\n        ceil: null,\r\n        floor: null,\r\n        sqrt: null,\r\n        abs: null,\r\n        tan: '',\r\n        sin: '',\r\n        cos: '',\r\n        atan: 'rad',\r\n        asin: 'rad',\r\n        acos: 'rad'\r\n    };\r\n    for (var f in mathFunctions) {\r\n        if (mathFunctions.hasOwnProperty(f)) {\r\n            mathFunctions[f] = MathHelper.bind(null, Math[f], mathFunctions[f]);\r\n        }\r\n    }\r\n    mathFunctions.round = function (n, f) {\r\n        var fraction = typeof f === 'undefined' ? 0 : f.value;\r\n        return MathHelper(function (num) { return num.toFixed(fraction); }, null, n);\r\n    };\n\n    var minMax = function (isMin, args) {\r\n        args = Array.prototype.slice.call(args);\r\n        switch (args.length) {\r\n            case 0: throw { type: 'Argument', message: 'one or more arguments required' };\r\n        }\r\n        var i; // key is the unit.toString() for unified Dimension values,\r\n        var j;\r\n        var current;\r\n        var currentUnified;\r\n        var referenceUnified;\r\n        var unit;\r\n        var unitStatic;\r\n        var unitClone;\r\n        var // elems only contains original argument values.\r\n        order = [];\r\n        var values = {};\r\n        // value is the index into the order array.\r\n        for (i = 0; i < args.length; i++) {\r\n            current = args[i];\r\n            if (!(current instanceof Dimension)) {\r\n                if (Array.isArray(args[i].value)) {\r\n                    Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\r\n                }\r\n                continue;\r\n            }\r\n            currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\r\n            unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\r\n            unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;\r\n            unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;\r\n            j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];\r\n            if (j === undefined) {\r\n                if (unitStatic !== undefined && unit !== unitStatic) {\r\n                    throw { type: 'Argument', message: 'incompatible types' };\r\n                }\r\n                values[unit] = order.length;\r\n                order.push(current);\r\n                continue;\r\n            }\r\n            referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\r\n            if (isMin && currentUnified.value < referenceUnified.value ||\r\n                !isMin && currentUnified.value > referenceUnified.value) {\r\n                order[j] = current;\r\n            }\r\n        }\r\n        if (order.length == 1) {\r\n            return order[0];\r\n        }\r\n        args = order.map(function (a) { return a.toCSS(this.context); }).join(this.context.compress ? ',' : ', ');\r\n        return new Anonymous((isMin ? 'min' : 'max') + \"(\" + args + \")\");\r\n    };\r\n    var number = {\r\n        min: function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            try {\r\n                return minMax(true, args);\r\n            }\r\n            catch (e) { }\r\n        },\r\n        max: function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            try {\r\n                return minMax(false, args);\r\n            }\r\n            catch (e) { }\r\n        },\r\n        convert: function (val, unit) {\r\n            return val.convertTo(unit.value);\r\n        },\r\n        pi: function () {\r\n            return new Dimension(Math.PI);\r\n        },\r\n        mod: function (a, b) {\r\n            return new Dimension(a.value % b.value, a.unit);\r\n        },\r\n        pow: function (x, y) {\r\n            if (typeof x === 'number' && typeof y === 'number') {\r\n                x = new Dimension(x);\r\n                y = new Dimension(y);\r\n            }\r\n            else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\r\n                throw { type: 'Argument', message: 'arguments must be numbers' };\r\n            }\r\n            return new Dimension(Math.pow(x.value, y.value), x.unit);\r\n        },\r\n        percentage: function (n) {\r\n            var result = MathHelper(function (num) { return num * 100; }, '%', n);\r\n            return result;\r\n        }\r\n    };\n\n    var string = {\r\n        e: function (str) {\r\n            return new Quoted('\"', str instanceof JavaScript ? str.evaluated : str.value, true);\r\n        },\r\n        escape: function (str) {\r\n            return new Anonymous(encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B')\r\n                .replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\r\n        },\r\n        replace: function (string, pattern, replacement, flags) {\r\n            var result = string.value;\r\n            replacement = (replacement.type === 'Quoted') ?\r\n                replacement.value : replacement.toCSS();\r\n            result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\r\n            return new Quoted(string.quote || '', result, string.escaped);\r\n        },\r\n        '%': function (string /* arg, arg, ... */) {\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            var result = string.value;\r\n            var _loop_1 = function (i) {\r\n                /* jshint loopfunc:true */\r\n                result = result.replace(/%[sda]/i, function (token) {\r\n                    var value = ((args[i].type === 'Quoted') &&\r\n                        token.match(/s/i)) ? args[i].value : args[i].toCSS();\r\n                    return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\r\n                });\r\n            };\r\n            for (var i = 0; i < args.length; i++) {\r\n                _loop_1(i);\r\n            }\r\n            result = result.replace(/%%/g, '%');\r\n            return new Quoted(string.quote || '', result, string.escaped);\r\n        }\r\n    };\n\n    var svg = (function (environment) {\r\n        return { 'svg-gradient': function (direction) {\r\n                var stops;\r\n                var gradientDirectionSvg;\r\n                var gradientType = 'linear';\r\n                var rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"';\r\n                var renderEnv = { compress: false };\r\n                var returner;\r\n                var directionValue = direction.toCSS(renderEnv);\r\n                var i;\r\n                var color;\r\n                var position;\r\n                var positionValue;\r\n                var alpha;\r\n                function throwArgumentDescriptor() {\r\n                    throw { type: 'Argument',\r\n                        message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\r\n                            ' end_color [end_position] or direction, color list' };\r\n                }\r\n                if (arguments.length == 2) {\r\n                    if (arguments[1].value.length < 2) {\r\n                        throwArgumentDescriptor();\r\n                    }\r\n                    stops = arguments[1].value;\r\n                }\r\n                else if (arguments.length < 3) {\r\n                    throwArgumentDescriptor();\r\n                }\r\n                else {\r\n                    stops = Array.prototype.slice.call(arguments, 1);\r\n                }\r\n                switch (directionValue) {\r\n                    case 'to bottom':\r\n                        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\r\n                        break;\r\n                    case 'to right':\r\n                        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\r\n                        break;\r\n                    case 'to bottom right':\r\n                        gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\r\n                        break;\r\n                    case 'to top right':\r\n                        gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\r\n                        break;\r\n                    case 'ellipse':\r\n                    case 'ellipse at center':\r\n                        gradientType = 'radial';\r\n                        gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\r\n                        rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\r\n                        break;\r\n                    default:\r\n                        throw { type: 'Argument', message: 'svg-gradient direction must be \\'to bottom\\', \\'to right\\',' +\r\n                                ' \\'to bottom right\\', \\'to top right\\' or \\'ellipse at center\\'' };\r\n                }\r\n                returner = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 1 1\\\"><\" + gradientType + \"Gradient id=\\\"g\\\" \" + gradientDirectionSvg + \">\";\r\n                for (i = 0; i < stops.length; i += 1) {\r\n                    if (stops[i] instanceof Expression) {\r\n                        color = stops[i].value[0];\r\n                        position = stops[i].value[1];\r\n                    }\r\n                    else {\r\n                        color = stops[i];\r\n                        position = undefined;\r\n                    }\r\n                    if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {\r\n                        throwArgumentDescriptor();\r\n                    }\r\n                    positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\r\n                    alpha = color.alpha;\r\n                    returner += \"<stop offset=\\\"\" + positionValue + \"\\\" stop-color=\\\"\" + color.toRGB() + \"\\\"\" + (alpha < 1 ? \" stop-opacity=\\\"\" + alpha + \"\\\"\" : '') + \"/>\";\r\n                }\r\n                returner += \"</\" + gradientType + \"Gradient><rect \" + rectangleDimension + \" fill=\\\"url(#g)\\\" /></svg>\";\r\n                returner = encodeURIComponent(returner);\r\n                returner = \"data:image/svg+xml,\" + returner;\r\n                return new URL(new Quoted(\"'\" + returner + \"'\", returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\r\n            } };\r\n    });\n\n    var isa = function (n, Type) { return (n instanceof Type) ? Keyword.True : Keyword.False; };\r\n    var isunit = function (n, unit) {\r\n        if (unit === undefined) {\r\n            throw { type: 'Argument', message: 'missing the required second argument to isunit.' };\r\n        }\r\n        unit = typeof unit.value === 'string' ? unit.value : unit;\r\n        if (typeof unit !== 'string') {\r\n            throw { type: 'Argument', message: 'Second argument to isunit should be a unit or a string.' };\r\n        }\r\n        return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;\r\n    };\r\n    var types = {\r\n        isruleset: function (n) {\r\n            return isa(n, DetachedRuleset);\r\n        },\r\n        iscolor: function (n) {\r\n            return isa(n, Color);\r\n        },\r\n        isnumber: function (n) {\r\n            return isa(n, Dimension);\r\n        },\r\n        isstring: function (n) {\r\n            return isa(n, Quoted);\r\n        },\r\n        iskeyword: function (n) {\r\n            return isa(n, Keyword);\r\n        },\r\n        isurl: function (n) {\r\n            return isa(n, URL);\r\n        },\r\n        ispixel: function (n) {\r\n            return isunit(n, 'px');\r\n        },\r\n        ispercentage: function (n) {\r\n            return isunit(n, '%');\r\n        },\r\n        isem: function (n) {\r\n            return isunit(n, 'em');\r\n        },\r\n        isunit: isunit,\r\n        unit: function (val, unit) {\r\n            if (!(val instanceof Dimension)) {\r\n                throw { type: 'Argument',\r\n                    message: \"the first argument to unit must be a number\" + (val instanceof Operation ? '. Have you forgotten parenthesis?' : '') };\r\n            }\r\n            if (unit) {\r\n                if (unit instanceof Keyword) {\r\n                    unit = unit.value;\r\n                }\r\n                else {\r\n                    unit = unit.toCSS();\r\n                }\r\n            }\r\n            else {\r\n                unit = '';\r\n            }\r\n            return new Dimension(val.value, unit);\r\n        },\r\n        'get-unit': function (n) {\r\n            return new Anonymous(n.unit);\r\n        }\r\n    };\n\n    var functions = (function (environment) {\r\n        var functions = { functionRegistry: functionRegistry, functionCaller: functionCaller };\r\n        // register functions\r\n        functionRegistry.addMultiple(boolean$1);\r\n        functionRegistry.add('default', defaultFunc.eval.bind(defaultFunc));\r\n        functionRegistry.addMultiple(color);\r\n        functionRegistry.addMultiple(colorBlend);\r\n        functionRegistry.addMultiple(dataUri(environment));\r\n        functionRegistry.addMultiple(list);\r\n        functionRegistry.addMultiple(mathFunctions);\r\n        functionRegistry.addMultiple(number);\r\n        functionRegistry.addMultiple(string);\r\n        functionRegistry.addMultiple(svg());\r\n        functionRegistry.addMultiple(types);\r\n        return functions;\r\n    });\n\n    function transformTree (root, options) {\r\n        options = options || {};\r\n        var evaldRoot;\r\n        var variables = options.variables;\r\n        var evalEnv = new contexts.Eval(options);\r\n        //\r\n        // Allows setting variables with a hash, so:\r\n        //\r\n        //   `{ color: new tree.Color('#f01') }` will become:\r\n        //\r\n        //   new tree.Declaration('@color',\r\n        //     new tree.Value([\r\n        //       new tree.Expression([\r\n        //         new tree.Color('#f01')\r\n        //       ])\r\n        //     ])\r\n        //   )\r\n        //\r\n        if (typeof variables === 'object' && !Array.isArray(variables)) {\r\n            variables = Object.keys(variables).map(function (k) {\r\n                var value = variables[k];\r\n                if (!(value instanceof tree.Value)) {\r\n                    if (!(value instanceof tree.Expression)) {\r\n                        value = new tree.Expression([value]);\r\n                    }\r\n                    value = new tree.Value([value]);\r\n                }\r\n                return new tree.Declaration(\"@\" + k, value, false, null, 0);\r\n            });\r\n            evalEnv.frames = [new tree.Ruleset(null, variables)];\r\n        }\r\n        var visitors$1 = [\r\n            new visitors.JoinSelectorVisitor(),\r\n            new visitors.MarkVisibleSelectorsVisitor(true),\r\n            new visitors.ExtendVisitor(),\r\n            new visitors.ToCSSVisitor({ compress: Boolean(options.compress) })\r\n        ];\r\n        var preEvalVisitors = [];\r\n        var v;\r\n        var visitorIterator;\r\n        /**\r\n         * first() / get() allows visitors to be added while visiting\r\n         *\r\n         * @todo Add scoping for visitors just like functions for @plugin; right now they're global\r\n         */\r\n        if (options.pluginManager) {\r\n            visitorIterator = options.pluginManager.visitor();\r\n            for (var i = 0; i < 2; i++) {\r\n                visitorIterator.first();\r\n                while ((v = visitorIterator.get())) {\r\n                    if (v.isPreEvalVisitor) {\r\n                        if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\r\n                            preEvalVisitors.push(v);\r\n                            v.run(root);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (i === 0 || visitors$1.indexOf(v) === -1) {\r\n                            if (v.isPreVisitor) {\r\n                                visitors$1.unshift(v);\r\n                            }\r\n                            else {\r\n                                visitors$1.push(v);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        evaldRoot = root.eval(evalEnv);\r\n        for (var i = 0; i < visitors$1.length; i++) {\r\n            visitors$1[i].run(evaldRoot);\r\n        }\r\n        // Run any remaining visitors added after eval pass\r\n        if (options.pluginManager) {\r\n            visitorIterator.first();\r\n            while ((v = visitorIterator.get())) {\r\n                if (visitors$1.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\r\n                    v.run(evaldRoot);\r\n                }\r\n            }\r\n        }\r\n        return evaldRoot;\r\n    }\n\n    /**\r\n     * Plugin Manager\r\n     */\r\n    var PluginManager = /** @class */ (function () {\r\n        function PluginManager(less) {\r\n            this.less = less;\r\n            this.visitors = [];\r\n            this.preProcessors = [];\r\n            this.postProcessors = [];\r\n            this.installedPlugins = [];\r\n            this.fileManagers = [];\r\n            this.iterator = -1;\r\n            this.pluginCache = {};\r\n            this.Loader = new less.PluginLoader(less);\r\n        }\r\n        /**\r\n         * Adds all the plugins in the array\r\n         * @param {Array} plugins\r\n         */\r\n        PluginManager.prototype.addPlugins = function (plugins) {\r\n            if (plugins) {\r\n                for (var i = 0; i < plugins.length; i++) {\r\n                    this.addPlugin(plugins[i]);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         *\r\n         * @param plugin\r\n         * @param {String} filename\r\n         */\r\n        PluginManager.prototype.addPlugin = function (plugin, filename, functionRegistry) {\r\n            this.installedPlugins.push(plugin);\r\n            if (filename) {\r\n                this.pluginCache[filename] = plugin;\r\n            }\r\n            if (plugin.install) {\r\n                plugin.install(this.less, this, functionRegistry || this.less.functions.functionRegistry);\r\n            }\r\n        };\r\n        /**\r\n         *\r\n         * @param filename\r\n         */\r\n        PluginManager.prototype.get = function (filename) {\r\n            return this.pluginCache[filename];\r\n        };\r\n        /**\r\n         * Adds a visitor. The visitor object has options on itself to determine\r\n         * when it should run.\r\n         * @param visitor\r\n         */\r\n        PluginManager.prototype.addVisitor = function (visitor) {\r\n            this.visitors.push(visitor);\r\n        };\r\n        /**\r\n         * Adds a pre processor object\r\n         * @param {object} preProcessor\r\n         * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\r\n         */\r\n        PluginManager.prototype.addPreProcessor = function (preProcessor, priority) {\r\n            var indexToInsertAt;\r\n            for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {\r\n                if (this.preProcessors[indexToInsertAt].priority >= priority) {\r\n                    break;\r\n                }\r\n            }\r\n            this.preProcessors.splice(indexToInsertAt, 0, { preProcessor: preProcessor, priority: priority });\r\n        };\r\n        /**\r\n         * Adds a post processor object\r\n         * @param {object} postProcessor\r\n         * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\r\n         */\r\n        PluginManager.prototype.addPostProcessor = function (postProcessor, priority) {\r\n            var indexToInsertAt;\r\n            for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {\r\n                if (this.postProcessors[indexToInsertAt].priority >= priority) {\r\n                    break;\r\n                }\r\n            }\r\n            this.postProcessors.splice(indexToInsertAt, 0, { postProcessor: postProcessor, priority: priority });\r\n        };\r\n        /**\r\n         *\r\n         * @param manager\r\n         */\r\n        PluginManager.prototype.addFileManager = function (manager) {\r\n            this.fileManagers.push(manager);\r\n        };\r\n        /**\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        PluginManager.prototype.getPreProcessors = function () {\r\n            var preProcessors = [];\r\n            for (var i = 0; i < this.preProcessors.length; i++) {\r\n                preProcessors.push(this.preProcessors[i].preProcessor);\r\n            }\r\n            return preProcessors;\r\n        };\r\n        /**\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        PluginManager.prototype.getPostProcessors = function () {\r\n            var postProcessors = [];\r\n            for (var i = 0; i < this.postProcessors.length; i++) {\r\n                postProcessors.push(this.postProcessors[i].postProcessor);\r\n            }\r\n            return postProcessors;\r\n        };\r\n        /**\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        PluginManager.prototype.getVisitors = function () {\r\n            return this.visitors;\r\n        };\r\n        PluginManager.prototype.visitor = function () {\r\n            var self = this;\r\n            return {\r\n                first: function () {\r\n                    self.iterator = -1;\r\n                    return self.visitors[self.iterator];\r\n                },\r\n                get: function () {\r\n                    self.iterator += 1;\r\n                    return self.visitors[self.iterator];\r\n                }\r\n            };\r\n        };\r\n        /**\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        PluginManager.prototype.getFileManagers = function () {\r\n            return this.fileManagers;\r\n        };\r\n        return PluginManager;\r\n    }());\r\n    var pm;\r\n    var PluginManagerFactory = function (less, newFactory) {\r\n        if (newFactory || !pm) {\r\n            pm = new PluginManager(less);\r\n        }\r\n        return pm;\r\n    };\n\n    function SourceMapOutput (environment) {\r\n        var SourceMapOutput = /** @class */ (function () {\r\n            function SourceMapOutput(options) {\r\n                this._css = [];\r\n                this._rootNode = options.rootNode;\r\n                this._contentsMap = options.contentsMap;\r\n                this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\r\n                if (options.sourceMapFilename) {\r\n                    this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\r\n                }\r\n                this._outputFilename = options.outputFilename;\r\n                this.sourceMapURL = options.sourceMapURL;\r\n                if (options.sourceMapBasepath) {\r\n                    this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\r\n                }\r\n                if (options.sourceMapRootpath) {\r\n                    this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\r\n                    if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\r\n                        this._sourceMapRootpath += '/';\r\n                    }\r\n                }\r\n                else {\r\n                    this._sourceMapRootpath = '';\r\n                }\r\n                this._outputSourceFiles = options.outputSourceFiles;\r\n                this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\r\n                this._lineNumber = 0;\r\n                this._column = 0;\r\n            }\r\n            SourceMapOutput.prototype.removeBasepath = function (path) {\r\n                if (this._sourceMapBasepath && path.indexOf(this._sourceMapBasepath) === 0) {\r\n                    path = path.substring(this._sourceMapBasepath.length);\r\n                    if (path.charAt(0) === '\\\\' || path.charAt(0) === '/') {\r\n                        path = path.substring(1);\r\n                    }\r\n                }\r\n                return path;\r\n            };\r\n            SourceMapOutput.prototype.normalizeFilename = function (filename) {\r\n                filename = filename.replace(/\\\\/g, '/');\r\n                filename = this.removeBasepath(filename);\r\n                return (this._sourceMapRootpath || '') + filename;\r\n            };\r\n            SourceMapOutput.prototype.add = function (chunk, fileInfo, index, mapLines) {\r\n                // ignore adding empty strings\r\n                if (!chunk) {\r\n                    return;\r\n                }\r\n                var lines, sourceLines, columns, sourceColumns, i;\r\n                if (fileInfo && fileInfo.filename) {\r\n                    var inputSource = this._contentsMap[fileInfo.filename];\r\n                    // remove vars/banner added to the top of the file\r\n                    if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\r\n                        // adjust the index\r\n                        index -= this._contentsIgnoredCharsMap[fileInfo.filename];\r\n                        if (index < 0) {\r\n                            index = 0;\r\n                        }\r\n                        // adjust the source\r\n                        inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\r\n                    }\r\n                    /**\r\n                     * ignore empty content, or failsafe\r\n                     * if contents map is incorrect\r\n                     */\r\n                    if (inputSource === undefined) {\r\n                        this._css.push(chunk);\r\n                        return;\r\n                    }\r\n                    inputSource = inputSource.substring(0, index);\r\n                    sourceLines = inputSource.split('\\n');\r\n                    sourceColumns = sourceLines[sourceLines.length - 1];\r\n                }\r\n                lines = chunk.split('\\n');\r\n                columns = lines[lines.length - 1];\r\n                if (fileInfo && fileInfo.filename) {\r\n                    if (!mapLines) {\r\n                        this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + 1, column: this._column },\r\n                            original: { line: sourceLines.length, column: sourceColumns.length },\r\n                            source: this.normalizeFilename(fileInfo.filename) });\r\n                    }\r\n                    else {\r\n                        for (i = 0; i < lines.length; i++) {\r\n                            this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + i + 1, column: i === 0 ? this._column : 0 },\r\n                                original: { line: sourceLines.length + i, column: i === 0 ? sourceColumns.length : 0 },\r\n                                source: this.normalizeFilename(fileInfo.filename) });\r\n                        }\r\n                    }\r\n                }\r\n                if (lines.length === 1) {\r\n                    this._column += columns.length;\r\n                }\r\n                else {\r\n                    this._lineNumber += lines.length - 1;\r\n                    this._column = columns.length;\r\n                }\r\n                this._css.push(chunk);\r\n            };\r\n            SourceMapOutput.prototype.isEmpty = function () {\r\n                return this._css.length === 0;\r\n            };\r\n            SourceMapOutput.prototype.toCSS = function (context) {\r\n                this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({ file: this._outputFilename, sourceRoot: null });\r\n                if (this._outputSourceFiles) {\r\n                    for (var filename in this._contentsMap) {\r\n                        if (this._contentsMap.hasOwnProperty(filename)) {\r\n                            var source = this._contentsMap[filename];\r\n                            if (this._contentsIgnoredCharsMap[filename]) {\r\n                                source = source.slice(this._contentsIgnoredCharsMap[filename]);\r\n                            }\r\n                            this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\r\n                        }\r\n                    }\r\n                }\r\n                this._rootNode.genCSS(context, this);\r\n                if (this._css.length > 0) {\r\n                    var sourceMapURL = void 0;\r\n                    var sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\r\n                    if (this.sourceMapURL) {\r\n                        sourceMapURL = this.sourceMapURL;\r\n                    }\r\n                    else if (this._sourceMapFilename) {\r\n                        sourceMapURL = this._sourceMapFilename;\r\n                    }\r\n                    this.sourceMapURL = sourceMapURL;\r\n                    this.sourceMap = sourceMapContent;\r\n                }\r\n                return this._css.join('');\r\n            };\r\n            return SourceMapOutput;\r\n        }());\r\n        return SourceMapOutput;\r\n    }\n\n    function SourceMapBuilder (SourceMapOutput, environment) {\r\n        var SourceMapBuilder = /** @class */ (function () {\r\n            function SourceMapBuilder(options) {\r\n                this.options = options;\r\n            }\r\n            SourceMapBuilder.prototype.toCSS = function (rootNode, options, imports) {\r\n                var sourceMapOutput = new SourceMapOutput({\r\n                    contentsIgnoredCharsMap: imports.contentsIgnoredChars,\r\n                    rootNode: rootNode,\r\n                    contentsMap: imports.contents,\r\n                    sourceMapFilename: this.options.sourceMapFilename,\r\n                    sourceMapURL: this.options.sourceMapURL,\r\n                    outputFilename: this.options.sourceMapOutputFilename,\r\n                    sourceMapBasepath: this.options.sourceMapBasepath,\r\n                    sourceMapRootpath: this.options.sourceMapRootpath,\r\n                    outputSourceFiles: this.options.outputSourceFiles,\r\n                    sourceMapGenerator: this.options.sourceMapGenerator,\r\n                    sourceMapFileInline: this.options.sourceMapFileInline,\r\n                    disableSourcemapAnnotation: this.options.disableSourcemapAnnotation\r\n                });\r\n                var css = sourceMapOutput.toCSS(options);\r\n                this.sourceMap = sourceMapOutput.sourceMap;\r\n                this.sourceMapURL = sourceMapOutput.sourceMapURL;\r\n                if (this.options.sourceMapInputFilename) {\r\n                    this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);\r\n                }\r\n                if (this.options.sourceMapBasepath !== undefined && this.sourceMapURL !== undefined) {\r\n                    this.sourceMapURL = sourceMapOutput.removeBasepath(this.sourceMapURL);\r\n                }\r\n                return css + this.getCSSAppendage();\r\n            };\r\n            SourceMapBuilder.prototype.getCSSAppendage = function () {\r\n                var sourceMapURL = this.sourceMapURL;\r\n                if (this.options.sourceMapFileInline) {\r\n                    if (this.sourceMap === undefined) {\r\n                        return '';\r\n                    }\r\n                    sourceMapURL = \"data:application/json;base64,\" + environment.encodeBase64(this.sourceMap);\r\n                }\r\n                if (this.options.disableSourcemapAnnotation) {\r\n                    return '';\r\n                }\r\n                if (sourceMapURL) {\r\n                    return \"/*# sourceMappingURL=\" + sourceMapURL + \" */\";\r\n                }\r\n                return '';\r\n            };\r\n            SourceMapBuilder.prototype.getExternalSourceMap = function () {\r\n                return this.sourceMap;\r\n            };\r\n            SourceMapBuilder.prototype.setExternalSourceMap = function (sourceMap) {\r\n                this.sourceMap = sourceMap;\r\n            };\r\n            SourceMapBuilder.prototype.isInline = function () {\r\n                return this.options.sourceMapFileInline;\r\n            };\r\n            SourceMapBuilder.prototype.getSourceMapURL = function () {\r\n                return this.sourceMapURL;\r\n            };\r\n            SourceMapBuilder.prototype.getOutputFilename = function () {\r\n                return this.options.sourceMapOutputFilename;\r\n            };\r\n            SourceMapBuilder.prototype.getInputFilename = function () {\r\n                return this.sourceMapInputFilename;\r\n            };\r\n            return SourceMapBuilder;\r\n        }());\r\n        return SourceMapBuilder;\r\n    }\n\n    function ParseTree (SourceMapBuilder) {\r\n        var ParseTree = /** @class */ (function () {\r\n            function ParseTree(root, imports) {\r\n                this.root = root;\r\n                this.imports = imports;\r\n            }\r\n            ParseTree.prototype.toCSS = function (options) {\r\n                var evaldRoot;\r\n                var result = {};\r\n                var sourceMapBuilder;\r\n                try {\r\n                    evaldRoot = transformTree(this.root, options);\r\n                }\r\n                catch (e) {\r\n                    throw new LessError(e, this.imports);\r\n                }\r\n                try {\r\n                    var compress = Boolean(options.compress);\r\n                    if (compress) {\r\n                        logger$1.warn('The compress option has been deprecated. ' +\r\n                            'We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\r\n                    }\r\n                    var toCSSOptions = {\r\n                        compress: compress,\r\n                        dumpLineNumbers: options.dumpLineNumbers,\r\n                        strictUnits: Boolean(options.strictUnits),\r\n                        numPrecision: 8\r\n                    };\r\n                    if (options.sourceMap) {\r\n                        sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\r\n                        result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\r\n                    }\r\n                    else {\r\n                        result.css = evaldRoot.toCSS(toCSSOptions);\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    throw new LessError(e, this.imports);\r\n                }\r\n                if (options.pluginManager) {\r\n                    var postProcessors = options.pluginManager.getPostProcessors();\r\n                    for (var i = 0; i < postProcessors.length; i++) {\r\n                        result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options: options, imports: this.imports });\r\n                    }\r\n                }\r\n                if (options.sourceMap) {\r\n                    result.map = sourceMapBuilder.getExternalSourceMap();\r\n                }\r\n                result.imports = [];\r\n                for (var file in this.imports.files) {\r\n                    if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\r\n                        result.imports.push(file);\r\n                    }\r\n                }\r\n                return result;\r\n            };\r\n            return ParseTree;\r\n        }());\r\n        return ParseTree;\r\n    }\n\n    function ImportManager (environment) {\r\n        // FileInfo = {\r\n        //  'rewriteUrls' - option - whether to adjust URL's to be relative\r\n        //  'filename' - full resolved filename of current file\r\n        //  'rootpath' - path to append to normal URLs for this node\r\n        //  'currentDirectory' - path to the current file, absolute\r\n        //  'rootFilename' - filename of the base file\r\n        //  'entryPath' - absolute path to the entry file\r\n        //  'reference' - whether the file should not be output and only output parts that are referenced\r\n        var ImportManager = /** @class */ (function () {\r\n            function ImportManager(less, context, rootFileInfo) {\r\n                this.less = less;\r\n                this.rootFilename = rootFileInfo.filename;\r\n                this.paths = context.paths || []; // Search paths, when importing\r\n                this.contents = {}; // map - filename to contents of all the files\r\n                this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\r\n                this.mime = context.mime;\r\n                this.error = null;\r\n                this.context = context;\r\n                // Deprecated? Unused outside of here, could be useful.\r\n                this.queue = []; // Files which haven't been imported yet\r\n                this.files = {}; // Holds the imported parse trees.\r\n            }\r\n            /**\r\n             * Add an import to be imported\r\n             * @param path - the raw path\r\n             * @param tryAppendExtension - whether to try appending a file extension (.less or .js if the path has no extension)\r\n             * @param currentFileInfo - the current file info (used for instance to work out relative paths)\r\n             * @param importOptions - import options\r\n             * @param callback - callback for when it is imported\r\n             */\r\n            ImportManager.prototype.push = function (path, tryAppendExtension, currentFileInfo, importOptions, callback) {\r\n                var importManager = this, pluginLoader = this.context.pluginManager.Loader;\r\n                this.queue.push(path);\r\n                var fileParsedFunc = function (e, root, fullPath) {\r\n                    importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\r\n                    var importedEqualsRoot = fullPath === importManager.rootFilename;\r\n                    if (importOptions.optional && e) {\r\n                        callback(null, { rules: [] }, false, null);\r\n                        logger$1.info(\"The file \" + fullPath + \" was skipped because it was not found and the import was marked optional.\");\r\n                    }\r\n                    else {\r\n                        // Inline imports aren't cached here.\r\n                        // If we start to cache them, please make sure they won't conflict with non-inline imports of the\r\n                        // same name as they used to do before this comment and the condition below have been added.\r\n                        if (!importManager.files[fullPath] && !importOptions.inline) {\r\n                            importManager.files[fullPath] = { root: root, options: importOptions };\r\n                        }\r\n                        if (e && !importManager.error) {\r\n                            importManager.error = e;\r\n                        }\r\n                        callback(e, root, importedEqualsRoot, fullPath);\r\n                    }\r\n                };\r\n                var newFileInfo = {\r\n                    rewriteUrls: this.context.rewriteUrls,\r\n                    entryPath: currentFileInfo.entryPath,\r\n                    rootpath: currentFileInfo.rootpath,\r\n                    rootFilename: currentFileInfo.rootFilename\r\n                };\r\n                var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\r\n                if (!fileManager) {\r\n                    fileParsedFunc({ message: \"Could not find a file-manager for \" + path });\r\n                    return;\r\n                }\r\n                var loadFileCallback = function (loadedFile) {\r\n                    var plugin;\r\n                    var resolvedFilename = loadedFile.filename;\r\n                    var contents = loadedFile.contents.replace(/^\\uFEFF/, '');\r\n                    // Pass on an updated rootpath if path of imported file is relative and file\r\n                    // is in a (sub|sup) directory\r\n                    //\r\n                    // Examples:\r\n                    // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\r\n                    //   then rootpath should become 'less/module/nav/'\r\n                    // - If path of imported file is '../mixins.less' and rootpath is 'less/',\r\n                    //   then rootpath should become 'less/../'\r\n                    newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\r\n                    if (newFileInfo.rewriteUrls) {\r\n                        newFileInfo.rootpath = fileManager.join((importManager.context.rootpath || ''), fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\r\n                        if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\r\n                            newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\r\n                        }\r\n                    }\r\n                    newFileInfo.filename = resolvedFilename;\r\n                    var newEnv = new contexts.Parse(importManager.context);\r\n                    newEnv.processImports = false;\r\n                    importManager.contents[resolvedFilename] = contents;\r\n                    if (currentFileInfo.reference || importOptions.reference) {\r\n                        newFileInfo.reference = true;\r\n                    }\r\n                    if (importOptions.isPlugin) {\r\n                        plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\r\n                        if (plugin instanceof LessError) {\r\n                            fileParsedFunc(plugin, null, resolvedFilename);\r\n                        }\r\n                        else {\r\n                            fileParsedFunc(null, plugin, resolvedFilename);\r\n                        }\r\n                    }\r\n                    else if (importOptions.inline) {\r\n                        fileParsedFunc(null, contents, resolvedFilename);\r\n                    }\r\n                    else {\r\n                        // import (multiple) parse trees apparently get altered and can't be cached.\r\n                        // TODO: investigate why this is\r\n                        if (importManager.files[resolvedFilename]\r\n                            && !importManager.files[resolvedFilename].options.multiple\r\n                            && !importOptions.multiple) {\r\n                            fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\r\n                        }\r\n                        else {\r\n                            new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {\r\n                                fileParsedFunc(e, root, resolvedFilename);\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n                var loadedFile;\r\n                var promise;\r\n                var context = clone(this.context);\r\n                if (tryAppendExtension) {\r\n                    context.ext = importOptions.isPlugin ? '.js' : '.less';\r\n                }\r\n                if (importOptions.isPlugin) {\r\n                    context.mime = 'application/javascript';\r\n                    if (context.syncImport) {\r\n                        loadedFile = pluginLoader.loadPluginSync(path, currentFileInfo.currentDirectory, context, environment, fileManager);\r\n                    }\r\n                    else {\r\n                        promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\r\n                    }\r\n                }\r\n                else {\r\n                    if (context.syncImport) {\r\n                        loadedFile = fileManager.loadFileSync(path, currentFileInfo.currentDirectory, context, environment);\r\n                    }\r\n                    else {\r\n                        promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment, function (err, loadedFile) {\r\n                            if (err) {\r\n                                fileParsedFunc(err);\r\n                            }\r\n                            else {\r\n                                loadFileCallback(loadedFile);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                if (loadedFile) {\r\n                    if (!loadedFile.filename) {\r\n                        fileParsedFunc(loadedFile);\r\n                    }\r\n                    else {\r\n                        loadFileCallback(loadedFile);\r\n                    }\r\n                }\r\n                else if (promise) {\r\n                    promise.then(loadFileCallback, fileParsedFunc);\r\n                }\r\n            };\r\n            return ImportManager;\r\n        }());\r\n        return ImportManager;\r\n    }\n\n    function Parse (environment, ParseTree, ImportManager) {\r\n        var parse = function (input, options, callback) {\r\n            if (typeof options === 'function') {\r\n                callback = options;\r\n                options = copyOptions(this.options, {});\r\n            }\r\n            else {\r\n                options = copyOptions(this.options, options || {});\r\n            }\r\n            if (!callback) {\r\n                var self_1 = this;\r\n                return new Promise(function (resolve, reject) {\r\n                    parse.call(self_1, input, options, function (err, output) {\r\n                        if (err) {\r\n                            reject(err);\r\n                        }\r\n                        else {\r\n                            resolve(output);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                var context_1;\r\n                var rootFileInfo = void 0;\r\n                var pluginManager_1 = new PluginManagerFactory(this, !options.reUsePluginManager);\r\n                options.pluginManager = pluginManager_1;\r\n                context_1 = new contexts.Parse(options);\r\n                if (options.rootFileInfo) {\r\n                    rootFileInfo = options.rootFileInfo;\r\n                }\r\n                else {\r\n                    var filename = options.filename || 'input';\r\n                    var entryPath = filename.replace(/[^\\/\\\\]*$/, '');\r\n                    rootFileInfo = {\r\n                        filename: filename,\r\n                        rewriteUrls: context_1.rewriteUrls,\r\n                        rootpath: context_1.rootpath || '',\r\n                        currentDirectory: entryPath,\r\n                        entryPath: entryPath,\r\n                        rootFilename: filename\r\n                    };\r\n                    // add in a missing trailing slash\r\n                    if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\r\n                        rootFileInfo.rootpath += '/';\r\n                    }\r\n                }\r\n                var imports_1 = new ImportManager(this, context_1, rootFileInfo);\r\n                this.importManager = imports_1;\r\n                // TODO: allow the plugins to be just a list of paths or names\r\n                // Do an async plugin queue like lessc\r\n                if (options.plugins) {\r\n                    options.plugins.forEach(function (plugin) {\r\n                        var evalResult, contents;\r\n                        if (plugin.fileContent) {\r\n                            contents = plugin.fileContent.replace(/^\\uFEFF/, '');\r\n                            evalResult = pluginManager_1.Loader.evalPlugin(contents, context_1, imports_1, plugin.options, plugin.filename);\r\n                            if (evalResult instanceof LessError) {\r\n                                return callback(evalResult);\r\n                            }\r\n                        }\r\n                        else {\r\n                            pluginManager_1.addPlugin(plugin);\r\n                        }\r\n                    });\r\n                }\r\n                new Parser(context_1, imports_1, rootFileInfo)\r\n                    .parse(input, function (e, root) {\r\n                    if (e) {\r\n                        return callback(e);\r\n                    }\r\n                    callback(null, root, imports_1, options);\r\n                }, options);\r\n            }\r\n        };\r\n        return parse;\r\n    }\n\n    function Render (environment, ParseTree, ImportManager) {\r\n        var render = function (input, options, callback) {\r\n            if (typeof options === 'function') {\r\n                callback = options;\r\n                options = copyOptions(this.options, {});\r\n            }\r\n            else {\r\n                options = copyOptions(this.options, options || {});\r\n            }\r\n            if (!callback) {\r\n                var self_1 = this;\r\n                return new Promise(function (resolve, reject) {\r\n                    render.call(self_1, input, options, function (err, output) {\r\n                        if (err) {\r\n                            reject(err);\r\n                        }\r\n                        else {\r\n                            resolve(output);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                this.parse(input, options, function (err, root, imports, options) {\r\n                    if (err) {\r\n                        return callback(err);\r\n                    }\r\n                    var result;\r\n                    try {\r\n                        var parseTree = new ParseTree(root, imports);\r\n                        result = parseTree.toCSS(options);\r\n                    }\r\n                    catch (err) {\r\n                        return callback(err);\r\n                    }\r\n                    callback(null, result);\r\n                });\r\n            }\r\n        };\r\n        return render;\r\n    }\n\n    var version = \"4.1.3\";\n\n    function parseNodeVersion(version) {\n      var match = version.match(/^v(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})(?:-([0-9A-Za-z-.]+))?(?:\\+([0-9A-Za-z-.]+))?$/); // eslint-disable-line max-len\n      if (!match) {\n        throw new Error('Unable to parse: ' + version);\n      }\n\n      var res = {\n        major: parseInt(match[1], 10),\n        minor: parseInt(match[2], 10),\n        patch: parseInt(match[3], 10),\n        pre: match[4] || '',\n        build: match[5] || '',\n      };\n\n      return res;\n    }\n\n    var parseNodeVersion_1 = parseNodeVersion;\n\n    function lessRoot (environment, fileManagers) {\r\n        var sourceMapOutput, sourceMapBuilder, parseTree, importManager;\r\n        environment = new Environment(environment, fileManagers);\r\n        sourceMapOutput = SourceMapOutput(environment);\r\n        sourceMapBuilder = SourceMapBuilder(sourceMapOutput, environment);\r\n        parseTree = ParseTree(sourceMapBuilder);\r\n        importManager = ImportManager(environment);\r\n        var render = Render(environment, parseTree);\r\n        var parse = Parse(environment, parseTree, importManager);\r\n        var v = parseNodeVersion_1(\"v\" + version);\r\n        var initial = {\r\n            version: [v.major, v.minor, v.patch],\r\n            data: data,\r\n            tree: tree,\r\n            Environment: Environment,\r\n            AbstractFileManager: AbstractFileManager,\r\n            AbstractPluginLoader: AbstractPluginLoader,\r\n            environment: environment,\r\n            visitors: visitors,\r\n            Parser: Parser,\r\n            functions: functions(environment),\r\n            contexts: contexts,\r\n            SourceMapOutput: sourceMapOutput,\r\n            SourceMapBuilder: sourceMapBuilder,\r\n            ParseTree: parseTree,\r\n            ImportManager: importManager,\r\n            render: render,\r\n            parse: parse,\r\n            LessError: LessError,\r\n            transformTree: transformTree,\r\n            utils: utils,\r\n            PluginManager: PluginManagerFactory,\r\n            logger: logger$1\r\n        };\r\n        // Create a public API\r\n        var ctor = function (t) {\r\n            return function () {\r\n                var obj = Object.create(t.prototype);\r\n                t.apply(obj, Array.prototype.slice.call(arguments, 0));\r\n                return obj;\r\n            };\r\n        };\r\n        var t;\r\n        var api = Object.create(initial);\r\n        for (var n in initial.tree) {\r\n            /* eslint guard-for-in: 0 */\r\n            t = initial.tree[n];\r\n            if (typeof t === 'function') {\r\n                api[n.toLowerCase()] = ctor(t);\r\n            }\r\n            else {\r\n                api[n] = Object.create(null);\r\n                for (var o in t) {\r\n                    /* eslint guard-for-in: 0 */\r\n                    api[n][o.toLowerCase()] = ctor(t[o]);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Some of the functions assume a `this` context of the API object,\r\n         * which causes it to fail when wrapped for ES6 imports.\r\n         *\r\n         * An assumed `this` should be removed in the future.\r\n         */\r\n        initial.parse = initial.parse.bind(api);\r\n        initial.render = initial.render.bind(api);\r\n        return api;\r\n    }\n\n    /* global window, XMLHttpRequest */\r\n    var options$1;\r\n    var logger;\r\n    var fileCache = {};\r\n    // TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\r\n    var FileManager = function () { };\r\n    FileManager.prototype = Object.assign(new AbstractFileManager(), {\r\n        alwaysMakePathsAbsolute: function () {\r\n            return true;\r\n        },\r\n        join: function (basePath, laterPath) {\r\n            if (!basePath) {\r\n                return laterPath;\r\n            }\r\n            return this.extractUrlParts(laterPath, basePath).path;\r\n        },\r\n        doXHR: function (url, type, callback, errback) {\r\n            var xhr = new XMLHttpRequest();\r\n            var async = options$1.isFileProtocol ? options$1.fileAsync : true;\r\n            if (typeof xhr.overrideMimeType === 'function') {\r\n                xhr.overrideMimeType('text/css');\r\n            }\r\n            logger.debug(\"XHR: Getting '\" + url + \"'\");\r\n            xhr.open('GET', url, async);\r\n            xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\r\n            xhr.send(null);\r\n            function handleResponse(xhr, callback, errback) {\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    callback(xhr.responseText, xhr.getResponseHeader('Last-Modified'));\r\n                }\r\n                else if (typeof errback === 'function') {\r\n                    errback(xhr.status, url);\r\n                }\r\n            }\r\n            if (options$1.isFileProtocol && !options$1.fileAsync) {\r\n                if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 300)) {\r\n                    callback(xhr.responseText);\r\n                }\r\n                else {\r\n                    errback(xhr.status, url);\r\n                }\r\n            }\r\n            else if (async) {\r\n                xhr.onreadystatechange = function () {\r\n                    if (xhr.readyState == 4) {\r\n                        handleResponse(xhr, callback, errback);\r\n                    }\r\n                };\r\n            }\r\n            else {\r\n                handleResponse(xhr, callback, errback);\r\n            }\r\n        },\r\n        supports: function () {\r\n            return true;\r\n        },\r\n        clearFileCache: function () {\r\n            fileCache = {};\r\n        },\r\n        loadFile: function (filename, currentDirectory, options, environment) {\r\n            // TODO: Add prefix support like less-node?\r\n            // What about multiple paths?\r\n            if (currentDirectory && !this.isPathAbsolute(filename)) {\r\n                filename = currentDirectory + filename;\r\n            }\r\n            filename = options.ext ? this.tryAppendExtension(filename, options.ext) : filename;\r\n            options = options || {};\r\n            // sheet may be set to the stylesheet for the initial load or a collection of properties including\r\n            // some context variables for imports\r\n            var hrefParts = this.extractUrlParts(filename, window.location.href);\r\n            var href = hrefParts.url;\r\n            var self = this;\r\n            return new Promise(function (resolve, reject) {\r\n                if (options.useFileCache && fileCache[href]) {\r\n                    try {\r\n                        var lessText = fileCache[href];\r\n                        return resolve({ contents: lessText, filename: href, webInfo: { lastModified: new Date() } });\r\n                    }\r\n                    catch (e) {\r\n                        return reject({ filename: href, message: \"Error loading file \" + href + \" error was \" + e.message });\r\n                    }\r\n                }\r\n                self.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\r\n                    // per file cache\r\n                    fileCache[href] = data;\r\n                    // Use remote copy (re-parse)\r\n                    resolve({ contents: data, filename: href, webInfo: { lastModified: lastModified } });\r\n                }, function doXHRError(status, url) {\r\n                    reject({ type: 'File', message: \"'\" + url + \"' wasn't found (\" + status + \")\", href: href });\r\n                });\r\n            });\r\n        }\r\n    });\r\n    var FM = (function (opts, log) {\r\n        options$1 = opts;\r\n        logger = log;\r\n        return FileManager;\r\n    });\n\n    // TODO: Add tests for browser @plugin\r\n    /**\r\n     * Browser Plugin Loader\r\n     */\r\n    var PluginLoader = function (less) {\r\n        this.less = less;\r\n        // Should we shim this.require for browser? Probably not?\r\n    };\r\n    PluginLoader.prototype = Object.assign(new AbstractPluginLoader(), {\r\n        loadPlugin: function (filename, basePath, context, environment, fileManager) {\r\n            return new Promise(function (fulfill, reject) {\r\n                fileManager.loadFile(filename, basePath, context, environment)\r\n                    .then(fulfill).catch(reject);\r\n            });\r\n        }\r\n    });\n\n    var LogListener = (function (less, options) {\r\n        var logLevel_debug = 4;\r\n        var logLevel_info = 3;\r\n        var logLevel_warn = 2;\r\n        var logLevel_error = 1;\r\n        // The amount of logging in the javascript console.\r\n        // 3 - Debug, information and errors\r\n        // 2 - Information and errors\r\n        // 1 - Errors\r\n        // 0 - None\r\n        // Defaults to 2\r\n        options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : (options.env === 'development' ? logLevel_info : logLevel_error);\r\n        if (!options.loggers) {\r\n            options.loggers = [{\r\n                    debug: function (msg) {\r\n                        if (options.logLevel >= logLevel_debug) {\r\n                            console.log(msg);\r\n                        }\r\n                    },\r\n                    info: function (msg) {\r\n                        if (options.logLevel >= logLevel_info) {\r\n                            console.log(msg);\r\n                        }\r\n                    },\r\n                    warn: function (msg) {\r\n                        if (options.logLevel >= logLevel_warn) {\r\n                            console.warn(msg);\r\n                        }\r\n                    },\r\n                    error: function (msg) {\r\n                        if (options.logLevel >= logLevel_error) {\r\n                            console.error(msg);\r\n                        }\r\n                    }\r\n                }];\r\n        }\r\n        for (var i = 0; i < options.loggers.length; i++) {\r\n            less.logger.addListener(options.loggers[i]);\r\n        }\r\n    });\n\n    var ErrorReporting = (function (window, less, options) {\r\n        function errorHTML(e, rootHref) {\r\n            var id = \"less-error-message:\" + extractId(rootHref || '');\r\n            var template = '<li><label>{line}</label><pre class=\"{class}\">{content}</pre></li>';\r\n            var elem = window.document.createElement('div');\r\n            var timer;\r\n            var content;\r\n            var errors = [];\r\n            var filename = e.filename || rootHref;\r\n            var filenameNoPath = filename.match(/([^\\/]+(\\?.*)?)$/)[1];\r\n            elem.id = id;\r\n            elem.className = 'less-error-message';\r\n            content = \"<h3>\" + (e.type || 'Syntax') + \"Error: \" + (e.message || 'There is an error in your .less file') +\r\n                (\"</h3><p>in <a href=\\\"\" + filename + \"\\\">\" + filenameNoPath + \"</a> \");\r\n            var errorline = function (e, i, classname) {\r\n                if (e.extract[i] !== undefined) {\r\n                    errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\r\n                        .replace(/\\{class\\}/, classname)\r\n                        .replace(/\\{content\\}/, e.extract[i]));\r\n                }\r\n            };\r\n            if (e.line) {\r\n                errorline(e, 0, '');\r\n                errorline(e, 1, 'line');\r\n                errorline(e, 2, '');\r\n                content += \"on line \" + e.line + \", column \" + (e.column + 1) + \":</p><ul>\" + errors.join('') + \"</ul>\";\r\n            }\r\n            if (e.stack && (e.extract || options.logLevel >= 4)) {\r\n                content += \"<br/>Stack Trace</br />\" + e.stack.split('\\n').slice(1).join('<br/>');\r\n            }\r\n            elem.innerHTML = content;\r\n            // CSS for error messages\r\n            browser.createCSS(window.document, [\r\n                '.less-error-message ul, .less-error-message li {',\r\n                'list-style-type: none;',\r\n                'margin-right: 15px;',\r\n                'padding: 4px 0;',\r\n                'margin: 0;',\r\n                '}',\r\n                '.less-error-message label {',\r\n                'font-size: 12px;',\r\n                'margin-right: 15px;',\r\n                'padding: 4px 0;',\r\n                'color: #cc7777;',\r\n                '}',\r\n                '.less-error-message pre {',\r\n                'color: #dd6666;',\r\n                'padding: 4px 0;',\r\n                'margin: 0;',\r\n                'display: inline-block;',\r\n                '}',\r\n                '.less-error-message pre.line {',\r\n                'color: #ff0000;',\r\n                '}',\r\n                '.less-error-message h3 {',\r\n                'font-size: 20px;',\r\n                'font-weight: bold;',\r\n                'padding: 15px 0 5px 0;',\r\n                'margin: 0;',\r\n                '}',\r\n                '.less-error-message a {',\r\n                'color: #10a',\r\n                '}',\r\n                '.less-error-message .error {',\r\n                'color: red;',\r\n                'font-weight: bold;',\r\n                'padding-bottom: 2px;',\r\n                'border-bottom: 1px dashed red;',\r\n                '}'\r\n            ].join('\\n'), { title: 'error-message' });\r\n            elem.style.cssText = [\r\n                'font-family: Arial, sans-serif',\r\n                'border: 1px solid #e00',\r\n                'background-color: #eee',\r\n                'border-radius: 5px',\r\n                '-webkit-border-radius: 5px',\r\n                '-moz-border-radius: 5px',\r\n                'color: #e00',\r\n                'padding: 15px',\r\n                'margin-bottom: 15px'\r\n            ].join(';');\r\n            if (options.env === 'development') {\r\n                timer = setInterval(function () {\r\n                    var document = window.document;\r\n                    var body = document.body;\r\n                    if (body) {\r\n                        if (document.getElementById(id)) {\r\n                            body.replaceChild(elem, document.getElementById(id));\r\n                        }\r\n                        else {\r\n                            body.insertBefore(elem, body.firstChild);\r\n                        }\r\n                        clearInterval(timer);\r\n                    }\r\n                }, 10);\r\n            }\r\n        }\r\n        function removeErrorHTML(path) {\r\n            var node = window.document.getElementById(\"less-error-message:\" + extractId(path));\r\n            if (node) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n        }\r\n        function removeError(path) {\r\n            if (!options.errorReporting || options.errorReporting === 'html') {\r\n                removeErrorHTML(path);\r\n            }\r\n            else if (options.errorReporting === 'console') ;\r\n            else if (typeof options.errorReporting === 'function') {\r\n                options.errorReporting('remove', path);\r\n            }\r\n        }\r\n        function errorConsole(e, rootHref) {\r\n            var template = '{line} {content}';\r\n            var filename = e.filename || rootHref;\r\n            var errors = [];\r\n            var content = (e.type || 'Syntax') + \"Error: \" + (e.message || 'There is an error in your .less file') + \" in \" + filename;\r\n            var errorline = function (e, i, classname) {\r\n                if (e.extract[i] !== undefined) {\r\n                    errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\r\n                        .replace(/\\{class\\}/, classname)\r\n                        .replace(/\\{content\\}/, e.extract[i]));\r\n                }\r\n            };\r\n            if (e.line) {\r\n                errorline(e, 0, '');\r\n                errorline(e, 1, 'line');\r\n                errorline(e, 2, '');\r\n                content += \" on line \" + e.line + \", column \" + (e.column + 1) + \":\\n\" + errors.join('\\n');\r\n            }\r\n            if (e.stack && (e.extract || options.logLevel >= 4)) {\r\n                content += \"\\nStack Trace\\n\" + e.stack;\r\n            }\r\n            less.logger.error(content);\r\n        }\r\n        function error(e, rootHref) {\r\n            if (!options.errorReporting || options.errorReporting === 'html') {\r\n                errorHTML(e, rootHref);\r\n            }\r\n            else if (options.errorReporting === 'console') {\r\n                errorConsole(e, rootHref);\r\n            }\r\n            else if (typeof options.errorReporting === 'function') {\r\n                options.errorReporting('add', e, rootHref);\r\n            }\r\n        }\r\n        return {\r\n            add: error,\r\n            remove: removeError\r\n        };\r\n    });\n\n    // Cache system is a bit outdated and could do with work\r\n    var Cache = (function (window, options, logger) {\r\n        var cache = null;\r\n        if (options.env !== 'development') {\r\n            try {\r\n                cache = (typeof window.localStorage === 'undefined') ? null : window.localStorage;\r\n            }\r\n            catch (_) { }\r\n        }\r\n        return {\r\n            setCSS: function (path, lastModified, modifyVars, styles) {\r\n                if (cache) {\r\n                    logger.info(\"saving \" + path + \" to cache.\");\r\n                    try {\r\n                        cache.setItem(path, styles);\r\n                        cache.setItem(path + \":timestamp\", lastModified);\r\n                        if (modifyVars) {\r\n                            cache.setItem(path + \":vars\", JSON.stringify(modifyVars));\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        // TODO - could do with adding more robust error handling\r\n                        logger.error(\"failed to save \\\"\" + path + \"\\\" to local storage for caching.\");\r\n                    }\r\n                }\r\n            },\r\n            getCSS: function (path, webInfo, modifyVars) {\r\n                var css = cache && cache.getItem(path);\r\n                var timestamp = cache && cache.getItem(path + \":timestamp\");\r\n                var vars = cache && cache.getItem(path + \":vars\");\r\n                modifyVars = modifyVars || {};\r\n                vars = vars || \"{}\"; // if not set, treat as the JSON representation of an empty object\r\n                if (timestamp && webInfo.lastModified &&\r\n                    (new Date(webInfo.lastModified).valueOf() ===\r\n                        new Date(timestamp).valueOf()) &&\r\n                    JSON.stringify(modifyVars) === vars) {\r\n                    // Use local copy\r\n                    return css;\r\n                }\r\n            }\r\n        };\r\n    });\n\n    var ImageSize = (function () {\r\n        function imageSize() {\r\n            throw {\r\n                type: 'Runtime',\r\n                message: 'Image size functions are not supported in browser version of less'\r\n            };\r\n        }\r\n        var imageFunctions = {\r\n            'image-size': function (filePathNode) {\r\n                imageSize();\r\n                return -1;\r\n            },\r\n            'image-width': function (filePathNode) {\r\n                imageSize();\r\n                return -1;\r\n            },\r\n            'image-height': function (filePathNode) {\r\n                imageSize();\r\n                return -1;\r\n            }\r\n        };\r\n        functionRegistry.addMultiple(imageFunctions);\r\n    });\n\n    //\r\n    var root = (function (window, options) {\r\n        var document = window.document;\r\n        var less = lessRoot();\r\n        less.options = options;\r\n        var environment = less.environment;\r\n        var FileManager = FM(options, less.logger);\r\n        var fileManager = new FileManager();\r\n        environment.addFileManager(fileManager);\r\n        less.FileManager = FileManager;\r\n        less.PluginLoader = PluginLoader;\r\n        LogListener(less, options);\r\n        var errors = ErrorReporting(window, less, options);\r\n        var cache = less.cache = options.cache || Cache(window, options, less.logger);\r\n        ImageSize(less.environment);\r\n        // Setup user functions - Deprecate?\r\n        if (options.functions) {\r\n            less.functions.functionRegistry.addMultiple(options.functions);\r\n        }\r\n        var typePattern = /^text\\/(x-)?less$/;\r\n        function clone(obj) {\r\n            var cloned = {};\r\n            for (var prop in obj) {\r\n                if (obj.hasOwnProperty(prop)) {\r\n                    cloned[prop] = obj[prop];\r\n                }\r\n            }\r\n            return cloned;\r\n        }\r\n        // only really needed for phantom\r\n        function bind(func, thisArg) {\r\n            var curryArgs = Array.prototype.slice.call(arguments, 2);\r\n            return function () {\r\n                var args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));\r\n                return func.apply(thisArg, args);\r\n            };\r\n        }\r\n        function loadStyles(modifyVars) {\r\n            var styles = document.getElementsByTagName('style');\r\n            var style;\r\n            for (var i = 0; i < styles.length; i++) {\r\n                style = styles[i];\r\n                if (style.type.match(typePattern)) {\r\n                    var instanceOptions = clone(options);\r\n                    instanceOptions.modifyVars = modifyVars;\r\n                    var lessText = style.innerHTML || '';\r\n                    instanceOptions.filename = document.location.href.replace(/#.*$/, '');\r\n                    /* jshint loopfunc:true */\r\n                    // use closure to store current style\r\n                    less.render(lessText, instanceOptions, bind(function (style, e, result) {\r\n                        if (e) {\r\n                            errors.add(e, 'inline');\r\n                        }\r\n                        else {\r\n                            style.type = 'text/css';\r\n                            if (style.styleSheet) {\r\n                                style.styleSheet.cssText = result.css;\r\n                            }\r\n                            else {\r\n                                style.innerHTML = result.css;\r\n                            }\r\n                        }\r\n                    }, null, style));\r\n                }\r\n            }\r\n        }\r\n        function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {\r\n            var instanceOptions = clone(options);\r\n            addDataAttr(instanceOptions, sheet);\r\n            instanceOptions.mime = sheet.type;\r\n            if (modifyVars) {\r\n                instanceOptions.modifyVars = modifyVars;\r\n            }\r\n            function loadInitialFileCallback(loadedFile) {\r\n                var data = loadedFile.contents;\r\n                var path = loadedFile.filename;\r\n                var webInfo = loadedFile.webInfo;\r\n                var newFileInfo = {\r\n                    currentDirectory: fileManager.getPath(path),\r\n                    filename: path,\r\n                    rootFilename: path,\r\n                    rewriteUrls: instanceOptions.rewriteUrls\r\n                };\r\n                newFileInfo.entryPath = newFileInfo.currentDirectory;\r\n                newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;\r\n                if (webInfo) {\r\n                    webInfo.remaining = remaining;\r\n                    var css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);\r\n                    if (!reload && css) {\r\n                        webInfo.local = true;\r\n                        callback(null, css, data, sheet, webInfo, path);\r\n                        return;\r\n                    }\r\n                }\r\n                // TODO add tests around how this behaves when reloading\r\n                errors.remove(path);\r\n                instanceOptions.rootFileInfo = newFileInfo;\r\n                less.render(data, instanceOptions, function (e, result) {\r\n                    if (e) {\r\n                        e.href = path;\r\n                        callback(e);\r\n                    }\r\n                    else {\r\n                        cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);\r\n                        callback(null, result.css, data, sheet, webInfo, path);\r\n                    }\r\n                });\r\n            }\r\n            fileManager.loadFile(sheet.href, null, instanceOptions, environment)\r\n                .then(function (loadedFile) {\r\n                loadInitialFileCallback(loadedFile);\r\n            }).catch(function (err) {\r\n                console.log(err);\r\n                callback(err);\r\n            });\r\n        }\r\n        function loadStyleSheets(callback, reload, modifyVars) {\r\n            for (var i = 0; i < less.sheets.length; i++) {\r\n                loadStyleSheet(less.sheets[i], callback, reload, less.sheets.length - (i + 1), modifyVars);\r\n            }\r\n        }\r\n        function initRunningMode() {\r\n            if (less.env === 'development') {\r\n                less.watchTimer = setInterval(function () {\r\n                    if (less.watchMode) {\r\n                        fileManager.clearFileCache();\r\n                        loadStyleSheets(function (e, css, _, sheet, webInfo) {\r\n                            if (e) {\r\n                                errors.add(e, e.href || sheet.href);\r\n                            }\r\n                            else if (css) {\r\n                                browser.createCSS(window.document, css, sheet);\r\n                            }\r\n                        });\r\n                    }\r\n                }, options.poll);\r\n            }\r\n        }\r\n        //\r\n        // Watch mode\r\n        //\r\n        less.watch = function () {\r\n            if (!less.watchMode) {\r\n                less.env = 'development';\r\n                initRunningMode();\r\n            }\r\n            this.watchMode = true;\r\n            return true;\r\n        };\r\n        less.unwatch = function () { clearInterval(less.watchTimer); this.watchMode = false; return false; };\r\n        //\r\n        // Synchronously get all <link> tags with the 'rel' attribute set to\r\n        // \"stylesheet/less\".\r\n        //\r\n        less.registerStylesheetsImmediately = function () {\r\n            var links = document.getElementsByTagName('link');\r\n            less.sheets = [];\r\n            for (var i = 0; i < links.length; i++) {\r\n                if (links[i].rel === 'stylesheet/less' || (links[i].rel.match(/stylesheet/) &&\r\n                    (links[i].type.match(typePattern)))) {\r\n                    less.sheets.push(links[i]);\r\n                }\r\n            }\r\n        };\r\n        //\r\n        // Asynchronously get all <link> tags with the 'rel' attribute set to\r\n        // \"stylesheet/less\", returning a Promise.\r\n        //\r\n        less.registerStylesheets = function () { return new Promise(function (resolve, reject) {\r\n            less.registerStylesheetsImmediately();\r\n            resolve();\r\n        }); };\r\n        //\r\n        // With this function, it's possible to alter variables and re-render\r\n        // CSS without reloading less-files\r\n        //\r\n        less.modifyVars = function (record) { return less.refresh(true, record, false); };\r\n        less.refresh = function (reload, modifyVars, clearFileCache) {\r\n            if ((reload || clearFileCache) && clearFileCache !== false) {\r\n                fileManager.clearFileCache();\r\n            }\r\n            return new Promise(function (resolve, reject) {\r\n                var startTime;\r\n                var endTime;\r\n                var totalMilliseconds;\r\n                var remainingSheets;\r\n                startTime = endTime = new Date();\r\n                // Set counter for remaining unprocessed sheets\r\n                remainingSheets = less.sheets.length;\r\n                if (remainingSheets === 0) {\r\n                    endTime = new Date();\r\n                    totalMilliseconds = endTime - startTime;\r\n                    less.logger.info('Less has finished and no sheets were loaded.');\r\n                    resolve({\r\n                        startTime: startTime,\r\n                        endTime: endTime,\r\n                        totalMilliseconds: totalMilliseconds,\r\n                        sheets: less.sheets.length\r\n                    });\r\n                }\r\n                else {\r\n                    // Relies on less.sheets array, callback seems to be guaranteed to be called for every element of the array\r\n                    loadStyleSheets(function (e, css, _, sheet, webInfo) {\r\n                        if (e) {\r\n                            errors.add(e, e.href || sheet.href);\r\n                            reject(e);\r\n                            return;\r\n                        }\r\n                        if (webInfo.local) {\r\n                            less.logger.info(\"Loading \" + sheet.href + \" from cache.\");\r\n                        }\r\n                        else {\r\n                            less.logger.info(\"Rendered \" + sheet.href + \" successfully.\");\r\n                        }\r\n                        browser.createCSS(window.document, css, sheet);\r\n                        less.logger.info(\"CSS for \" + sheet.href + \" generated in \" + (new Date() - endTime) + \"ms\");\r\n                        // Count completed sheet\r\n                        remainingSheets--;\r\n                        // Check if the last remaining sheet was processed and then call the promise\r\n                        if (remainingSheets === 0) {\r\n                            totalMilliseconds = new Date() - startTime;\r\n                            less.logger.info(\"Less has finished. CSS generated in \" + totalMilliseconds + \"ms\");\r\n                            resolve({\r\n                                startTime: startTime,\r\n                                endTime: endTime,\r\n                                totalMilliseconds: totalMilliseconds,\r\n                                sheets: less.sheets.length\r\n                            });\r\n                        }\r\n                        endTime = new Date();\r\n                    }, reload, modifyVars);\r\n                }\r\n                loadStyles(modifyVars);\r\n            });\r\n        };\r\n        less.refreshStyles = loadStyles;\r\n        return less;\r\n    });\n\n    /**\r\n     * Kicks off less and compiles any stylesheets\r\n     * used in the browser distributed version of less\r\n     * to kick-start less using the browser api\r\n     */\r\n    var options = defaultOptions();\r\n    if (window.less) {\r\n        for (var key in window.less) {\r\n            if (window.less.hasOwnProperty(key)) {\r\n                options[key] = window.less[key];\r\n            }\r\n        }\r\n    }\r\n    addDefaultOptions(window, options);\r\n    options.plugins = options.plugins || [];\r\n    if (window.LESS_PLUGINS) {\r\n        options.plugins = options.plugins.concat(window.LESS_PLUGINS);\r\n    }\r\n    var less = root(window, options);\r\n    window.less = less;\r\n    var css;\r\n    var head;\r\n    var style;\r\n    // Always restore page visibility\r\n    function resolveOrReject(data) {\r\n        if (data.filename) {\r\n            console.warn(data);\r\n        }\r\n        if (!options.async) {\r\n            head.removeChild(style);\r\n        }\r\n    }\r\n    if (options.onReady) {\r\n        if (/!watch/.test(window.location.hash)) {\r\n            less.watch();\r\n        }\r\n        // Simulate synchronous stylesheet loading by hiding page rendering\r\n        if (!options.async) {\r\n            css = 'body { display: none !important }';\r\n            head = document.head || document.getElementsByTagName('head')[0];\r\n            style = document.createElement('style');\r\n            style.type = 'text/css';\r\n            if (style.styleSheet) {\r\n                style.styleSheet.cssText = css;\r\n            }\r\n            else {\r\n                style.appendChild(document.createTextNode(css));\r\n            }\r\n            head.appendChild(style);\r\n        }\r\n        less.registerStylesheetsImmediately();\r\n        less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);\r\n    }\n\n    return less;\n\n})));\n"],
  "mappings": "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",
  "names": ["options", "document", "head", "window", "Environment", "functions", "Node", "self", "color", "key", "copy", "e", "merge", "copyFromOriginal", "base", "i", "selector", "paths", "context", "hadParentSelector", "debugInfo", "functionCaller", "value", "path", "string", "f", "mixin", "mixinPath", "AbstractFileManager", "AbstractPluginLoader", "version", "Visitor", "ImportSequencer", "root", "SetTreeVisibilityVisitor", "ExtendFinderVisitor", "ProcessExtendsVisitor", "JoinSelectorVisitor", "CSSVisitorUtils", "atRuleNode", "rule", "len", "Parser", "fileInfo", "body", "h", "list", "PluginManager", "less", "functionRegistry", "SourceMapOutput", "SourceMapBuilder", "css", "ParseTree", "ImportManager", "loadedFile", "err", "t", "xhr", "callback", "errback", "data", "logger", "FileManager", "clone", "style"]
}
